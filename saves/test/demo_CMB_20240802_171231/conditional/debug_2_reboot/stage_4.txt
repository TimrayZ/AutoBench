############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, min = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, min = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [7:0] a,
	input [7:0] b,
	input [7:0] c,
	input [7:0] d,
	output reg [7:0] min
);

Your other information:
RTL circuit problem description:
Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). 
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1: The Device Under Test (DUT) is a Verilog module named 'top_module'.",
    "2: The DUT accepts four 8-bit unsigned inputs named 'a', 'b', 'c', and 'd'.",
    "3: The DUT outputs an 8-bit unsigned value named 'min', which represents the minimum of the input values.",
    "4: The inputs 'a', 'b', 'c', and 'd' are compared using standard comparison operators, and the smallest value is output as 'min'.",
    "5: The testbench should drive the DUT with various combinations of input values to thoroughly test all possible scenarios where one or more inputs could be the minimum.",
    "6: The testbench should validate that for each set of inputs, the output 'min' accurately represents the smallest of the input values.",
    "7: Specific test cases should include edge cases such as all inputs being equal, all possible permutations of inputs where one is distinctly the smallest, and boundary values (0 and 255) of the 8-bit range.",
    "8: The testbench should have a mechanism to output success or failure for each test case, indicating whether the DUT operates as expected according to the specifications derived from the problem description."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "All inputs are the same: a=100, b=100, c=100, d=100 at cycle 1.",
  "scenario 2": "One input distinctively smaller: a=200, b=200, c=50, d=200 at cycle 2.",
  "scenario 3": "Boundary value as smallest: a=255, b=255, c=255, d=0 at cycle 3.",
  "scenario 4": "Boundary value and equal others: a=0, b=100, c=100, d=100 at cycle 4.",
  "scenario 5": "Descending order input: a=240, b=180, c=120, d=60 at cycle 5.",
  "scenario 6": "Ascending order input: a=50, b=100, c=150, d=200 at cycle 6.",
  "scenario 7": "Random order with mid-range minimum: a=130, b=85, c=160, d=90 at cycle 7.",
  "scenario 8": "Random values with two same minimums: a=75, b=30, c=30, d=100 at cycle 8.",
  "scenario 9": "All inputs are zeros: a=0, b=0, c=0, d=0 at cycle 9.",
  "scenario 10": "Ascending values except for one distinctively smallest entered in second position: a=150, b=25, c=180, d=255 at cycle 10."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, min = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, min = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module testbench;
    reg [7:0] a, b, c, d;
    wire [7:0] min;
    integer file;

    top_module DUT (
        .a(a),
        .b(b),
        .c(c),
        .d(d),
        .min(min)
    );

    initial begin
        file = $fopen("TBout.txt", "w");

        // Scenario 1
        a = 100; b = 100; c = 100; d = 100;
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 2
        a = 200; b = 200; c = 50;  d = 200;
        #10;
        $fdisplay(file, "scenario: 2, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 3
        a = 255; b = 255; c = 255; d = 0;
        #10;
        $fdisplay(file, "scenario: 3, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 4
        a = 0;   b = 100; c = 100; d = 100;
        #10;
        $fdisplay(file, "scenario: 4, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 5
        a = 240; b = 180; c = 120; d = 60;
        #10;
        $fdisplay(file, "scenario: 5, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 6
        a = 50;  b = 100; c = 150; d = 200;
        #10;
        $fdisplay(file, "scenario: 6, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 7
        a = 130; b = 85;  c = 160; d = 90;
        #10;
        $fdisplay(file, "scenario: 7, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 8
        a = 75;  b = 30;  c = 30;  d = 100;
        #10;
        $fdisplay(file, "scenario: 8, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 9
        a = 0; b = 0; c = 0; d = 0;
        #10;
        $fdisplay(file, "scenario: 9, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 10
        a = 150; b = 25;  c = 180; d = 255;
        #10;
        $fdisplay(file, "scenario: 10, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        $fclose(file);
        $finish;
    end
endmodule
```

