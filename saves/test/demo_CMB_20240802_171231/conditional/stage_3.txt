############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The information we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in stage 3; in this stage, please give me the core rules of an ideal DUT. you should give these rules in python. (For convenience, you can use binary or hexadecimal format in python, i.e. 0b0010 and 0x1a). Later we will use these ideal rules to generate expected values in each test scenario. currently you must only generate the core part of the rules. the input of these rules should be related to the test vectors from test scenario. the rule should give the expected values under test vectors. You don't need to consider the control signals like clk or reset, unless the core rules of this task are about these signals. You can use numpy, scipy or other third party python libraries to help you write the rules. Please import them if you need. 
3. your information is:
RTL circuit problem description:
Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). 
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1: The Device Under Test (DUT) is a Verilog module named 'top_module'.",
    "2: The DUT accepts four 8-bit unsigned inputs named 'a', 'b', 'c', and 'd'.",
    "3: The DUT outputs an 8-bit unsigned value named 'min', which represents the minimum of the input values.",
    "4: The inputs 'a', 'b', 'c', and 'd' are compared using standard comparison operators, and the smallest value is output as 'min'.",
    "5: The testbench should drive the DUT with various combinations of input values to thoroughly test all possible scenarios where one or more inputs could be the minimum.",
    "6: The testbench should validate that for each set of inputs, the output 'min' accurately represents the smallest of the input values.",
    "7: Specific test cases should include edge cases such as all inputs being equal, all possible permutations of inputs where one is distinctly the smallest, and boundary values (0 and 255) of the 8-bit range.",
    "8: The testbench should have a mechanism to output success or failure for each test case, indicating whether the DUT operates as expected according to the specifications derived from the problem description."
  ]
}
DUT header:
module top_module (
	input [7:0] a,
	input [7:0] b,
	input [7:0] c,
	input [7:0] d,
	output reg [7:0] min
);

test scenario: (please note the test vectors below, it will help you determine the input parameters of the rules)
{
  "scenario 1": "All inputs are the same: a=100, b=100, c=100, d=100 at cycle 1.",
  "scenario 2": "One input distinctively smaller: a=200, b=200, c=50, d=200 at cycle 2.",
  "scenario 3": "Boundary value as smallest: a=255, b=255, c=255, d=0 at cycle 3.",
  "scenario 4": "Boundary value and equal others: a=0, b=100, c=100, d=100 at cycle 4.",
  "scenario 5": "Descending order input: a=240, b=180, c=120, d=60 at cycle 5.",
  "scenario 6": "Ascending order input: a=50, b=100, c=150, d=200 at cycle 6.",
  "scenario 7": "Random order with mid-range minimum: a=130, b=85, c=160, d=90 at cycle 7.",
  "scenario 8": "Random values with two same minimums: a=75, b=30, c=30, d=100 at cycle 8.",
  "scenario 9": "All inputs are zeros: a=0, b=0, c=0, d=0 at cycle 9.",
  "scenario 10": "Ascending values except for one distinctively smallest entered in second position: a=150, b=25, c=180, d=255 at cycle 10."
}
your response should only contain python code. For convenience, you can use binary or hexadecimal format in python. For example: 0b0010 and 0x1a


########## assistant ##########
To establish the core rules for the ideal DUT in Python based on the RTL circuit problem description provided, we'll implement a function that computes the minimum of four unsigned 8-bit integers. This function will receive these integers as inputs and will return the minimum value among them. The inputs are related to the test vectors specified in the test scenarios.

You can use this function to generate expected values for each test scenario. Here is the Python code implementing these rules:

```python
def find_minimum(a, b, c, d):
    """
    Compute the minimum of four 8-bit unsigned integers.
    
    Parameters:
    - a (int): The first input integer.
    - b (int): The second input integer.
    - c (int): The third input integer.
    - d (int): The fourth input integer.
    
    Returns:
    - int: The minimum value among the input integers.
    """
    # Calculate the minimum of the four numbers
    min_value = min(a, b, c, d)
    return min_value
```

This function utilizes Python's built-in `min()` function to determine the smallest of the four provided integers. Each of the four parameters (`a`, `b`, `c`, `d`) corresponds to the input parameters in the "top_module" from your RTL specification. In test scenarios, you will directly pass the test vectors as arguments to this function to calculate and verify the expected minimum values. For example:

```python
# Sample usage with test scenario 2
min_value = find_minimum(200, 200, 50, 200)
print(f"The computed minimum value is: {min_value}")
```

This output can then be checked against the expected outcome from the testbench simulations to ensure that the RTL module behaves as intended.

