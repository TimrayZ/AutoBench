############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, y = %d, w = %d, Y2 = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, y = %d, w = %d, Y2 = %d", "scenario: 1b, y = %d, w = %d, Y2 = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	input [3:1] y,
	input w,
	output reg Y2);

Your other information:
RTL circuit problem description:
Consider the state machine shown below:

// A (0) --0--> B
// A (0) --1--> A
// B (0) --0--> C
// B (0) --1--> D
// C (0) --0--> E
// C (0) --1--> D
// D (0) --0--> F
// D (0) --1--> A
// E (1) --0--> E
// E (1) --1--> D
// F (1) --0--> C
// F (1) --1--> D

// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].
RTL testbench specification:
{
  "important data": "// State Transition Table:\n// State (y)   | Input (w) | Next State (y_next)\n// 000 (A)     | 0         | 001 (B)\n// 000 (A)     | 1         | 000 (A)\n// 001 (B)     | 0         | 010 (C)\n// 001 (B)     | 1         | 011 (D)\n// 010 (C)     | 0         | 100 (E)\n// 010 (C)     | 1         | 011 (D)\n// 011 (D)     | 0         | 101 (F)\n// 011 (D)     | 1         | 000 (A)\n// 100 (E)     | 0         | 100 (E)\n// 100 (E)     | 1         | 011 (D)\n// 101 (F)     | 0         | 010 (C)\n// 101 (F)     | 1         | 011 (D)",
  "technical specifications": [
    "1. DUT Module Header: top_module(input [3:1] y, input w, output reg Y2)",
    "2. The design implements next-state logic based on the current state (y) and input (w).",
    "3. The output Y2 corresponds to the second bit (y[2]) of the state code.",
    "4. Testbench must generate combinations of current state (y) and inputs (w) to verify output (Y2).",
    "5. The DUT should be tested for all possible input combinations to ensure functionality."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set initial state to A (y = 3'b000) and apply input w = 0. Wait for 1 clock cycle.",
  "scenario 2": "Keep state at A (y = 3'b000) and apply input w = 1. Wait for 1 clock cycle.",
  "scenario 3": "Change state to B (y = 3'b001) and apply input w = 0. Wait for 1 clock cycle.",
  "scenario 4": "Keep state at B (y = 3'b001) and apply input w = 1. Wait for 1 clock cycle.",
  "scenario 5": "Change state to C (y = 3'b010) and apply input w = 0. Wait for 1 clock cycle.",
  "scenario 6": "Keep state at C (y = 3'b010) and apply input w = 1. Wait for 1 clock cycle.",
  "scenario 7": "Change state to D (y = 3'b011) and apply input w = 0. Wait for 1 clock cycle.",
  "scenario 8": "Keep state at D (y = 3'b011) and apply input w = 1. Wait for 1 clock cycle.",
  "scenario 9": "Change state to E (y = 3'b100) and apply input w = 0. Wait for 1 clock cycle.",
  "scenario 10": "Keep state at E (y = 3'b100) and apply input w = 1. Wait for 1 clock cycle.",
  "scenario 11": "Change state to F (y = 3'b101) and apply input w = 0. Wait for 1 clock cycle.",
  "scenario 12": "Keep state at F (y = 3'b101) and apply input w = 1. Wait for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, y = %d, w = %d, Y2 = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, y = %d, w = %d, Y2 = %d", "scenario: 1b, y = %d, w = %d, Y2 = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module tb_top_module;

    reg [3:1] y;
    reg w;
    wire Y2;

    top_module DUT (
        .y(y),
        .w(w),
        .Y2(Y2)
    );

    integer file;

    initial begin
        file = $fopen("TBout.txt", "w");

        // Scenario 1: Set initial state to A (y = 3'b000) and apply input w = 0.
        y = 3'b000; w = 1'b0; #10;
        $fdisplay(file, "scenario: 1, y = %b, w = %b, Y2 = %b", y, w, Y2);

        // Scenario 2: Keep state at A (y = 3'b000) and apply input w = 1.
        w = 1'b1; #10;
        $fdisplay(file, "scenario: 2, y = %b, w = %b, Y2 = %b", y, w, Y2);

        // Scenario 3: Change state to B (y = 3'b001) and apply input w = 0.
        y = 3'b001; w = 1'b0; #10;
        $fdisplay(file, "scenario: 3, y = %b, w = %b, Y2 = %b", y, w, Y2);

        // Scenario 4: Keep state at B (y = 3'b001) and apply input w = 1.
        w = 1'b1; #10;
        $fdisplay(file, "scenario: 4, y = %b, w = %b, Y2 = %b", y, w, Y2);

        // Scenario 5: Change state to C (y = 3'b010) and apply input w = 0.
        y = 3'b010; w = 1'b0; #10;
        $fdisplay(file, "scenario: 5, y = %b, w = %b, Y2 = %b", y, w, Y2);

        // Scenario 6: Keep state at C (y = 3'b010) and apply input w = 1.
        w = 1'b1; #10;
        $fdisplay(file, "scenario: 6, y = %b, w = %b, Y2 = %b", y, w, Y2);

        // Scenario 7: Change state to D (y = 3'b011) and apply input w = 0.
        y = 3'b011; w = 1'b0; #10;
        $fdisplay(file, "scenario: 7, y = %b, w = %b, Y2 = %b", y, w, Y2);

        // Scenario 8: Keep state at D (y = 3'b011) and apply input w = 1.
        w = 1'b1; #10;
        $fdisplay(file, "scenario: 8, y = %b, w = %b, Y2 = %b", y, w, Y2);

        // Scenario 9: Change state to E (y = 3'b100) and apply input w = 0.
        y = 3'b100; w = 1'b0; #10;
        $fdisplay(file, "scenario: 9, y = %b, w = %b, Y2 = %b", y, w, Y2);

        // Scenario 10: Keep state at E (y = 3'b100) and apply input w = 1.
        w = 1'b1; #10;
        $fdisplay(file, "scenario: 10, y = %b, w = %b, Y2 = %b", y, w, Y2);

        // Scenario 11: Change state to F (y = 3'b101) and apply input w = 0.
        y = 3'b101; w = 1'b0; #10;
        $fdisplay(file, "scenario: 11, y = %b, w = %b, Y2 = %b", y, w, Y2);

        // Scenario 12: Keep state at F (y = 3'b101) and apply input w = 1.
        w = 1'b1; #10;
        $fdisplay(file, "scenario: 12, y = %b, w = %b, Y2 = %b", y, w, Y2);

        $fclose(file);
        $finish;
    end

endmodule
```

