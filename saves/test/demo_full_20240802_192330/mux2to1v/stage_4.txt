############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, sel = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, sel = %d, out = %d", "scenario: 1b, a = %d, b = %d, sel = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [99:0] a,
	input [99:0] b,
	input sel,
	output [99:0] out
);

Your other information:
RTL circuit problem description:
Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The design implements a 2-1 multiplexer with inputs a and b, each being 100 bits wide.",
    "2. The selection input, sel, is a single bit that determines whether input 'a' or 'b' is routed to the output.",
    "3. When sel=0, the output 'out' should equal 'a'.",
    "4. When sel=1, the output 'out' should equal 'b'.",
    "5. The output 'out' is also 100 bits wide.",
    "6. All inputs and outputs are active on the rising edge of the clock signal."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set inputs a and b to some arbitrary 100-bit values (e.g., a = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, b = 100'b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111) and sel = 0. Apply the clock signal and wait for one clock cycle to observe the output.",
  "scenario 2": "Keep input a the same (e.g., a = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) and change b to a different 100-bit value (e.g., b = 100'b1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010) while sel = 1. Apply the clock signal and wait for one clock cycle to observe the output.",
  "scenario 3": "Set inputs a and b to the same value (e.g., a = b = 100'b111100001111000011110000111100001111000011110000111100001111000011110000111100001111000011110000) and sel = 0. Apply the clock signal and wait for one clock cycle to observe the output.",
  "scenario 4": "Choose arbitrary values for a = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 and b = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 with sel = 1. Apply the clock signal and wait for one clock cycle to observe the output.",
  "scenario 5": "Change only the sel line to toggle between 0 and 1 while keeping inputs a and b constant at their initial values (previously set in scenario 1). Apply clock signal twice, once for sel = 0 and once for sel = 1. Wait for one clock cycle after each change and observe the output."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, sel = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, sel = %d, out = %d", "scenario: 1b, a = %d, b = %d, sel = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;
    // Inputs
    reg [99:0] a;
    reg [99:0] b;
    reg sel;
    // Outputs
    wire [99:0] out;

    // Instantiate the DUT
    top_module DUT (
        .a(a),
        .b(b),
        .sel(sel),
        .out(out)
    );

    // Clock signal
    reg clk;
    initial clk = 0;
    always #5 clk = ~clk; // 10 ns clock period

    // File to export data
    integer file;

    initial begin
        // Open the file for writing
        file = $fopen("TBout.txt", "w");

        // Scenario 1
        a = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
        b = 100'b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
        sel = 0;
        #10; // Wait for one clock cycle
        $fdisplay(file, "scenario: 1, a = %b, b = %b, sel = %b, out = %b", a, b, sel, out);

        // Scenario 2
        a = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
        b = 100'b1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
        sel = 1;
        #10; // Wait for one clock cycle
        $fdisplay(file, "scenario: 2, a = %b, b = %b, sel = %b, out = %b", a, b, sel, out);

        // Scenario 3
        a = 100'b111100001111000011110000111100001111000011110000111100001111000011110000111100001111000011110000;
        b = 100'b111100001111000011110000111100001111000011110000111100001111000011110000111100001111000011110000;
        sel = 0;
        #10; // Wait for one clock cycle
        $fdisplay(file, "scenario: 3, a = %b, b = %b, sel = %b, out = %b", a, b, sel, out);

        // Scenario 4
        a = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001;
        b = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010;
        sel = 1;
        #10; // Wait for one clock cycle
        $fdisplay(file, "scenario: 4, a = %b, b = %b, sel = %b, out = %b", a, b, sel, out);

        // Scenario 5
        sel = 0; // sel = 0
        #10; // Wait for one clock cycle
        $fdisplay(file, "scenario: 5a, a = %b, b = %b, sel = %b, out = %b", a, b, sel, out);
        
        sel = 1; // sel = 1
        #10; // Wait for one clock cycle
        $fdisplay(file, "scenario: 5b, a = %b, b = %b, sel = %b, out = %b", a, b, sel, out);

        // Close the file
        $fclose(file);
        $finish; // End the simulation
    end
endmodule
```

