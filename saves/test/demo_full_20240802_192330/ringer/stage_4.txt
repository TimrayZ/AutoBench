############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", "scenario: 1b, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	input ring, 
	input vibrate_mode,
	output ringer,
	output motor
);

Your other information:
RTL circuit problem description:
Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.
RTL testbench specification:
{
  "important data": "The DUT must have the following operational characteristics: When ring = 1 and vibrate_mode = 0, output ringer = 1 and motor = 0; When vibrate_mode = 1, output ringer = 0 and motor = 1. It must never allow both outputs to be high at the same time. Inputs are ring (1 bit, signifies an incoming call) and vibrate_mode (1 bit, signifies if the phone is in vibrate mode). Outputs are ringer (1 bit, activates the ringer) and motor (1 bit, activates the vibration motor).",
  "technical specifications": [
    "1. DUT Module Header: module top_module(input ring, input vibrate_mode, output ringer, output motor);",
    "2. The DUT should turn on the ringer (ringer = 1) when ring = 1 and vibrate_mode = 0.",
    "3. The DUT should turn on the motor (motor = 1) when vibrate_mode = 1.",
    "4. The DUT must ensure that the ringer and motor outputs are never both high at the same time.",
    "5. The testbench should initialize inputs, apply stimulus to the DUT, check outputs, and report whether they match expected results."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set ring = 1 and vibrate_mode = 0. This scenario should be tested for 2 clock cycles (initially apply inputs at clock cycle 0).",
  "scenario 2": "Set ring = 0 and vibrate_mode = 0. This scenario should be tested for 2 clock cycles (initially apply inputs at clock cycle 2).",
  "scenario 3": "Set ring = 0 and vibrate_mode = 1. This scenario should be tested for 2 clock cycles (initially apply inputs at clock cycle 4).",
  "scenario 4": "Set ring = 1 and vibrate_mode = 1. This scenario should be tested for 2 clock cycles (initially apply inputs at clock cycle 6).",
  "scenario 5": "Set ring = 1 and vibrate_mode = 0, then at clock cycle 8, change vibrate_mode to 1 while keeping ring = 1. This scenario should be tested for 4 clock cycles (initially apply inputs at clock cycle 8 and monitor until clock cycle 12).",
  "scenario 6": "Set ring = 0 and vibrate_mode = 0, then at clock cycle 10, change ring to 1. This scenario should be tested for 4 clock cycles (initially apply inputs at clock cycle 10 and monitor until clock cycle 14).",
  "scenario 7": "Set ring = 0 and vibrate_mode = 1, then at clock cycle 12, change vibrate_mode to 0. This scenario should be tested for 4 clock cycles (initially apply inputs at clock cycle 12 and monitor until clock cycle 16)."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", "scenario: 1b, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Inputs
    reg ring;
    reg vibrate_mode;

    // Outputs
    wire ringer;
    wire motor;

    // Instantiate the DUT
    top_module DUT (
        .ring(ring),
        .vibrate_mode(vibrate_mode),
        .ringer(ringer),
        .motor(motor)
    );

    // File pointer
    integer fp;

    initial begin
        // Open file for writing
        fp = $fopen("TBout.txt", "w");

        // Scenario 1: Set ring = 1 and vibrate_mode = 0
        ring = 1; vibrate_mode = 0; #10;
        $fdisplay(fp, "scenario: 1, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #10;
        $fdisplay(fp, "scenario: 1a, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);

        // Scenario 2: Set ring = 0 and vibrate_mode = 0
        ring = 0; vibrate_mode = 0; #10;
        $fdisplay(fp, "scenario: 2, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #10;
        $fdisplay(fp, "scenario: 2a, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);

        // Scenario 3: Set ring = 0 and vibrate_mode = 1
        ring = 0; vibrate_mode = 1; #10;
        $fdisplay(fp, "scenario: 3, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #10;
        $fdisplay(fp, "scenario: 3a, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);

        // Scenario 4: Set ring = 1 and vibrate_mode = 1
        ring = 1; vibrate_mode = 1; #10;
        $fdisplay(fp, "scenario: 4, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #10;
        $fdisplay(fp, "scenario: 4a, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);

        // Scenario 5: Set ring = 1 and vibrate_mode = 0, then change vibrate_mode to 1
        ring = 1; vibrate_mode = 0; #10;
        $fdisplay(fp, "scenario: 5, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #10;
        vibrate_mode = 1; #10;
        $fdisplay(fp, "scenario: 5a, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #10;
        $fdisplay(fp, "scenario: 5b, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #10;
        $fdisplay(fp, "scenario: 5c, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);

        // Scenario 6: Set ring = 0 and vibrate_mode = 0, then change ring to 1
        ring = 0; vibrate_mode = 0; #10;
        $fdisplay(fp, "scenario: 6, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #10;
        ring = 1; #10;
        $fdisplay(fp, "scenario: 6a, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #10;
        $fdisplay(fp, "scenario: 6b, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #10;
        $fdisplay(fp, "scenario: 6c, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);

        // Scenario 7: Set ring = 0 and vibrate_mode = 1, then change vibrate_mode to 0
        ring = 0; vibrate_mode = 1; #10;
        $fdisplay(fp, "scenario: 7, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #10;
        vibrate_mode = 0; #10;
        $fdisplay(fp, "scenario: 7a, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #10;
        $fdisplay(fp, "scenario: 7b, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #10;
        $fdisplay(fp, "scenario: 7c, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);

        // Close file
        $fclose(fp);
        
        // Finish simulation
        $finish;
    end

endmodule
```

