############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, min = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, min = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [7:0] a,
	input [7:0] b,
	input [7:0] c,
	input [7:0] d,
	output reg [7:0] min
);

Your other information:
RTL circuit problem description:
Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). 
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "0: The DUT is designed to find the minimum of four unsigned 8-bit input numbers (a, b, c, d).",
    "1: The DUT accepts four inputs: a, b, c, and d, each with a width of 8 bits.",
    "2: The DUT outputs a single value min, which is also an 8-bit unsigned number.",
    "3: The output min should be the smallest value among the inputs a, b, c, and d after comparison.",
    "4: The comparisons between the unsigned numbers will use standard comparison operators, such as '<'.",
    "5: The testbench should instantiate the DUT as top_module and provide valid input vectors to test all possible combinations.",
    "6: The expected output for each test case should be validated against the actual output from the DUT to ensure correctness."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set inputs a = 8'hFF, b = 8'hAA, c = 8'hBB, d = 8'hCC. Hold for 1 clock cycle.",
  "scenario 2": "Set inputs a = 8'h00, b = 8'h01, c = 8'h02, d = 8'h03. Hold for 1 clock cycle.",
  "scenario 3": "Set inputs a = 8'h7F, b = 8'h80, c = 8'h7E, d = 8'h7D. Hold for 1 clock cycle.",
  "scenario 4": "Set inputs a = 8'h10, b = 8'h10, c = 8'h10, d = 8'h10. Hold for 1 clock cycle.",
  "scenario 5": "Set inputs a = 8'h01, b = 8'h01, c = 8'h00, d = 8'h01. Hold for 1 clock cycle.",
  "scenario 6": "Set inputs a = 8'hAB, b = 8'h7D, c = 8'hCA, d = 8'hFE. Hold for 1 clock cycle.",
  "scenario 7": "Set inputs a = 8'hFF, b = 8'hFF, c = 8'h00, d = 8'h00. Hold for 1 clock cycle.",
  "scenario 8": "Set inputs a = 8'h24, b = 8'h30, c = 8'h12, d = 8'h18. Hold for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, min = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, min = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

  reg [7:0] a;
  reg [7:0] b;
  reg [7:0] c;
  reg [7:0] d;
  wire [7:0] min;

  // Instantiate the DUT
  top_module dut (
    .a(a),
    .b(b),
    .c(c),
    .d(d),
    .min(min)
  );

  // File pointer for output
  integer file;

  initial begin
    // Open the file for writing
    file = $fopen("TBout.txt", "w");

    // Scenario 1
    a = 8'hFF; b = 8'hAA; c = 8'hBB; d = 8'hCC;
    #1; // Wait for one time unit
    $fdisplay(file, "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

    // Scenario 2
    a = 8'h00; b = 8'h01; c = 8'h02; d = 8'h03;
    #1; // Wait for one time unit
    $fdisplay(file, "scenario: 2, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

    // Scenario 3
    a = 8'h7F; b = 8'h80; c = 8'h7E; d = 8'h7D;
    #1; // Wait for one time unit
    $fdisplay(file, "scenario: 3, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

    // Scenario 4
    a = 8'h10; b = 8'h10; c = 8'h10; d = 8'h10;
    #1; // Wait for one time unit
    $fdisplay(file, "scenario: 4, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

    // Scenario 5
    a = 8'h01; b = 8'h01; c = 8'h00; d = 8'h01;
    #1; // Wait for one time unit
    $fdisplay(file, "scenario: 5, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

    // Scenario 6
    a = 8'hAB; b = 8'h7D; c = 8'hCA; d = 8'hFE;
    #1; // Wait for one time unit
    $fdisplay(file, "scenario: 6, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

    // Scenario 7
    a = 8'hFF; b = 8'hFF; c = 8'h00; d = 8'h00;
    #1; // Wait for one time unit
    $fdisplay(file, "scenario: 7, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

    // Scenario 8
    a = 8'h24; b = 8'h30; c = 8'h12; d = 8'h18;
    #1; // Wait for one time unit
    $fdisplay(file, "scenario: 8, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

    // Close the file
    $fclose(file);
    $finish;
  end

endmodule
```

