############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out = %d", "scenario: 1b, in = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [31:0] in,
	output [31:0] out
);

Your other information:
RTL circuit problem description:
Build a circuit that reverses the byte order of a 32-bit vector.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT 'top_module' takes a 32-bit input vector 'in' and outputs a 32-bit vector 'out'.",
    "2. The DUT is required to reverse the byte order of the input vector.",
    "3. The input 'in' is a 32-bit value, represented as [31:0].",
    "4. The output 'out' is a 32-bit value, represented as [31:0].",
    "5. The byte order reversal needs to transform the input 'in' such that the output 'out' reflects the reversed byte order.",
    "6. For example, if 'in' = 32'h12345678, then 'out' should be 32'h78563412."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set 'in' to 32'h00000000 and wait for 1 clock cycle.",
  "scenario 2": "Set 'in' to 32'hFFFFFFFF and wait for 1 clock cycle.",
  "scenario 3": "Set 'in' to 32'hAABBCCDD and wait for 1 clock cycle.",
  "scenario 4": "Set 'in' to 32'h12345678 and wait for 1 clock cycle.",
  "scenario 5": "Set 'in' to 32'hDEADBEEF and wait for 1 clock cycle.",
  "scenario 6": "Set 'in' to 32'h0F0E0D0C and wait for 1 clock cycle.",
  "scenario 7": "Set 'in' to 32'h1111222233334444 and wait for 1 clock cycle.",
  "scenario 8": "Set 'in' to 32'h87654321 and wait for 1 clock cycle.",
  "scenario 9": "Set 'in' to 32'hFFFFFFFF and then change 'in' to 32'h00000001 after 1 clock cycle, and wait for another clock cycle.",
  "scenario 10": "Set 'in' to 32'h12345678, wait for 1 clock cycle, then set 'in' to 32'hFFFFFFFF and wait for another clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out = %d", "scenario: 1b, in = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    reg [31:0] in;
    wire [31:0] out;
    
    // Instantiate the DUT
    top_module DUT (
        .in(in),
        .out(out)
    );

    integer outfile;

    initial begin
        // Open the output file
        outfile = $fopen("TBout.txt", "w");
        
        // Scenario 1
        in = 32'h00000000; 
        #1;
        $fdisplay(outfile, "scenario: 1, in = %h, out = %h", in, out);
        
        // Scenario 2
        in = 32'hFFFFFFFF; 
        #1;
        $fdisplay(outfile, "scenario: 2, in = %h, out = %h", in, out);
        
        // Scenario 3
        in = 32'hAABBCCDD; 
        #1;
        $fdisplay(outfile, "scenario: 3, in = %h, out = %h", in, out);
        
        // Scenario 4
        in = 32'h12345678; 
        #1;
        $fdisplay(outfile, "scenario: 4, in = %h, out = %h", in, out);
        
        // Scenario 5
        in = 32'hDEADBEEF; 
        #1;
        $fdisplay(outfile, "scenario: 5, in = %h, out = %h", in, out);
        
        // Scenario 6
        in = 32'h0F0E0D0C; 
        #1;
        $fdisplay(outfile, "scenario: 6, in = %h, out = %h", in, out);
        
        // Scenario 7
        in = 32'h11112222; 
        #1;
        $fdisplay(outfile, "scenario: 7, in = %h, out = %h", in, out);
        
        // Scenario 8
        in = 32'h87654321; 
        #1;
        $fdisplay(outfile, "scenario: 8, in = %h, out = %h", in, out);
        
        // Scenario 9
        in = 32'hFFFFFFFF; 
        #1;
        $fdisplay(outfile, "scenario: 9a, in = %h, out = %h", in, out);
        in = 32'h00000001; 
        #1;
        $fdisplay(outfile, "scenario: 9b, in = %h, out = %h", in, out);
        
        // Scenario 10
        in = 32'h12345678; 
        #1;
        $fdisplay(outfile, "scenario: 10a, in = %h, out = %h", in, out);
        in = 32'hFFFFFFFF; 
        #1;
        $fdisplay(outfile, "scenario: 10b, in = %h, out = %h", in, out);
        
        // Close the output file
        $fclose(outfile);
        
        // Finish the simulation
        $finish;
    end

endmodule
```

