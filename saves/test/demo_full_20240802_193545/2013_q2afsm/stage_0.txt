############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
Consider the FSM described by the state diagram shown below:

// A --r1=0,r2=0,r3=0--> A
// A --r1=1--> B
// A --r1=0,r2=1--> C
// A --r1=0,r2=0,r3=0--> D
// B (g1=1) --r1=1--> B
// B (g1=1) --r1=0--> A
// C (g2=1) --r2=1--> C
// C (g2=1) --r2=0--> A

// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.

// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.
RTL header:
module top_module (
	input clk,
	input resetn,
	input [3:1] r,
	output [3:1] g
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
```verilog
module top_module (
    input clk,
    input resetn,
    input [3:1] r,
    output reg [3:1] g
);

// State encoding
localparam A = 2'b00, 
           B = 2'b01, 
           C = 2'b10, 
           D = 2'b11;

// Current state and next state variables
reg [1:0] current_state, next_state;

// State flip-flops
always @(posedge clk or negedge resetn) begin
    if (!resetn)
        current_state <= A; // Reset to state A
    else
        current_state <= next_state; // Update to next state
end

// State transition logic
always @(*) begin
    case (current_state)
        A: begin
            if (r[1]) 
                next_state = B; // Grant to device 1
            else if (r[2]) 
                next_state = C; // Grant to device 2
            else if (r[3]) 
                next_state = D; // Grant to device 3
            else 
                next_state = A; // Stay in state A
        end
        
        B: begin
            if (r[1]) 
                next_state = B; // Stay in B if r1 is active
            else 
                next_state = A; // Go back to A if r1 is not active
        end
        
        C: begin
            if (r[2]) 
                next_state = C; // Stay in C if r2 is active
            else 
                next_state = A; // Go back to A if r2 is not active
        end
        
        D: begin
            // Device 3 only gets a grant if no one else is requesting
            next_state = A; // Only transitions to A
        end
        
        default: next_state = A; // Default to A in case of an unexpected state
    endcase
end

// Output logic
always @(*) begin
    g = 3'b000; // Default output
    case (current_state)
        B: g[1] = 1'b1; // Grant to device 1
        C: g[2] = 1'b1; // Grant to device 2
        D: g[3] = 1'b1; // Grant to device 3
        default: g = 3'b000; // No grants
    endcase
end

endmodule
```

