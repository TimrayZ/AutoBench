############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, y = %d, w = %d, Y2 = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, y = %d, w = %d, Y2 = %d", "scenario: 1b, y = %d, w = %d, Y2 = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	input [3:1] y,
	input w,
	output reg Y2);

Your other information:
RTL circuit problem description:
Consider the state machine shown below:

// A (0) --0--> B
// A (0) --1--> A
// B (0) --0--> C
// B (0) --1--> D
// C (0) --0--> E
// C (0) --1--> D
// D (0) --0--> F
// D (0) --1--> A
// E (1) --0--> E
// E (1) --1--> D
// F (1) --0--> C
// F (1) --1--> D

// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].
RTL testbench specification:
{
  "important data": "// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// State code mapping:\n// A = 000 (0)\n// B = 001 (1)\n// C = 010 (2)\n// D = 011 (3)\n// E = 100 (4)\n// F = 101 (5)",
  "technical specifications": [
    "0: DUT module header: module top_module(input [3:1] y, input w, output reg Y2);",
    "1: State transitions based on input w and current state y:",
    "2: For state y = 000 (A): Y2 = 0 if w = 0; Y2 = 0 if w = 1;",
    "3: For state y = 001 (B): Y2 = 0 if w = 0; Y2 = 1 if w = 1;",
    "4: For state y = 010 (C): Y2 = 1 if w = 0; Y2 = 1 if w = 1;",
    "5: For state y = 011 (D): Y2 = 1 if w = 0; Y2 = 0 if w = 1;",
    "6: For state y = 100 (E): Y2 = 1 if w = 0; Y2 = 1 if w = 1;",
    "7: For state y = 101 (F): Y2 = 0 if w = 0; Y2 = 1 if w = 1;",
    "8: Expected output for each transition must be verified in the testbench."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Initialize state to A (000), set w to 0. Apply for 1 clock cycle.",
  "scenario 2": "Maintain state A (000), set w to 1. Apply for 1 clock cycle.",
  "scenario 3": "Transition to state B (001) by setting y to 001, then set w to 0. Apply for 1 clock cycle.",
  "scenario 4": "Maintain state B (001), set w to 1. Apply for 1 clock cycle.",
  "scenario 5": "Transition to state C (010) by setting y to 010, then set w to 0. Apply for 1 clock cycle.",
  "scenario 6": "Maintain state C (010), set w to 1. Apply for 1 clock cycle.",
  "scenario 7": "Transition to state D (011) by setting y to 011, then set w to 0. Apply for 1 clock cycle.",
  "scenario 8": "Maintain state D (011), set w to 1. Apply for 1 clock cycle.",
  "scenario 9": "Transition to state E (100) by setting y to 100, then set w to 0. Apply for 1 clock cycle.",
  "scenario 10": "Maintain state E (100), set w to 1. Apply for 1 clock cycle.",
  "scenario 11": "Transition to state F (101) by setting y to 101, then set w to 0. Apply for 1 clock cycle.",
  "scenario 12": "Maintain state F (101), set w to 1. Apply for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, y = %d, w = %d, Y2 = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, y = %d, w = %d, Y2 = %d", "scenario: 1b, y = %d, w = %d, Y2 = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns/1ps

module testbench;

  reg [3:1] y;
  reg w;
  wire Y2;

  // Instantiate the DUT
  top_module DUT (
    .y(y),
    .w(w),
    .Y2(Y2)
  );

  integer fd;

  initial begin
    // Open the output file
    fd = $fopen("TBout.txt", "w");

    // Scenario 1: Initialize state to A (000), set w to 0. Apply for 1 clock cycle.
    y = 3'b000; w = 1'b0;
    #10;  // Wait for signals to stabilize
    $fdisplay(fd, "scenario: 1, y = %b, w = %b, Y2 = %b", y, w, Y2);

    // Scenario 2: Maintain state A (000), set w to 1. Apply for 1 clock cycle.
    w = 1'b1;
    #10;
    $fdisplay(fd, "scenario: 2, y = %b, w = %b, Y2 = %b", y, w, Y2);

    // Scenario 3: Transition to state B (001) by setting y to 001, then set w to 0. Apply for 1 clock cycle.
    y = 3'b001; w = 1'b0;
    #10;
    $fdisplay(fd, "scenario: 3, y = %b, w = %b, Y2 = %b", y, w, Y2);

    // Scenario 4: Maintain state B (001), set w to 1. Apply for 1 clock cycle.
    w = 1'b1;
    #10;
    $fdisplay(fd, "scenario: 4, y = %b, w = %b, Y2 = %b", y, w, Y2);

    // Scenario 5: Transition to state C (010) by setting y to 010, then set w to 0. Apply for 1 clock cycle.
    y = 3'b010; w = 1'b0;
    #10;
    $fdisplay(fd, "scenario: 5, y = %b, w = %b, Y2 = %b", y, w, Y2);

    // Scenario 6: Maintain state C (010), set w to 1. Apply for 1 clock cycle.
    w = 1'b1;
    #10;
    $fdisplay(fd, "scenario: 6, y = %b, w = %b, Y2 = %b", y, w, Y2);

    // Scenario 7: Transition to state D (011) by setting y to 011, then set w to 0. Apply for 1 clock cycle.
    y = 3'b011; w = 1'b0;
    #10;
    $fdisplay(fd, "scenario: 7, y = %b, w = %b, Y2 = %b", y, w, Y2);

    // Scenario 8: Maintain state D (011), set w to 1. Apply for 1 clock cycle.
    w = 1'b1;
    #10;
    $fdisplay(fd, "scenario: 8, y = %b, w = %b, Y2 = %b", y, w, Y2);

    // Scenario 9: Transition to state E (100) by setting y to 100, then set w to 0. Apply for 1 clock cycle.
    y = 3'b100; w = 1'b0;
    #10;
    $fdisplay(fd, "scenario: 9, y = %b, w = %b, Y2 = %b", y, w, Y2);

    // Scenario 10: Maintain state E (100), set w to 1. Apply for 1 clock cycle.
    w = 1'b1;
    #10;
    $fdisplay(fd, "scenario: 10, y = %b, w = %b, Y2 = %b", y, w, Y2);

    // Scenario 11: Transition to state F (101) by setting y to 101, then set w to 0. Apply for 1 clock cycle.
    y = 3'b101; w = 1'b0;
    #10;
    $fdisplay(fd, "scenario: 11, y = %b, w = %b, Y2 = %b", y, w, Y2);

    // Scenario 12: Maintain state F (101), set w to 1. Apply for 1 clock cycle.
    w = 1'b1;
    #10;
    $fdisplay(fd, "scenario: 12, y = %b, w = %b, Y2 = %b", y, w, Y2);

    // Close the output file
    $fclose(fd);
  end

endmodule
```

