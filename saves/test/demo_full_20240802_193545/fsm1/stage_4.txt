############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module (
	input clk,
	input in,
	input areset,
	output out
);

Your other information:
RTL circuit problem description:
Consider the follow Moore machine with the diagram described below:

// B (1) --0--> A
// B (1) --1--> B
// A (0) --0--> B
// A (0) --1--> A

// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Reset the DUT by asserting 'areset' high for 1 clock cycle, then deassert 'areset' and observe the initial output.",
  "scenario 2": "Start from state B, apply input '0' on the rising edge of clk (at cycle 2) and observe the output for 1 clock cycle.",
  "scenario 3": "From state B, apply input '1' on the rising edge of clk (at cycle 3) and observe the output for 1 clock cycle.",
  "scenario 4": "Start from state A, apply input '0' on the rising edge of clk (at cycle 4) and observe the output for 1 clock cycle.",
  "scenario 5": "From state A, apply input '1' on the rising edge of clk (at cycle 5) and observe the output for 1 clock cycle.",
  "scenario 6": "Reset the DUT again by asserting 'areset' high for 1 clock cycle and confirm the output state is correct after deasserting 'areset'.",
  "scenario 7": "Begin from state B, apply input '0' on the rising edge of clk (at cycle 6), then after 1 clock cycle apply '1' at the next rising edge (cycle 7) and observe states for 2 clock cycles.",
  "scenario 8": "Start from state A, apply input '0' on the rising edge of clk (at cycle 8), then apply '0' again in the next clock cycle (cycle 9) to observe the transition to state B."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  in;
reg  areset;
wire  out;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.in(in),
	.areset(areset),
	.out(out)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, areset = %d, out = %d", scenario, clk, in, areset, out);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, areset = %d, out = %d", scenario, clk, in, areset, out);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  in;
reg  areset;
wire  out;

integer file, scenario;
// DUT instantiation
top_module DUT (
    .clk(clk),
    .in(in),
    .areset(areset),
    .out(out)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // Scenario 1: Reset the DUT
    scenario = 1;
    areset = 1;
    #10; 
    areset = 0;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, areset = %d, out = %d", scenario, clk, in, areset, out);
    
    // Scenario 2: Apply input 0 from state B
    scenario = 2;
    in = 0;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, areset = %d, out = %d", scenario, clk, in, areset, out);
    
    // Scenario 3: Apply input 1 from state B
    scenario = 3;
    in = 1;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, areset = %d, out = %d", scenario, clk, in, areset, out);
    
    // Scenario 4: Apply input 0 from state A
    scenario = 4;
    in = 0;
    #10; // Assume state A after previous input and clk
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, areset = %d, out = %d", scenario, clk, in, areset, out);
    
    // Scenario 5: Apply input 1 from state A
    scenario = 5;
    in = 1;
    #10; 
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, areset = %d, out = %d", scenario, clk, in, areset, out);
    
    // Scenario 6: Reset the DUT again
    scenario = 6;
    areset = 1;
    #10; 
    areset = 0;
    #10; 
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, areset = %d, out = %d", scenario, clk, in, areset, out);
    
    // Scenario 7: Apply input 0 then input 1 from state B
    scenario = 7;
    in = 0;
    #10;
    in = 1;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, areset = %d, out = %d", scenario, clk, in, areset, out); 
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, areset = %d, out = %d", scenario, clk, in, areset, out);
    
    // Scenario 8: Apply input 0 twice from state A
    scenario = 8;
    in = 0;
    #10; 
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, areset = %d, out = %d", scenario, clk, in, areset, out);
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, areset = %d, out = %d", scenario, clk, in, areset, out);
    
    $fclose(file);
    $finish;
end

endmodule
```

