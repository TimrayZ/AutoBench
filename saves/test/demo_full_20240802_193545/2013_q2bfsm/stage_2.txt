############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Consider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).
RTL testbench specification:
{
  "important data": "The FSM has to remain in state A while resetn is asserted. After resetn is de-asserted, f is set to 1 for one clock cycle, and g is set to 1 if x has values 1, 0, 1 in three successive cycles, and if y is 1 within two clock cycles thereafter, g remains 1. Otherwise, g is set to 0 permanently until the next reset.",
  "technical specifications": [
    "1. DUT has input signals: clk (clock), resetn (active low reset), x (input for motor control), y (input for motor control).",
    "2. DUT has output signals: f (control output), g (control output).",
    "3. The testbench must initialize the DUT with resetn asserted and monitor the outputs during the simulation.",
    "4. Testbench should generate the sequence of x inputs [1, 0, 1] within three successive clock cycles to verify g is set to 1 afterward.",
    "5. Testbench should simulate y input being 1 within two clock cycles to verify that g stays 1.",
    "6. Testbench should also simulate y input being 0 to verify that g is set to 0.",
    "7. The testbench will report pass/fail based on whether the output signals f and g match expected results for various input combinations."
  ]
}
DUT header:
module top_module (
	input clk,
	input resetn,
	input x,
	input y,
	output f,
	output g
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Initialize the DUT with resetn asserted (resetn = 0). Hold resetn for 5 clock cycles (clk = 0 to 4).",
  "scenario 2": "De-assert resetn (resetn = 1) at clock cycle 5. Check that output f is set to 1 at clock cycle 6.",
  "scenario 3": "Provide x inputs in the following sequence: x = 1 at clock cycle 6, x = 0 at clock cycle 7, x = 1 at clock cycle 8 to verify that output g is set to 1 at clock cycle 9.",
  "scenario 4": "Provide y input as 1 at clock cycle 9 and hold it for the next clock cycles to verify that g remains 1.",
  "scenario 5": "De-assert y (y = 0) at clock cycle 9 after y was set to 1 and check if g is still maintained as 1. Maintain y = 0 for 5 more clock cycles.",
  "scenario 6": "Assert resetn again (resetn = 0) at clock cycle 14 and hold it for 5 clock cycles. Then, release resetn (resetn = 1) at clock cycle 19.",
  "scenario 7": "Check for g being 0 when x inputs are provided as follows: x = 1 at clock cycle 19, x = 0 at clock cycle 20, x = 1 at clock cycle 21, followed by y = 0 at clock cycle 22 and keep y = 0 for 5 more clock cycles (to ensure y does not trigger g to stay 1)."
}

