############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. You are in the first stage. In this stage, please summarize the technical details of the DUT and give me a technical specification of the testbench generation task, so we can use it to design its corresponding testbench.
3. The core of testbench is the testcases. It usually include two parts logically: the input signals to the DUT and the expected result signals from DUT. The testbench will send the input signals to DUT and check if the result signals are the same as the expected result signals. If they are the same, this means the DUT is passed. Otherwise the DUT fails.
4. Your technical specification should include these sections:
- section 1: specification of the DUT, including the module header of the RTL code. If table or other detailed data is provided in the original problem description, DO repeat them in your response. They are very important!!!
5. your response should be in the form of JSON.
6. below is the information including the problem description and the DUT header:
RTL circuit problem description:
Consider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).
DUT header:
module top_module (
	input clk,
	input resetn,
	input x,
	input y,
	output f,
	output g
);

your response must be in JSON form. example:
{
  "important data": "...", # type: string. If no table, state transition or other direct data, leave this with ""
  "technical specifications": ["...", "...", ...] # each element of the list is one specification string, the starting of the string is its index 
}



########## assistant ##########
{
  "important data": "The FSM has to remain in state A while resetn is asserted. After resetn is de-asserted, f is set to 1 for one clock cycle, and g is set to 1 if x has values 1, 0, 1 in three successive cycles, and if y is 1 within two clock cycles thereafter, g remains 1. Otherwise, g is set to 0 permanently until the next reset.",
  "technical specifications": [
    "1. DUT has input signals: clk (clock), resetn (active low reset), x (input for motor control), y (input for motor control).",
    "2. DUT has output signals: f (control output), g (control output).",
    "3. The testbench must initialize the DUT with resetn asserted and monitor the outputs during the simulation.",
    "4. Testbench should generate the sequence of x inputs [1, 0, 1] within three successive clock cycles to verify g is set to 1 afterward.",
    "5. Testbench should simulate y input being 1 within two clock cycles to verify that g stays 1.",
    "6. Testbench should also simulate y input being 0 to verify that g is set to 0.",
    "7. The testbench will report pass/fail based on whether the output signals f and g match expected results for various input combinations."
  ]
}

