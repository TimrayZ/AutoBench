############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out = %d", "scenario: 1b, in = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [7:0] in,
	output [31:0] out
);

Your other information:
RTL circuit problem description:
One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.
RTL testbench specification:
{
  "important data": "The DUT takes an 8-bit signed input and produces a 32-bit signed output through sign extension by replicating the sign bit.",
  "technical specifications": [
    "0: The DUT module name is 'top_module'.",
    "1: The DUT has one input signal 'in' that is 8 bits wide.",
    "2: The DUT has one output signal 'out' that is 32 bits wide.",
    "3: The DUT must yield a result where the most significant bit (bit[7]) of the input 'in' is replicated 24 times to the left of the 8-bit number in order to form the 32-bit output 'out'.",
    "4: For input 8'b0101, the expected output is 32'b00000000000000000000000000000101.",
    "5: For input 8'b1101, the expected output is 32'b11111111111111111111111111111101."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply an input of 8'b01010101 (binary representation for 85) at time 0 and observe the output after 1 clock cycle.",
  "scenario 2": "Apply an input of 8'b11010011 (binary representation for -13) at time 0 and observe the output after 1 clock cycle.",
  "scenario 3": "Apply an input of 8'b00000000 (binary representation for 0) at time 0 and observe the output after 1 clock cycle.",
  "scenario 4": "Apply an input of 8'b11111111 (binary representation for -1) at time 0 and observe the output after 1 clock cycle.",
  "scenario 5": "Apply an input of 8'b01111111 (binary representation for 127) at time 0 and observe the output after 1 clock cycle.",
  "scenario 6": "Apply an input of 8'b10000000 (binary representation for -128) at time 0 and observe the output after 1 clock cycle.",
  "scenario 7": "Apply an input of 8'b10101010 (binary representation for -86) at time 0 and observe the output after 1 clock cycle.",
  "scenario 8": "Apply an input of 8'b00001111 (binary representation for 15) at time 0 and observe the output after 1 clock cycle.",
  "scenario 9": "Apply an input of 8'b01101001 (binary representation for 105) at time 0 and observe the output after 1 clock cycle.",
  "scenario 10": "Apply an input of 8'b11111100 (binary representation for -4) at time 0 and observe the output after 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out = %d", "scenario: 1b, in = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Input and output declarations
    reg [7:0] in;
    wire [31:0] out;

    // Instantiate the DUT (Device Under Test)
    top_module DUT (
        .in(in),
        .out(out)
    );

    // File pointer for output
    integer fd;

    initial begin
        // Open the output file
        fd = $fopen("TBout.txt", "w");
        
        // Scenario 1
        in = 8'b01010101; // 85
        #10; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 1, in = %d, out = %d", in, out);
        
        // Scenario 2
        in = 8'b11010011; // -13
        #10; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 2, in = %d, out = %d", in, out);
        
        // Scenario 3
        in = 8'b00000000; // 0
        #10; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 3, in = %d, out = %d", in, out);
        
        // Scenario 4
        in = 8'b11111111; // -1
        #10; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 4, in = %d, out = %d", in, out);
        
        // Scenario 5
        in = 8'b01111111; // 127
        #10; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 5, in = %d, out = %d", in, out);
        
        // Scenario 6
        in = 8'b10000000; // -128
        #10; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 6, in = %d, out = %d", in, out);
        
        // Scenario 7
        in = 8'b10101010; // -86
        #10; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 7, in = %d, out = %d", in, out);
        
        // Scenario 8
        in = 8'b00001111; // 15
        #10; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 8, in = %d, out = %d", in, out);
        
        // Scenario 9
        in = 8'b01101001; // 105
        #10; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 9, in = %d, out = %d", in, out);
        
        // Scenario 10
        in = 8'b11111100; // -4
        #10; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 10, in = %d, out = %d", in, out);
        
        // Close the file
        $fclose(fd);
        
        // Finish simulation
        $finish;
    end

endmodule
```

