############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input reset,
	input ena,
	output reg pm,
	output reg [7:0] hh,
	output reg [7:0] mm,
	output reg [7:0] ss);

Your other information:
RTL circuit problem description:
Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while "clk" is much faster than once per second). The signal "pm" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to "12:00 AM." Reset has higher priority than enable and can occur even when not enabled.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Initialize 'reset' high for 1 clock cycle, then release 'reset'. After releasing reset, keep 'ena' low for the next 5 clock cycles to observe that time remains at '12:00 AM'.",
  "scenario 2": "Set 'ena' high for 60 clock cycles while keeping 'reset' low. Observe the output 'hh', 'mm', and 'ss' after every 10 clock cycles to verify time increments after each second.",
  "scenario 3": "After observing the outputs for scenario 2, drive 'ena' high for an additional 120 clock cycles and confirm the transition from '12:59:59 AM' to '1:00:00 PM', checking if 'pm' asserts at '1:00 PM'.",
  "scenario 4": "While 'ena' is high, increment the count to '2:00:00 PM'. Then set 'reset' high for 1 clock cycle, observe that outputs reset to '12:00 AM' after releasing reset.",
  "scenario 5": "Confirm behavior when 'ena' is asserted after the reset. Set 'ena' high and maintain it for 180 clock cycles while also turning 'reset' off to observe the correct time incrementing back to '12:00 AM' and into PM hours.",
  "scenario 6": "Keep 'ena' high and toggle 'reset' high for 1 clock cycle every 30 seconds to confirm that the clock resets properly without affecting the ongoing time keeping between resets.",
  "scenario 7": "After a set of increments that reaches '12:59:59 PM', toggle 'ena' low for 1 clock cycle, then set it back high to observe a transition from '12:59:59 PM' to '1:00:00 AM' to ensure proper handling of AM/PM transitions."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
reg  ena;
wire  pm;
wire [7:0] hh;
wire [7:0] mm;
wire [7:0] ss;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.ena(ena),
	.pm(pm),
	.hh(hh),
	.mm(mm),
	.ss(ss)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, ena = %d, pm = %d, hh = %d, mm = %d, ss = %d", scenario, clk, reset, ena, pm, hh, mm, ss);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, ena = %d, pm = %d, hh = %d, mm = %d, ss = %d", scenario, clk, reset, ena, pm, hh, mm, ss);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
reg  ena;
wire  pm;
wire [7:0] hh;
wire [7:0] mm;
wire [7:0] ss;

integer file, scenario;

// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.ena(ena),
	.pm(pm),
	.hh(hh),
	.mm(mm),
	.ss(ss)
);

// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end

// Scenario Based Test
initial begin
    // Scenario 1
    scenario = 1;
    reset = 1;
    #10;
    reset = 0;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, ena = %d, pm = %d, hh = %d, mm = %d, ss = %d", scenario, clk, reset, ena, pm, hh, mm, ss);
        #10;
    end
    
    // Scenario 2
    scenario = 2;
    ena = 1;
    repeat(60) begin
        #10;
        if ((i % 10) == 0) begin
            $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, ena = %d, pm = %d, hh = %d, mm = %d, ss = %d", scenario, clk, reset, ena, pm, hh, mm, ss);
        end
    end
    ena = 0;

    // Scenario 3
    scenario = 3;
    ena = 1;
    repeat(120) begin
        #10;
        if ((i % 10) == 0) begin
            $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, ena = %d, pm = %d, hh = %d, mm = %d, ss = %d", scenario, clk, reset, ena, pm, hh, mm, ss);
        end
    end

    // Scenario 4
    scenario = 4;
    ena = 1;
    repeat(240) begin
        #10; // Increment to 2:00:00 PM
    end
    reset = 1;
    #10;
    reset = 0;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, ena = %d, pm = %d, hh = %d, mm = %d, ss = %d", scenario, clk, reset, ena, pm, hh, mm, ss);
    
    // Scenario 5
    scenario = 5;
    ena = 1;
    reset = 0;
    repeat(180) begin
        #10;
    end
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, ena = %d, pm = %d, hh = %d, mm = %d, ss = %d", scenario, clk, reset, ena, pm, hh, mm, ss);

    // Scenario 6
    scenario = 6;
    ena = 1;
    repeat(1800) begin // 30 seconds
        #10;
        if (i % 300 == 0) begin // Reset every 30 seconds
            reset = 1;
            #10;
            reset = 0;
            $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, ena = %d, pm = %d, hh = %d, mm = %d, ss = %d", scenario, clk, reset, ena, pm, hh, mm, ss);
        end
    end

    // Scenario 7
    scenario = 7;
    ena = 1;
    repeat(30) begin // Increment to 12:59:59 PM
        #10;
    end
    ena = 0;
    #10;
    ena = 1;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, ena = %d, pm = %d, hh = %d, mm = %d, ss = %d", scenario, clk, reset, ena, pm, hh, mm, ss);

    $fclose(file);
    $finish;
end

endmodule
```

