############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. You are in the first stage. In this stage, please summarize the technical details of the DUT and give me a technical specification of the testbench generation task, so we can use it to design its corresponding testbench.
3. The core of testbench is the testcases. It usually include two parts logically: the input signals to the DUT and the expected result signals from DUT. The testbench will send the input signals to DUT and check if the result signals are the same as the expected result signals. If they are the same, this means the DUT is passed. Otherwise the DUT fails.
4. Your technical specification should include these sections:
- section 1: specification of the DUT, including the module header of the RTL code. If table or other detailed data is provided in the original problem description, DO repeat them in your response. They are very important!!!
5. your response should be in the form of JSON.
6. below is the information including the problem description and the DUT header:
RTL circuit problem description:
Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while "clk" is much faster than once per second). The signal "pm" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to "12:00 AM." Reset has higher priority than enable and can occur even when not enabled.
DUT header:
module top_module(
	input clk,
	input reset,
	input ena,
	output reg pm,
	output reg [7:0] hh,
	output reg [7:0] mm,
	output reg [7:0] ss);

your response must be in JSON form. example:
{
  "important data": "...", # type: string. If no table, state transition or other direct data, leave this with ""
  "technical specifications": ["...", "...", ...] # each element of the list is one specification string, the starting of the string is its index 
}



########## assistant ##########
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a 12-hour clock counter module designed to increment every second based on a fast running clock input 'clk'.",
    "2. The DUT takes three inputs: 'clk' (the clock signal), 'reset' (active high synchronous reset), and 'ena' (an enable signal that allows counting).",
    "3. The DUT has four output signals: 'pm' (indicates whether the time is PM), 'hh' (hours in BCD format, ranging from 01 to 12), 'mm' (minutes in BCD format, ranging from 00 to 59), and 'ss' (seconds in BCD format, ranging from 00 to 59).",
    "4. The reset signal has higher priority than the enable signal, meaning that even if the clock is not enabled, a reset can set the clock back to '12:00 AM'.",
    "5. The output 'pm' is asserted when the time is in the PM hours (after 12:00 PM), otherwise it is deasserted during AM (before 12:00 PM).",
    "6. The counting increments should appear once every second, which corresponds to a pulse on 'ena'.",
    "7. 'hh', 'mm', and 'ss' must be in BCD format, suitable for a 4-bit representation for values 0-9 in each digit."
  ]
}

