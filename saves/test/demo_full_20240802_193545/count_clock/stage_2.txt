############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while "clk" is much faster than once per second). The signal "pm" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to "12:00 AM." Reset has higher priority than enable and can occur even when not enabled.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a 12-hour clock counter module designed to increment every second based on a fast running clock input 'clk'.",
    "2. The DUT takes three inputs: 'clk' (the clock signal), 'reset' (active high synchronous reset), and 'ena' (an enable signal that allows counting).",
    "3. The DUT has four output signals: 'pm' (indicates whether the time is PM), 'hh' (hours in BCD format, ranging from 01 to 12), 'mm' (minutes in BCD format, ranging from 00 to 59), and 'ss' (seconds in BCD format, ranging from 00 to 59).",
    "4. The reset signal has higher priority than the enable signal, meaning that even if the clock is not enabled, a reset can set the clock back to '12:00 AM'.",
    "5. The output 'pm' is asserted when the time is in the PM hours (after 12:00 PM), otherwise it is deasserted during AM (before 12:00 PM).",
    "6. The counting increments should appear once every second, which corresponds to a pulse on 'ena'.",
    "7. 'hh', 'mm', and 'ss' must be in BCD format, suitable for a 4-bit representation for values 0-9 in each digit."
  ]
}
DUT header:
module top_module(
	input clk,
	input reset,
	input ena,
	output reg pm,
	output reg [7:0] hh,
	output reg [7:0] mm,
	output reg [7:0] ss);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Initialize 'reset' high for 1 clock cycle, then release 'reset'. After releasing reset, keep 'ena' low for the next 5 clock cycles to observe that time remains at '12:00 AM'.",
  "scenario 2": "Set 'ena' high for 60 clock cycles while keeping 'reset' low. Observe the output 'hh', 'mm', and 'ss' after every 10 clock cycles to verify time increments after each second.",
  "scenario 3": "After observing the outputs for scenario 2, drive 'ena' high for an additional 120 clock cycles and confirm the transition from '12:59:59 AM' to '1:00:00 PM', checking if 'pm' asserts at '1:00 PM'.",
  "scenario 4": "While 'ena' is high, increment the count to '2:00:00 PM'. Then set 'reset' high for 1 clock cycle, observe that outputs reset to '12:00 AM' after releasing reset.",
  "scenario 5": "Confirm behavior when 'ena' is asserted after the reset. Set 'ena' high and maintain it for 180 clock cycles while also turning 'reset' off to observe the correct time incrementing back to '12:00 AM' and into PM hours.",
  "scenario 6": "Keep 'ena' high and toggle 'reset' high for 1 clock cycle every 30 seconds to confirm that the clock resets properly without affecting the ongoing time keeping between resets.",
  "scenario 7": "After a set of increments that reaches '12:59:59 PM', toggle 'ena' low for 1 clock cycle, then set it back high to observe a transition from '12:59:59 PM' to '1:00:00 AM' to ensure proper handling of AM/PM transitions."
}

