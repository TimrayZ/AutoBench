############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.
RTL testbench specification:
{
  "important data": "The DUT is designed to communicate in an older serial protocol, involving a start bit, 8 data bits, and a stop bit. It uses a finite state machine (FSM) to correctly identify and process these bits. The module operates with a clock and includes a synchronous reset input.",
  "technical specifications": [
    "1. DUT module header: module top_module (input clk, input in, input reset, output [7:0] out_byte, output done);",
    "2. Input signals: clk (clock signal), in (serial data input), reset (active-high synchronous reset).",
    "3. Output signals: out_byte (8-bit output data byte), done (active-high output indicating valid data received).",
    "4. State machine operation: Identify start bit (0), receive 8 data bits, verify stop bit (1), and assert done when a complete byte is received.",
    "5. The protocol sends least significant bit first.",
    "6. The FSM must wait for a stop bit before attempting to receive the next byte if it fails the stop bit check.",
    "7. The output out_byte is valid when done is 1 and is considered don't-care otherwise."
  ]
}
DUT header:
module top_module (
	input clk,
	input in,
	input reset,
	output [7:0] out_byte,
	output done
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Reset the DUT by asserting the reset signal high for 2 clock cycles. After 2 clock cycles, de-assert the reset signal to enable normal operation.",
  "scenario 2": "Send a complete byte starting with a start bit (0). Transmit the data bits in the order: 1, 0, 1, 1, 0, 1, 0, 1 (least significant bit first) followed by a stop bit (1). This bit stream should take a total of 10 clock cycles to transmit.",
  "scenario 3": "Send an incomplete byte starting with a start bit (0) followed by 5 data bits (1, 0, 1, 1, 0). Do not send a stop bit to test the FSM's behavior when the stop bit is missing. This should also take 6 clock cycles.",
  "scenario 4": "Send a byte that starts incorrectly with a logic high (1) instead of a start bit (0). Follow this by a complete transmission of 8 data bits (1, 0, 1, 0, 0, 1, 0, 1) and then a stop bit (1). This scenario checks for incorrect start bit detection and should total 10 clock cycles.",
  "scenario 5": "Send a valid start bit (0), and then transmit 7 data bits (0, 1, 0, 1, 1, 0, 1), but omit the stop bit to see how the FSM reacts to incomplete byte reception. Ensure this takes 8 clock cycles.",
  "scenario 6": "After successfully receiving a byte, immediately send another start bit (0) followed by 8 data bits (0, 0, 0, 1, 1, 1, 0, 0) and then a stop bit (1). Check proper state transition after receiving valid bytes, which should take a total of 10 clock cycles.",
  "scenario 7": "Test the behavior of the DUT during idle conditions by keeping the input signal high (1) for an extended period (20 clock cycles) while toggling the reset to test robustness under long idle conditions.",
  "scenario 8": "Send a series of bits that should be ignored by the DUT: Start with a stop bit (1) immediately followed by a mix of random bits (1, 0, 1, 0, 0, 1, 1, 0) without a valid start bit to evaluate how the FSM handles noise in the input stream. This transmission should occur over 10 clock cycles."
}

