############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.
RTL header:
module top_module (
	input clk,
	input in,
	input reset,
	output [7:0] out_byte,
	output done
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
    input clk,
    input in,
    input reset,
    output reg [7:0] out_byte,
    output reg done
);

    // State encoding
    typedef enum logic [2:0] {
        IDLE       = 3'b000,
        START_BIT  = 3'b001,
        DATA_BITS  = 3'b010,
        STOP_BIT   = 3'b011
    } state_t;

    state_t current_state, next_state;
    reg [3:0] bit_count;  // To count the data bits received

    // FSM State Transition
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
            bit_count <= 0;
            out_byte <= 8'b0;
            done <= 1'b0;
        end else begin
            current_state <= next_state;
        end
    end

    // Next State Logic
    always_comb begin
        next_state = current_state;
        done = 1'b0; // Default done to low
        
        case (current_state)
            IDLE: begin
                if (in == 1'b0) begin // Start bit detected
                    next_state = START_BIT;
                end
            end
            
            START_BIT: begin
                if (in == 1'b1) begin // Wait for the rising edge after start bit
                    next_state = IDLE; // invalid start bit
                end else begin
                    next_state = DATA_BITS; // Move to receiving data bits
                end
            end
            
            DATA_BITS: begin
                if (bit_count < 8) begin
                    out_byte[bit_count] = in; // Capture data bit into the output byte
                    bit_count = bit_count + 1; // Increment bit count
                end else begin
                    next_state = STOP_BIT; // Move to check stop bit
                end
            end
            
            STOP_BIT: begin
                if (in == 1'b1) begin // Check stop bit
                    done = 1'b1; // Indicate data is received
                    next_state = IDLE; // Go back to idle state
                end else begin
                    next_state = IDLE; // Invalid stop bit found, return to IDLE
                end
            end
        endcase
    end
    
    // Ensure bit_count resets on state transitions
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            bit_count <= 0;
        end else if (current_state == IDLE) begin
            bit_count <= 0; // Reset bit count on return to idle
        end else if (current_state == DATA_BITS && bit_count < 8) begin
            // Keep counting bits
        end
    end
    
endmodule
```

