############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module (
	input clk,
	input in,
	input reset,
	output [7:0] out_byte,
	output done
);

Your other information:
RTL circuit problem description:
In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Reset the DUT by asserting the reset signal high for 2 clock cycles. After 2 clock cycles, de-assert the reset signal to enable normal operation.",
  "scenario 2": "Send a complete byte starting with a start bit (0). Transmit the data bits in the order: 1, 0, 1, 1, 0, 1, 0, 1 (least significant bit first) followed by a stop bit (1). This bit stream should take a total of 10 clock cycles to transmit.",
  "scenario 3": "Send an incomplete byte starting with a start bit (0) followed by 5 data bits (1, 0, 1, 1, 0). Do not send a stop bit to test the FSM's behavior when the stop bit is missing. This should also take 6 clock cycles.",
  "scenario 4": "Send a byte that starts incorrectly with a logic high (1) instead of a start bit (0). Follow this by a complete transmission of 8 data bits (1, 0, 1, 0, 0, 1, 0, 1) and then a stop bit (1). This scenario checks for incorrect start bit detection and should total 10 clock cycles.",
  "scenario 5": "Send a valid start bit (0), and then transmit 7 data bits (0, 1, 0, 1, 1, 0, 1), but omit the stop bit to see how the FSM reacts to incomplete byte reception. Ensure this takes 8 clock cycles.",
  "scenario 6": "After successfully receiving a byte, immediately send another start bit (0) followed by 8 data bits (0, 0, 0, 1, 1, 1, 0, 0) and then a stop bit (1). Check proper state transition after receiving valid bytes, which should take a total of 10 clock cycles.",
  "scenario 7": "Test the behavior of the DUT during idle conditions by keeping the input signal high (1) for an extended period (20 clock cycles) while toggling the reset to test robustness under long idle conditions.",
  "scenario 8": "Send a series of bits that should be ignored by the DUT: Start with a stop bit (1) immediately followed by a mix of random bits (1, 0, 1, 0, 0, 1, 1, 0) without a valid start bit to evaluate how the FSM handles noise in the input stream. This transmission should occur over 10 clock cycles."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  in;
reg  reset;
wire [7:0] out_byte;
wire  done;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.in(in),
	.reset(reset),
	.out_byte(out_byte),
	.done(done)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  in;
reg  reset;
wire [7:0] out_byte;
wire  done;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.in(in),
	.reset(reset),
	.out_byte(out_byte),
	.done(done)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    reset = 1;
    repeat(2) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
        #10;
    end
    reset = 0;
    #10;

    // scenario 2
    scenario = 2;
    in = 0; // Start bit
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
    #10;
    in = 1; // Data bit 0
    repeat(8) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
        #10;
        in = ~in; // Toggle for each data bit
    end
    in = 1; // Stop bit
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
    #10;

    // scenario 3
    scenario = 3;
    in = 0; // Start bit
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
    #10;
    in = 1; // Data bit 1
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
        #10;
        in = ~in; // Toggle for each data bit
    end
    // No stop bit provided
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
    #10;

    // scenario 4
    scenario = 4;
    in = 1; // Incorrect start bit
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
    #10;
    in = 1; // Data bit 1
    repeat(8) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
        #10;
        in = ~in; // Toggle for each data bit
    end
    in = 1; // Stop bit
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
    #10;

    // scenario 5
    scenario = 5;
    in = 0; // Start bit
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
    #10;
    in = 0; // Data bit 0
    repeat(7) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
        #10;
        in = ~in; // Toggle for each data bit
    end
    // No stop bit provided
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
    #10;

    // scenario 6
    scenario = 6;
    in = 0; // Start bit
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
    #10;
    in = 0; // Data bit 0
    repeat(8) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
        #10;
        in = ~in; // Toggle for each data bit
    end
    in = 1; // Stop bit
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
    #10;

    // scenario 7
    scenario = 7;
    in = 1; // Idle condition
    reset = 1; // Toggle reset
    repeat(20) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
        #10;
    end
    reset = 0; // Release reset
    #10;

    // scenario 8
    scenario = 8;
    in = 1; // Start with stop bit
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
    #10;
    in = 0; // Noise bits
    repeat(7) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
        #10;
        in = ~in; // Toggle for each noise bit
    end
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, out_byte = %d, done = %d", scenario, clk, in, reset, out_byte, done);
    #10;

    $fclose(file);
    $finish;
end

endmodule
```

