############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input resetn,
	input [1:0] byteena,
	input [15:0] d,
	output reg [15:0] q);

Your other information:
RTL circuit problem description:
Create 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Initialize the DUT by asserting resetn low for one clock cycle (clk=0 to clk=1). Then, deassert resetn (set resetn high) and verify the state of the output q to ensure all flip-flops are reset.",
  "scenario 2": "Set resetn high and apply a 16-bit data input d = 16'hA5A5. Use byteena = 2'b01 to enable writing to the lower byte (d[7:0]). Wait for one clock cycle (clk=1) and then verify the output q for the expected value.",
  "scenario 3": "Set resetn high and apply data input d = 16'hFF00. Use byteena = 2'b10 to enable writing to the upper byte (d[15:8]). Wait for one clock cycle (clk=1) and then verify the output q for the expected value.",
  "scenario 4": "Set resetn high and apply both byteena = 2'b11 and data d = 16'hF0F0. This should write to both upper and lower bytes on the next clock edge (clk=1). Wait for one clock cycle and verify the output q.",
  "scenario 5": "Perform a sequence of actions by first asserting resetn low and then deasserting it. After that, apply data d = 16'h1234 with byteena = 2'b01, and observe the output q after one clock cycle, followed by applying d = 16'h5678 with byteena = 2'b10 on the next clock (clk=2) and observing q again.",
  "scenario 6": "Apply random values to d with all possible byteena combinations (00, 01, 10, 11) for multiple clock cycles (from clk=0 to clk=4) after deasserting resetn to check the writing functionality on the corresponding parts of the flip-flops.",
  "scenario 7": "Assert resetn low, wait for two clock cycles (clk=0 to clk=2), then deassert resetn, and apply data d = 16'hAAAA with byteena = 2'b00. Wait for one clock cycle and verify that the output q holds the expected value after reset.",
  "scenario 8": "Change byteena from 2'b00 to 2'b01 while applying a constant data input (e.g., d = 16'hBEEF) over multiple clock cycles (clk=0 to clk=5) and observe the output q output each time after the cycle ends."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  resetn;
reg [1:0] byteena;
reg [15:0] d;
wire [15:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.resetn(resetn),
	.byteena(byteena),
	.d(d),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, byteena = %d, d = %d, q = %d", scenario, clk, resetn, byteena, d, q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, byteena = %d, d = %d, q = %d", scenario, clk, resetn, byteena, d, q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  resetn;
reg [1:0] byteena;
reg [15:0] d;
wire [15:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.resetn(resetn),
	.byteena(byteena),
	.d(d),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    resetn = 0; // Assert resetn low
    #10;
    resetn = 1; // Deassert resetn
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, byteena = %d, d = %d, q = %d", scenario, clk, resetn, byteena, d, q);
        #10;
    end

    // scenario 2
    scenario = 2;
    resetn = 1; // Set resetn high
    d = 16'hA5A5;
    byteena = 2'b01; // Enable lower byte
    #10; // Wait one clock cycle
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, byteena = %d, d = %d, q = %d", scenario, clk, resetn, byteena, d, q);
        #10;
    end

    // scenario 3
    scenario = 3;
    resetn = 1; // Set resetn high
    d = 16'hFF00;
    byteena = 2'b10; // Enable upper byte
    #10; // Wait one clock cycle
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, byteena = %d, d = %d, q = %d", scenario, clk, resetn, byteena, d, q);
        #10;
    end

    // scenario 4
    scenario = 4;
    resetn = 1; // Set resetn high
    d = 16'hF0F0;
    byteena = 2'b11; // Enable both bytes
    #10; // Wait one clock cycle
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, byteena = %d, d = %d, q = %d", scenario, clk, resetn, byteena, d, q);
        #10;
    end

    // scenario 5
    scenario = 5;
    resetn = 0; // Assert resetn low
    #10;
    resetn = 1; // Deassert resetn
    d = 16'h1234;
    byteena = 2'b01; // Enable writing to lower byte
    #10; // Wait one clock cycle
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, byteena = %d, d = %d, q = %d", scenario, clk, resetn, byteena, d, q);
        #10;
    end
    d = 16'h5678;
    byteena = 2'b10; // Enable writing to upper byte
    #10; // Wait one clock cycle
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, byteena = %d, d = %d, q = %d", scenario, clk, resetn, byteena, d, q);
        #10;
    end

    // scenario 6
    scenario = 6;
    resetn = 1; // Set resetn high
    #10; // Deassert resetn
    byteena = 2'b00; // No bytes enabled 
    d = 16'h0000; // Random values
    repeat(5) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, byteena = %d, d = %d, q = %d", scenario, clk, resetn, byteena, d, q);
        byteena = $urandom_range(0, 3); // Random byteena
        d = $urandom; // Random data
    end

    // scenario 7
    scenario = 7;
    resetn = 0; // Assert resetn low
    #10;
    resetn = 1; // Deassert resetn
    d = 16'hAAAA;
    byteena = 2'b00; // No bytes enabled
    #10; // Wait one clock cycle
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, byteena = %d, d = %d, q = %d", scenario, clk, resetn, byteena, d, q);
        #10;
    end

    // scenario 8
    scenario = 8;
    resetn = 1; // Set resetn high
    d = 16'hBEEF; // Constant data
    repeat(6) begin
        byteena = (byteena == 2'b00) ? 2'b01 : 2'b00; // Change byteena
        #10; // Wait for one clock
        $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, byteena = %d, d = %d, q = %d", scenario, clk, resetn, byteena, d, q);
    end

    $fclose(file);
    $finish;
end

endmodule
```

