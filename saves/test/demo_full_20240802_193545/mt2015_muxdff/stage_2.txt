############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Consider this Verilog module "full_module":

// module full_module (
//     input [2:0] r,
//     input L,
//     input clk,
//     output reg [2:0] q
);

// always @(posedge clk) begin
//     if (L) begin
//         q <= r;
//     end else begin
//         q <= {q[1] ^ q[2], q[0], q[2]};
//     end
// end

// endmodule

// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called "top_module".

RTL testbench specification:
{
  "important data": "The provided problem description and DUT header include a full module defined as 'full_module', which takes a 3-bit input 'r', a control signal 'L', a clock signal 'clk', and produces a 3-bit output 'q'. The DUT header describes another module named 'top_module', which takes inputs 'clk', 'L', 'q_in', and 'r_in', and outputs a single signal 'Q'.",
  "technical specifications": [
    "1. The DUT, 'top_module', includes the inputs: clk (clock), L (load signal), q_in (input signal), and r_in (input signal).",
    "2. The output 'Q' is a registered signal.",
    "3. The 'top_module' must instantiate the 'full_module' as the core functionality, which updates its output based on the value of 'L' and clock signal 'clk'.",
    "4. The testbench should generate test cases to verify the correct behavior of 'top_module', ensuring that when 'L' is high, 'Q' equals 'r_in', and otherwise follows the recursive behavior described for 'q' in 'full_module'.",
    "5. The testbench must verify edge cases including changes in the clock signal and transitions of the load signal."
  ]
}
DUT header:
module top_module(
	input clk,
	input L,
	input q_in,
	input r_in,
	output reg Q);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set L to 1, provide r_in = 5 (binary '101'), apply clk signal, observe Q after one clock cycle (clk rises), then set L to 0, apply clk again, and observe Q.",
  "scenario 2": "Set L to 0, initialize q_in to 0, provide r_in = 3 (binary '011'), apply clk signal multiple times, observing Q for at least 3 clock cycles.",
  "scenario 3": "Set L to 1, provide r_in = 6 (binary '110'), apply clk signal, observe Q after one clock cycle. Then, set L to 0 and apply clk for 3 cycles, observing Q changes.",
  "scenario 4": "Initialize L to 0, set q_in to 7 (binary '111'), apply clk signal while changing r_in between 0 (binary '000') and 1 (binary '001') every 2 clock cycles, observe Q for 6 cycles.",
  "scenario 5": "Set L to 1, provide r_in = 2 (binary '010'), apply clk for 1 cycle, then toggle L to 0, and apply clk for 5 cycles, observing Q at each step.",
  "scenario 6": "Hold L at 0, provide r_in = 4 (binary '100'), observe Q with clk toggling at varying frequencies (e.g., 10ns and 20ns), to evaluate response under different conditions.",
  "scenario 7": "Set r_in = 7 (binary '111') and initialize L to 0, apply clk for 4 cycles and observe if Q reflects changes correctly per 'full_module' design.",
  "scenario 8": "Stream q_in toggling between 0 and 1 every clock cycle while holding L at 1 and applying a consistent r_in value, observing Q across several clock cycles."
}

