############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input L,
	input q_in,
	input r_in,
	output reg Q);

Your other information:
RTL circuit problem description:
Consider this Verilog module "full_module":

// module full_module (
//     input [2:0] r,
//     input L,
//     input clk,
//     output reg [2:0] q
);

// always @(posedge clk) begin
//     if (L) begin
//         q <= r;
//     end else begin
//         q <= {q[1] ^ q[2], q[0], q[2]};
//     end
// end

// endmodule

// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called "top_module".

IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Set L to 1, provide r_in = 5 (binary '101'), apply clk signal, observe Q after one clock cycle (clk rises), then set L to 0, apply clk again, and observe Q.",
  "scenario 2": "Set L to 0, initialize q_in to 0, provide r_in = 3 (binary '011'), apply clk signal multiple times, observing Q for at least 3 clock cycles.",
  "scenario 3": "Set L to 1, provide r_in = 6 (binary '110'), apply clk signal, observe Q after one clock cycle. Then, set L to 0 and apply clk for 3 cycles, observing Q changes.",
  "scenario 4": "Initialize L to 0, set q_in to 7 (binary '111'), apply clk signal while changing r_in between 0 (binary '000') and 1 (binary '001') every 2 clock cycles, observe Q for 6 cycles.",
  "scenario 5": "Set L to 1, provide r_in = 2 (binary '010'), apply clk for 1 cycle, then toggle L to 0, and apply clk for 5 cycles, observing Q at each step.",
  "scenario 6": "Hold L at 0, provide r_in = 4 (binary '100'), observe Q with clk toggling at varying frequencies (e.g., 10ns and 20ns), to evaluate response under different conditions.",
  "scenario 7": "Set r_in = 7 (binary '111') and initialize L to 0, apply clk for 4 cycles and observe if Q reflects changes correctly per 'full_module' design.",
  "scenario 8": "Stream q_in toggling between 0 and 1 every clock cycle while holding L at 1 and applying a consistent r_in value, observing Q across several clock cycles."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  L;
reg  q_in;
reg  r_in;
wire  Q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.L(L),
	.q_in(q_in),
	.r_in(r_in),
	.Q(Q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, L = %d, q_in = %d, r_in = %d, Q = %d", scenario, clk, L, q_in, r_in, Q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, L = %d, q_in = %d, r_in = %d, Q = %d", scenario, clk, L, q_in, r_in, Q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  L;
reg  q_in;
reg  r_in;
wire  Q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.L(L),
	.q_in(q_in),
	.r_in(r_in),
	.Q(Q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // Scenario 1
    scenario = 1;
    L = 1; r_in = 3'b101; // Binary '101'
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, L = %d, q_in = %d, r_in = %d, Q = %d", scenario, clk, L, q_in, r_in, Q);
    L = 0;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, L = %d, q_in = %d, r_in = %d, Q = %d", scenario, clk, L, q_in, r_in, Q);

    // Scenario 2
    scenario = 2;
    L = 0; q_in = 0; r_in = 3'b011; // Binary '011'
    repeat(3) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, L = %d, q_in = %d, r_in = %d, Q = %d", scenario, clk, L, q_in, r_in, Q);
    end

    // Scenario 3
    scenario = 3;
    L = 1; r_in = 3'b110; // Binary '110'
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, L = %d, q_in = %d, r_in = %d, Q = %d", scenario, clk, L, q_in, r_in, Q);
    L = 0;
    repeat(3) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, L = %d, q_in = %d, r_in = %d, Q = %d", scenario, clk, L, q_in, r_in, Q);
    end

    // Scenario 4
    scenario = 4;
    L = 0; q_in = 3'b111; // Binary '111'
    repeat(6) begin
        r_in = (clk % 2 == 0) ? 3'b000 : 3'b001; // Toggle between binary '000' and '001'
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, L = %d, q_in = %d, r_in = %d, Q = %d", scenario, clk, L, q_in, r_in, Q);
    end

    // Scenario 5
    scenario = 5;
    L = 1; r_in = 3'b010; // Binary '010'
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, L = %d, q_in = %d, r_in = %d, Q = %d", scenario, clk, L, q_in, r_in, Q);
    L = 0;
    repeat(5) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, L = %d, q_in = %d, r_in = %d, Q = %d", scenario, clk, L, q_in, r_in, Q);
    end

    // Scenario 6
    scenario = 6;
    L = 0; r_in = 3'b100; // Binary '100'
    repeat(10) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, L = %d, q_in = %d, r_in = %d, Q = %d", scenario, clk, L, q_in, r_in, Q);
    end

    // Scenario 7
    scenario = 7;
    r_in = 3'b111; // Binary '111'
    L = 0;
    repeat(4) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, L = %d, q_in = %d, r_in = %d, Q = %d", scenario, clk, L, q_in, r_in, Q);
    end

    // Scenario 8
    scenario = 8;
    L = 1; r_in = 3'b010; // Binary '010'
    q_in = 0; // Start with 0
    repeat(6) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, L = %d, q_in = %d, r_in = %d, Q = %d", scenario, clk, L, q_in, r_in, Q);
        q_in = ~q_in; // Toggle q_in every cycle
    end

    $fclose(file);
    $finish;
end

endmodule
```

