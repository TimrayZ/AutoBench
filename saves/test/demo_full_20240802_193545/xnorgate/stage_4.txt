############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, out = %d", "scenario: 1b, a = %d, b = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	input a, 
	input b,
	output out
);

Your other information:
RTL circuit problem description:
Create a module that implements an XNOR gate.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1: The DUT is an XNOR gate, which means the output 'out' should be true (1) if the inputs 'a' and 'b' are both true (1) or both false (0). Otherwise, the output 'out' should be false (0).",
    "2: The input signals 'a' and 'b' are 1-bit binary signals (either 0 or 1).",
    "3: The output signal 'out' is also a 1-bit binary signal.",
    "4: The XNOR gate truth table is as follows: if a=0, b=0 then out=1; if a=0, b=1 then out=0; if a=1, b=0 then out=0; if a=1, b=1 then out=1."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set inputs 'a' and 'b' to 0 at clock cycle 0. Wait for 1 clock cycle to observe the output.",
  "scenario 2": "Set inputs 'a' to 0 and 'b' to 1 at clock cycle 1. Wait for 1 clock cycle to observe the output.",
  "scenario 3": "Set inputs 'a' to 1 and 'b' to 0 at clock cycle 2. Wait for 1 clock cycle to observe the output.",
  "scenario 4": "Set inputs 'a' and 'b' to 1 at clock cycle 3. Wait for 1 clock cycle to observe the output.",
  "scenario 5": "Toggle inputs 'a' and 'b' to 0 at clock cycle 4, and then set 'a' to 1 and 'b' to 0 at clock cycle 5. Wait for 1 clock cycle to observe the output for both sets of inputs.",
  "scenario 6": "Set inputs 'a' to 1 and 'b' to 1 at clock cycle 6. Wait for 1 clock cycle to observe the output.",
  "scenario 7": "Reset inputs 'a' and 'b' to their initial state (0, 0) at clock cycle 7. Wait for 1 clock cycle to observe the output."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, out = %d", "scenario: 1b, a = %d, b = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module testbench;
    // Parameters
    reg a;
    reg b;
    wire out;

    // DUT Instance
    top_module uut (
        .a(a),
        .b(b),
        .out(out)
    );

    // File Descriptor
    integer fd;

    initial begin
        // Open file for writing
        fd = $fopen("TBout.txt", "w");
        
        // Scenario 1
        a = 0; b = 0; #1;
        $fdisplay(fd, "scenario: 1, a = %d, b = %d, out = %d", a, b, out);
        
        // Scenario 2
        a = 0; b = 1; #1;
        $fdisplay(fd, "scenario: 2, a = %d, b = %d, out = %d", a, b, out);
        
        // Scenario 3
        a = 1; b = 0; #1;
        $fdisplay(fd, "scenario: 3, a = %d, b = %d, out = %d", a, b, out);
        
        // Scenario 4
        a = 1; b = 1; #1;
        $fdisplay(fd, "scenario: 4, a = %d, b = %d, out = %d", a, b, out);
        
        // Scenario 5
        a = 0; b = 0; #1;
        $fdisplay(fd, "scenario: 5a, a = %d, b = %d, out = %d", a, b, out);
        a = 1; b = 0; #1;
        $fdisplay(fd, "scenario: 5b, a = %d, b = %d, out = %d", a, b, out);
        
        // Scenario 6
        a = 1; b = 1; #1;
        $fdisplay(fd, "scenario: 6, a = %d, b = %d, out = %d", a, b, out);
        
        // Scenario 7
        a = 0; b = 0; #1;
        $fdisplay(fd, "scenario: 7, a = %d, b = %d, out = %d", a, b, out);
        
        // Close file
        $fclose(fd);
        $finish;
    end
endmodule
```

