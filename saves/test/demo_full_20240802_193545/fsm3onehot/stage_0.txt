############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. 
// State | Next state in=0, Next state in=1 | Output
// A | A, B | 0
// B | C, B | 0
// C | A, D | 0
// D | C, B | 1
RTL header:
module top_module (
	input in,
	input [3:0] state,
	output reg [3:0] next_state,
	output out
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
    input in,
    input [3:0] state,
    output reg [3:0] next_state,
    output out
);

    // Combinational logic for next state
    always @(*) begin
        case (state)
            4'b0001: // State A
                next_state = (in) ? 4'b0010 : 4'b0001; // Next state B or stay in A
            4'b0010: // State B
                next_state = (in) ? 4'b0010 : 4'b0100; // Next state B or C
            4'b0100: // State C
                next_state = (in) ? 4'b1000 : 4'b0001; // Next state D or A
            4'b1000: // State D
                next_state = (in) ? 4'b0010 : 4'b0100; // Next state B or C
            default: 
                next_state = 4'b0001; // Default to state A
        endcase
    end

    // Output logic
    assign out = (state == 4'b1000) ? 1'b1 : 1'b0; // Output is 1 only in state D

endmodule
```

