############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
You are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.
RTL header:
module top_module (
	input clk,
	input areset,
	input x,
	output z
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
    input clk,
    input areset,
    input x,
    output reg z
);

    reg [1:0] state, next_state;
    reg [31:0] result;  // Assuming maximum 32 bits for the output
    reg [5:0] count;     // Counter for number of bits processed

    localparam IDLE       = 2'b00,
               PROCESS    = 2'b01,
               OUTPUT      = 2'b10;
    
    always @(posedge clk or posedge areset) begin
        if (areset) begin
            state <= IDLE;
            count <= 0;
            result <= 0;
            z <= 0;
        end else begin
            state <= next_state;
        end
    end

    always @(*) begin
        case (state)
            IDLE: begin
                if (!areset)
                    next_state = PROCESS;
                else
                    next_state = IDLE;
            end

            PROCESS: begin
                if (count < 32) begin
                    result[count] = ~x; // Take 1's complement of x for 2's complement
                    count = count + 1;
                    next_state = OUTPUT;
                end else begin
                    next_state = OUTPUT;
                end
            end

            OUTPUT: begin
                result = result + 1; // Add 1 to complete 2's complement
                z = result;
                if (areset) begin
                    next_state = IDLE;
                end else begin
                    next_state = PROCESS;
                end
            end

            default: next_state = IDLE;
        endcase
    end
    
endmodule
```

