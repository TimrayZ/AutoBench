############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
You are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. DUT Name: top_module - A Moore state machine for 2's complement conversion.",
    "2. Inputs: clk (clock signal), areset (asynchronous reset), x (input bit stream for 2's complement).",
    "3. Output: z (output which represents the 2's complement of the input number).",
    "4. Functionality: The circuit processes a series of bits inputted per clock cycle, beginning with the least-significant bit, to compute its 2's complement.",
    "5. State Machine Behavior: Transition occurs on the positive edge of the clk signal. The process begins when the areset signal is released (de-asserted) and stops when areset is asserted.",
    "6. Input Constraints: The DUT can accept input numbers of arbitrary length."
  ]
}
DUT header:
module top_module (
	input clk,
	input areset,
	input x,
	output z
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Assert areset for 1 clock cycle. Release areset and input the bit '0' during the first clock cycle. Wait for 1 clock cycle before providing the next bit.",
  "scenario 2": "Input the bit '1' on the second clock cycle after releasing areset. Wait for 1 clock cycle before providing the next bit.",
  "scenario 3": "Input the bit stream '1101' starting from the least significant bit. Transmit '1' (LSB) on the third clock cycle, then '0' on the fourth, '1' on the fifth, and '1' on the sixth. Wait for 1 clock cycle after the last bit.",
  "scenario 4": "Input a longer bit sequence '1010111'. Begin with '1'(LSB) on the third clock cycle, and then input '1' on the fourth, '1' on the fifth, '0' on the sixth, '1' on the seventh, '0' on the eighth, and '1' on the ninth clock cycle. Wait for 1 additional clock cycle after the last bit.",
  "scenario 5": "On the third clock cycle, input the bit stream '0' followed by '1' for 5 clock cycles. After providing '1', input '0', and then assert areset for 1 clock cycle. Release areset after which no input bits are sent for a couple of cycles.",
  "scenario 6": "Initialize with areset asserted, then release areset and input an empty stream (no bits) for 5 clock cycles and assert areset again. Observe that no transition occurs during this scenario."
}

