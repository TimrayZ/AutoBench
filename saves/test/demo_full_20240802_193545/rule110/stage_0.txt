############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:
// Left | Center | Right | Center's next state
// 1 | 1 | 1 | 0
// 1 | 1 | 0 | 1
// 1 | 0 | 1 | 1
// 1 | 0 | 0 | 0
// 0 | 1 | 1 | 1
// 0 | 1 | 0 | 1
// 0 | 0 | 1 | 1
// 0 | 0 | 0 | 0 
// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).
RTL header:
module top_module(
	input clk,
	input load,
	input [511:0] data,
	output reg [511:0] q);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module(
    input clk,
    input load,
    input [511:0] data,
    output reg [511:0] q
);

    reg [511:0] temp_q;

    always @(posedge clk) begin
        if (load) begin
            q <= data; // Load the new data if load is high
        end else begin
            // Calculate the next state of each cell based on Rule 110
            temp_q[0]  <= 0; // Boundary condition: q[-1] = 0
            temp_q[511] <= 0; // Boundary condition: q[512] = 0
            
            for (int i = 1; i < 511; i = i + 1) begin
                case ({q[i-1], q[i], q[i+1]})
                    3'b111: temp_q[i] <= 0; // 1 1 1 -> 0
                    3'b110: temp_q[i] <= 1; // 1 1 0 -> 1
                    3'b101: temp_q[i] <= 1; // 1 0 1 -> 1
                    3'b100: temp_q[i] <= 0; // 1 0 0 -> 0
                    3'b011: temp_q[i] <= 1; // 0 1 1 -> 1
                    3'b010: temp_q[i] <= 1; // 0 1 0 -> 1
                    3'b001: temp_q[i] <= 1; // 0 0 1 -> 1
                    3'b000: temp_q[i] <= 0; // 0 0 0 -> 0
                endcase
            end

            q <= temp_q; // Update the state of the cells
        end
    end

endmodule
```

