############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:
// Left | Center | Right | Center's next state
// 1 | 1 | 1 | 0
// 1 | 1 | 0 | 1
// 1 | 0 | 1 | 1
// 1 | 0 | 0 | 0
// 0 | 1 | 1 | 1
// 0 | 1 | 0 | 1
// 0 | 0 | 1 | 1
// 0 | 0 | 0 | 0 
// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).
RTL testbench specification:
{
  "important data": "Rule 110 is a one-dimensional cellular automaton applied to a 512-cell system where the next state of each cell is determined by its own state and the states of its two neighbors based on a specific transition table. The boundaries are assumed to be zero (off).",
  "technical specifications": [
    "1. The DUT has a clock input (clk) for synchronization.",
    "2. The DUT has a load input (load) which, when high, forces the internal state (q) to take the value of the data input.",
    "3. The DUT has a 512-bit data input (data[511:0]), which represents the initial state of the cellular automaton.",
    "4. The DUT has a 512-bit output (q[511:0]) that represents the current state of the cellular automaton.",
    "5. The DUT should implement the Rule 110 update logic based on the provided state transition table.",
    "6. The state update occurs on the rising edge of the clock (clk).",
    "7. It is required to check the behavior of the system for different initial conditions, including edge cases where cells are turned on or off based on the specified Rules of Rule 110."
  ]
}
DUT header:
module top_module(
	input clk,
	input load,
	input [511:0] data,
	output reg [511:0] q);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set load to high and provide the initial state with all cells off (data = 512'b0). This should load the state into q and wait for 1 clock cycle.",
  "scenario 2": "Set load to high and provide the initial state with a single cell on at the center (data = 512'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000). Load the state into q and wait for 1 clock cycle.",
  "scenario 3": "Set load to high and provide an initial state with a pattern of alternating cells (data = 512'b1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010). Load the state into q and wait for 1 clock cycle.",
  "scenario 4": "Set load to high and provide an initial random state (data = 512'b011011011110100101111111101010011111000011111100001010100001110110110101011). Load the state into q and wait for 1 clock cycle.",
  "scenario 5": "Set load to high and provide an initial state with the first half of cells on (data = 512'b11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000). Load the state into q and wait for 1 clock cycle.",
  "scenario 6": "Set load to low and clock the DUT for 5 cycles while examining the evolution of the pattern based on the Rule 110 update logic.",
  "scenario 7": "Set load to high and provide an initial state with a 'pulsar' configuration (a known oscillating pattern). Load the state into q and wait for 1 clock cycle before observing the output for several cycles.",
  "scenario 8": "Set load to high and provide an initial state where only the leftmost and rightmost cells are on (data = 512'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000). Load the state into q and wait for 1 clock cycle. Clock the DUT for 5 cycles while observing the output."
}

