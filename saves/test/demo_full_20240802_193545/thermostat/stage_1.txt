############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. You are in the first stage. In this stage, please summarize the technical details of the DUT and give me a technical specification of the testbench generation task, so we can use it to design its corresponding testbench.
3. The core of testbench is the testcases. It usually include two parts logically: the input signals to the DUT and the expected result signals from DUT. The testbench will send the input signals to DUT and check if the result signals are the same as the expected result signals. If they are the same, this means the DUT is passed. Otherwise the DUT fails.
4. Your technical specification should include these sections:
- section 1: specification of the DUT, including the module header of the RTL code. If table or other detailed data is provided in the original problem description, DO repeat them in your response. They are very important!!!
5. your response should be in the form of JSON.
6. below is the information including the problem description and the DUT header:
RTL circuit problem description:
A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.
DUT header:
module top_module(
	input mode,
	input too_cold, 
	input too_hot,
	input fan_on,
	output heater,
	output aircon,
	output fan
);

your response must be in JSON form. example:
{
  "important data": "...", # type: string. If no table, state transition or other direct data, leave this with ""
  "technical specifications": ["...", "...", ...] # each element of the list is one specification string, the starting of the string is its index 
}



########## assistant ##########
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a thermostat controller implemented in Verilog that controls a heater, air conditioner, and fan based on temperature conditions and user inputs.",
    "2. The DUT supports two operating modes: heating mode (mode = 1) and cooling mode (mode = 0).",
    "3. In heating mode (mode = 1): if too_cold = 1, the heater should be turned on (heater = 1), while the air conditioner should be off (aircon = 0). The fan should be on (fan = 1) when the heater is on. The fan can also be turned on independently if fan_on = 1.",
    "4. In cooling mode (mode = 0): if too_hot = 1, the air conditioner should be turned on (aircon = 1), while the heater should be off (heater = 0). The fan should be on (fan = 1) when the air conditioner is on. The fan can also be turned on independently if fan_on = 1.",
    "5. If neither the heater nor air conditioner needs to be on, the fan should be controlled based on the fan_on signal.",
    "6. The outputs of the DUT are: heater, aircon, and fan, which are all of type wire or reg in the Verilog implementation."
  ]
}

