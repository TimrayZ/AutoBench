############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d", "scenario: 1b, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	input mode,
	input too_cold, 
	input too_hot,
	input fan_on,
	output heater,
	output aircon,
	output fan
);

Your other information:
RTL circuit problem description:
A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a thermostat controller implemented in Verilog that controls a heater, air conditioner, and fan based on temperature conditions and user inputs.",
    "2. The DUT supports two operating modes: heating mode (mode = 1) and cooling mode (mode = 0).",
    "3. In heating mode (mode = 1): if too_cold = 1, the heater should be turned on (heater = 1), while the air conditioner should be off (aircon = 0). The fan should be on (fan = 1) when the heater is on. The fan can also be turned on independently if fan_on = 1.",
    "4. In cooling mode (mode = 0): if too_hot = 1, the air conditioner should be turned on (aircon = 1), while the heater should be off (heater = 0). The fan should be on (fan = 1) when the air conditioner is on. The fan can also be turned on independently if fan_on = 1.",
    "5. If neither the heater nor air conditioner needs to be on, the fan should be controlled based on the fan_on signal.",
    "6. The outputs of the DUT are: heater, aircon, and fan, which are all of type wire or reg in the Verilog implementation."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set mode = 1 (heating mode), too_cold = 1, too_hot = 0, fan_on = 0 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 2": "Set mode = 1 (heating mode), too_cold = 0, too_hot = 0, fan_on = 1 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 3": "Set mode = 0 (cooling mode), too_cold = 0, too_hot = 1, fan_on = 0 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 4": "Set mode = 0 (cooling mode), too_cold = 0, too_hot = 0, fan_on = 1 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 5": "Set mode = 1 (heating mode), too_cold = 1, too_hot = 1, fan_on = 0 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 6": "Set mode = 0 (cooling mode), too_cold = 1, too_hot = 1, fan_on = 1 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 7": "Rapidly toggle mode between 0 and 1, while setting too_cold = 1, too_hot = 0, fan_on = 0 for 10 clock cycles. Check the outputs after each clock cycle for changes.",
  "scenario 8": "Set mode = 1 (heating mode), too_cold = 0, too_hot = 0, fan_on = 0, wait 2 clock cycles, then set fan_on = 1 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 9": "Set mode = 0 (cooling mode), too_cold = 0, too_hot = 1, fan_on = 1 for 5 clock cycles, then set too_hot = 0 while keeping the other inputs the same for another 5 clock cycles. Check the outputs after the 10th clock cycle.",
  "scenario 10": "Set mode = 1 (heating mode), too_cold = 1, too_hot = 0, fan_on = 1 for 3 clock cycles, and then set fan_on = 0 for another 3 clock cycles. Check the outputs after the 6th clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d", "scenario: 1b, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;
    // Inputs
    reg mode;
    reg too_cold;
    reg too_hot;
    reg fan_on;
    
    // Outputs
    wire heater;
    wire aircon;
    wire fan;

    // Instantiate the DUT
    top_module uut (
        .mode(mode),
        .too_cold(too_cold),
        .too_hot(too_hot),
        .fan_on(fan_on),
        .heater(heater),
        .aircon(aircon),
        .fan(fan)
    );

    // File handle for exporting data
    integer file;

    initial begin
        // Open the file for writing
        file = $fopen("TBout.txt", "w");

        // Scenario 1
        mode = 1; too_cold = 1; too_hot = 0; fan_on = 0;
        #10;  // Wait for 5 clock cycles
        $fdisplay(file, "scenario: 1, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d", mode, too_cold, too_hot, fan_on, heater, aircon, fan);

        // Scenario 2
        mode = 1; too_cold = 0; too_hot = 0; fan_on = 1;
        #10;  // Wait for 5 clock cycles
        $fdisplay(file, "scenario: 2, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d", mode, too_cold, too_hot, fan_on, heater, aircon, fan);

        // Scenario 3
        mode = 0; too_cold = 0; too_hot = 1; fan_on = 0;
        #10;  // Wait for 5 clock cycles
        $fdisplay(file, "scenario: 3, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d", mode, too_cold, too_hot, fan_on, heater, aircon, fan);

        // Scenario 4
        mode = 0; too_cold = 0; too_hot = 0; fan_on = 1;
        #10;  // Wait for 5 clock cycles
        $fdisplay(file, "scenario: 4, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d", mode, too_cold, too_hot, fan_on, heater, aircon, fan);
        
        // Scenario 5
        mode = 1; too_cold = 1; too_hot = 1; fan_on = 0;
        #10;  // Wait for 5 clock cycles
        $fdisplay(file, "scenario: 5, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d", mode, too_cold, too_hot, fan_on, heater, aircon, fan);

        // Scenario 6
        mode = 0; too_cold = 1; too_hot = 1; fan_on = 1;
        #10;  // Wait for 5 clock cycles
        $fdisplay(file, "scenario: 6, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d", mode, too_cold, too_hot, fan_on, heater, aircon, fan);

        // Scenario 7
        for (integer i = 0; i < 10; i++) begin
            mode = (i % 2);
            too_cold = 1; too_hot = 0; fan_on = 0;
            #1;  // Wait for 1 clock cycle to allow signals to settle
            $fdisplay(file, "scenario: 7, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d", mode, too_cold, too_hot, fan_on, heater, aircon, fan);
        end

        // Scenario 8
        mode = 1; too_cold = 0; too_hot = 0; fan_on = 0;
        #2;  // Wait for 2 clock cycles
        fan_on = 1;
        #10;  // Wait for 5 clock cycles
        $fdisplay(file, "scenario: 8, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d", mode, too_cold, too_hot, fan_on, heater, aircon, fan);

        // Scenario 9
        mode = 0; too_cold = 0; too_hot = 1; fan_on = 1;
        #10;  // Wait for 5 clock cycles
        too_hot = 0;
        #10;  // Wait for 5 clock cycles
        $fdisplay(file, "scenario: 9, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d", mode, too_cold, too_hot, fan_on, heater, aircon, fan);

        // Scenario 10
        mode = 1; too_cold = 1; too_hot = 0; fan_on = 1;
        #3;  // Wait for 3 clock cycles
        fan_on = 0;
        #3;  // Wait for 3 clock cycles
        $fdisplay(file, "scenario: 10, mode = %d, too_cold = %d, too_hot = %d, fan_on = %d, heater = %d, aircon = %d, fan = %d", mode, too_cold, too_hot, fan_on, heater, aircon, fan);
        
        // Close the file
        $fclose(file);
        $finish;
    end
endmodule
```

