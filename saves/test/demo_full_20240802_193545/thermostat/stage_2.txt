############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a thermostat controller implemented in Verilog that controls a heater, air conditioner, and fan based on temperature conditions and user inputs.",
    "2. The DUT supports two operating modes: heating mode (mode = 1) and cooling mode (mode = 0).",
    "3. In heating mode (mode = 1): if too_cold = 1, the heater should be turned on (heater = 1), while the air conditioner should be off (aircon = 0). The fan should be on (fan = 1) when the heater is on. The fan can also be turned on independently if fan_on = 1.",
    "4. In cooling mode (mode = 0): if too_hot = 1, the air conditioner should be turned on (aircon = 1), while the heater should be off (heater = 0). The fan should be on (fan = 1) when the air conditioner is on. The fan can also be turned on independently if fan_on = 1.",
    "5. If neither the heater nor air conditioner needs to be on, the fan should be controlled based on the fan_on signal.",
    "6. The outputs of the DUT are: heater, aircon, and fan, which are all of type wire or reg in the Verilog implementation."
  ]
}
DUT header:
module top_module(
	input mode,
	input too_cold, 
	input too_hot,
	input fan_on,
	output heater,
	output aircon,
	output fan
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set mode = 1 (heating mode), too_cold = 1, too_hot = 0, fan_on = 0 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 2": "Set mode = 1 (heating mode), too_cold = 0, too_hot = 0, fan_on = 1 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 3": "Set mode = 0 (cooling mode), too_cold = 0, too_hot = 1, fan_on = 0 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 4": "Set mode = 0 (cooling mode), too_cold = 0, too_hot = 0, fan_on = 1 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 5": "Set mode = 1 (heating mode), too_cold = 1, too_hot = 1, fan_on = 0 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 6": "Set mode = 0 (cooling mode), too_cold = 1, too_hot = 1, fan_on = 1 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 7": "Rapidly toggle mode between 0 and 1, while setting too_cold = 1, too_hot = 0, fan_on = 0 for 10 clock cycles. Check the outputs after each clock cycle for changes.",
  "scenario 8": "Set mode = 1 (heating mode), too_cold = 0, too_hot = 0, fan_on = 0, wait 2 clock cycles, then set fan_on = 1 for 5 clock cycles. Check the outputs after the 5th clock cycle.",
  "scenario 9": "Set mode = 0 (cooling mode), too_cold = 0, too_hot = 1, fan_on = 1 for 5 clock cycles, then set too_hot = 0 while keeping the other inputs the same for another 5 clock cycles. Check the outputs after the 10th clock cycle.",
  "scenario 10": "Set mode = 1 (heating mode), too_cold = 1, too_hot = 0, fan_on = 1 for 3 clock cycles, and then set fan_on = 0 for another 3 clock cycles. Check the outputs after the 6th clock cycle."
}

