############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module (
	input clk,
	input resetn,
	input in,
	output out
);

Your other information:
RTL circuit problem description:
Implement a shift register with four D flops. Reset is active-low synchronous resettable.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Apply active-low reset (resetn = 0) at time 0 for 1 clock cycle, then release reset (resetn = 1) at time 1.",
  "scenario 2": "After releasing the reset, hold clk at low (clk = 0) for 1 clock cycle, then transition clk to high (clk = 1) for 1 clock cycle while providing in = 1.",
  "scenario 3": "After the first rising edge of clk, provide in = 0 on the next rising edge (time 3), and keep it constant while applying clk for 3 more cycles (total of 4 clock cycles).",
  "scenario 4": "At time 7, assert in = 1 right before the next rising edge of clk, then provide clk for 1 clock cycle.",
  "scenario 5": "Continue to apply clk with in toggled between 0 and 1 for 4 cycles, alternating input values at each rising edge until time 12.",
  "scenario 6": "At time 12, hold resetn low (resetn = 0) for 1 clock cycle while clk is high (clk = 1), then release reset (resetn = 1) at time 13 with in = 1.",
  "scenario 7": "After the reset is released, apply clk for 5 cycles with in = 0 for each cycle, ensuring that the shift register operates normally without resets."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  resetn;
reg  in;
wire  out;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.resetn(resetn),
	.in(in),
	.out(out)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, in = %d, out = %d", scenario, clk, resetn, in, out);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, in = %d, out = %d", scenario, clk, resetn, in, out);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  resetn;
reg  in;
wire  out;

integer file, scenario;

// DUT instantiation
top_module DUT (
	.clk(clk),
	.resetn(resetn),
	.in(in),
	.out(out)
);

// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end

// Scenario Based Test
initial begin
    
    // scenario 1
    scenario = 1;
    resetn = 0; // Apply active low reset
    #10; 
    resetn = 1; // Release reset
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, in = %d, out = %d", scenario, clk, resetn, in, out);
    
    // scenario 2
    scenario = 2;
    in = 1; // Provide input
    #10; // Hold clk low
    #10; // Transition clk to high
    $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, in = %d, out = %d", scenario, clk, resetn, in, out);
    
    // scenario 3
    scenario = 3;
    #10; // Wait for clk rising edge
    in = 0; // Change input
    #10; 
    repeat(3) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, in = %d, out = %d", scenario, clk, resetn, in, out);
        #10;
    end

    // scenario 4
    scenario = 4;
    in = 1; // Assert input before rising edge
    #10; 
    $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, in = %d, out = %d", scenario, clk, resetn, in, out);
    
    // scenario 5
    scenario = 5;
    repeat(4) begin
        in = ~in; // Toggle input
        #10; 
        $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, in = %d, out = %d", scenario, clk, resetn, in, out);
    end

    // scenario 6
    scenario = 6;
    resetn = 0; // Hold reset low
    #10; 
    resetn = 1; // Release reset with in = 1
    in = 1;
    #10; 
    $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, in = %d, out = %d", scenario, clk, resetn, in, out);
    
    // scenario 7
    scenario = 7;
    in = 0; // Apply in = 0
    repeat(5) begin
        #10; 
        $fdisplay(file, "[check]scenario: %d, clk = %d, resetn = %d, in = %d, out = %d", scenario, clk, resetn, in, out);
    end

    $fclose(file);
    $finish;
end

endmodule
```

