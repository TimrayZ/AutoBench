############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
This combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.
RTL header:
module top_module (
	input [7:0] code,
	output reg [3:0] out,
	output reg valid
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
    input [7:0] code,
    output reg [3:0] out,
    output reg valid
);

    always @(*) begin
        case (code)
            8'h45: begin out = 4'd0; valid = 1; end  // Key 0
            8'h16: begin out = 4'd1; valid = 1; end  // Key 1
            8'h1E: begin out = 4'd2; valid = 1; end  // Key 2
            8'h26: begin out = 4'd3; valid = 1; end  // Key 3
            8'h25: begin out = 4'd4; valid = 1; end  // Key 4
            8'h2E: begin out = 4'd5; valid = 1; end  // Key 5
            8'h36: begin out = 4'd6; valid = 1; end  // Key 6
            8'h3D: begin out = 4'd7; valid = 1; end  // Key 7
            8'h3E: begin out = 4'd8; valid = 1; end  // Key 8
            8'h46: begin out = 4'd9; valid = 1; end  // Key 9
            default: begin out = 4'd0; valid = 0; end // Invalid input
        endcase
    end

endmodule
```

