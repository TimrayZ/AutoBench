############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Implement a D latch using an always block.

RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a D latch implemented using an always block.",
    "2. Module header: module top_module (input d, input ena, output logic q);",
    "3. The input signals to the DUT are 'd' (data input) and 'ena' (enable input).",
    "4. The output signal from the DUT is 'q' (latch output).",
    "5. The functionality of the D latch is to hold the value of the input 'd' when 'ena' is high, and the output 'q' should reflect the value of 'd' when 'ena' transitions from low to high.",
    "6. When 'ena' is low, the output 'q' should remain unchanged regardless of the input 'd'.",
    "7. Test cases should verify the behavior of the D latch for various combinations of 'd' and 'ena', including edge cases."
  ]
}
DUT header:
module top_module (
	input d,
	input ena,
	output logic q
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set input d to 0 and enable ena to high (1) at clock cycle 0. Monitor q for changes at clock cycle 1.",
  "scenario 2": "Set input d to 1 and enable ena to high (1) at clock cycle 2. Monitor q for changes at clock cycle 3.",
  "scenario 3": "Set input d to 0 and enable ena to low (0) at clock cycle 4. Observe q remains unchanged at clock cycle 5.",
  "scenario 4": "Change input d to 1 while ena is still low (0) at clock cycle 6. Monitor q for stability at clock cycle 7.",
  "scenario 5": "Change ena from low (0) to high (1) at clock cycle 8 while d remains 1. Monitor q for changes at clock cycle 9.",
  "scenario 6": "Set input d to 0 while ena is high (1) at clock cycle 10. Monitor q for changes at clock cycle 11.",
  "scenario 7": "Set ena to low (0) at clock cycle 12 while d is unchanged at 1. Monitor q for stability at clock cycle 13.",
  "scenario 8": "Toggle ena from low (0) to high (1) at clock cycle 14 and set d to 1. Monitor q at clock cycle 15 for confirmation of change.",
  "scenario 9": "Set d to 0 at clock cycle 16 while keeping ena high (1). Monitor q for changes at clock cycle 17.",
  "scenario 10": "Set ena back to low (0) at clock cycle 18 and input d to 1. Monitor q for stability at clock cycle 19."
}

