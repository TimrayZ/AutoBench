############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk, 
	input load, 
	input [9:0] data, 
	output tc
);

Your other information:
RTL circuit problem description:
Implement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: 
// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. 
// (2) If load = 0, the internal counter should decrement by 1. The output signal tc ("terminal count") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.


IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "At clock cycle 0, set load to 1 and provide data with a value of 10'b0000001000 (8 in decimal) to the DUT. The counter should now be loaded with this value. Assertions on tc should be noted during this cycle.",
  "scenario 2": "At clock cycle 1, set load to 0. Observe the value of tc and the internal counter decrementing. The counter should now begin counting down from 8 to 0. Verify tc with each descending count.",
  "scenario 3": "At clock cycle 9, set load to 0 once more to continue the countdown. tc should be asserted when the counter reaches 0. Continue to observe and evaluate the behavior of tc during the countdown.",
  "scenario 4": "At clock cycle 10, after t counting has reached 0, bring load high again (set load to 1) and provide a new value of data with 10'b0000000011 (3 in decimal). The counter should be reloaded with this new value. Track tc when data is loaded.",
  "scenario 5": "At clock cycle 11, set load to 0. Confirm that the counter starts decrementing from the newly loaded value 3. Confirm the behavior of tc until the count reaches 0 again.",
  "scenario 6": "At clock cycle 12, simultaneously set load to 1 with a new data value of 10'b0000000101 (5 in decimal). Analyze how the DUT behaves while still counting down from the previous value of 0.",
  "scenario 7": "At clock cycle 13, set load to 0 again while the previous count is still ongoing. Verify tc until it reaches 0 and note any discrepancies in count behavior due to simultaneous load operations.",
  "scenario 8": "At clock cycle 19, set load to 1 with a data value of 10'b0000000001 (1 in decimal). Observe the counter loading operation and check how the terminal count reacts upon reaching 0 subsequently."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  load;
reg [9:0] data;
wire  tc;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.load(load),
	.data(data),
	.tc(tc)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, tc = %d", scenario, clk, load, data, tc);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, tc = %d", scenario, clk, load, data, tc);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  load;
reg [9:0] data;
wire  tc;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.load(load),
	.data(data),
	.tc(tc)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    load = 1;
    data = 10'b0000001000;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, tc = %d", scenario, clk, load, data, tc);

    // scenario 2
    scenario = 2;
    load = 0;
    repeat(9) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, tc = %d", scenario, clk, load, data, tc);
    end

    // scenario 3
    scenario = 3;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, tc = %d", scenario, clk, load, data, tc);

    // scenario 4
    scenario = 4;
    load = 1;
    data = 10'b0000000011;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, tc = %d", scenario, clk, load, data, tc);

    // scenario 5
    scenario = 5;
    load = 0;
    repeat(3) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, tc = %d", scenario, clk, load, data, tc);
    end

    // scenario 6
    scenario = 6;
    load = 1;
    data = 10'b0000000101;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, tc = %d", scenario, clk, load, data, tc);

    // scenario 7
    scenario = 7;
    load = 0;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, tc = %d", scenario, clk, load, data, tc);
    
    // Verify until tc asserts
    repeat(5) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, tc = %d", scenario, clk, load, data, tc);
    end

    // scenario 8
    scenario = 8;
    load = 1;
    data = 10'b0000000001;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, tc = %d", scenario, clk, load, data, tc);

    $fclose(file);
    $finish;
end

endmodule
```

