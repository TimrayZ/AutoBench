############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Implement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: 
// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. 
// (2) If load = 0, the internal counter should decrement by 1. The output signal tc ("terminal count") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.


RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a timer implemented as a down-counter that counts down from a specified value and asserts a terminal count signal (tc) once the count reaches 0.",
    "2. The DUT has the following module header: module top_module(input clk, input load, input [9:0] data, output tc);",
    "3. The timer can be loaded with a 10-bit value via the 'data' input whenever the 'load' signal is asserted high (1).",
    "4. When 'load' is low (0), the internal counter decrements by 1 on each clock cycle if the counter is not already at 0.",
    "5. The terminal count signal (tc) indicates when the internal counter reaches 0. 'tc' should remain high until the counter is reloaded with a new value.",
    "6. The DUT should support continuous loading of the counter while it is counting down."
  ]
}
DUT header:
module top_module(
	input clk, 
	input load, 
	input [9:0] data, 
	output tc
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "At clock cycle 0, set load to 1 and provide data with a value of 10'b0000001000 (8 in decimal) to the DUT. The counter should now be loaded with this value. Assertions on tc should be noted during this cycle.",
  "scenario 2": "At clock cycle 1, set load to 0. Observe the value of tc and the internal counter decrementing. The counter should now begin counting down from 8 to 0. Verify tc with each descending count.",
  "scenario 3": "At clock cycle 9, set load to 0 once more to continue the countdown. tc should be asserted when the counter reaches 0. Continue to observe and evaluate the behavior of tc during the countdown.",
  "scenario 4": "At clock cycle 10, after t counting has reached 0, bring load high again (set load to 1) and provide a new value of data with 10'b0000000011 (3 in decimal). The counter should be reloaded with this new value. Track tc when data is loaded.",
  "scenario 5": "At clock cycle 11, set load to 0. Confirm that the counter starts decrementing from the newly loaded value 3. Confirm the behavior of tc until the count reaches 0 again.",
  "scenario 6": "At clock cycle 12, simultaneously set load to 1 with a new data value of 10'b0000000101 (5 in decimal). Analyze how the DUT behaves while still counting down from the previous value of 0.",
  "scenario 7": "At clock cycle 13, set load to 0 again while the previous count is still ongoing. Verify tc until it reaches 0 and note any discrepancies in count behavior due to simultaneous load operations.",
  "scenario 8": "At clock cycle 19, set load to 1 with a data value of 10'b0000000001 (1 in decimal). Observe the counter loading operation and check how the terminal count reacts upon reaching 0 subsequently."
}

