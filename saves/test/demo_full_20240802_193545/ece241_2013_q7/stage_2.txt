############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
A JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.
// J | K | Q
// 0 | 0 | Qold
// 0 | 1 | 0
// 1 | 0 | 1
// 1 | 1 | ~Qold
RTL testbench specification:
{
  "important data": "A JK flip-flop needs to be designed based on a specific truth table. The behavior is defined as follows: If J and K are both 0, Q remains Qold. If J is 0 and K is 1, Q becomes 0. If J is 1 and K is 0, Q becomes 1. If both J and K are 1, Q toggles to the complement of Qold.",
  "technical specifications": [
    "1. DUT module header: module top_module (input clk, input j, input k, output reg Q)",
    "2. The DUT must include a clocked process that updates the output Q based on the values of J, K, and the previous state Qold at the rising edge of clk.",
    "3. Testbench should generate a clock signal to simulate the operation of the DUT.",
    "4. Testbench should provide stimulus for all combinations of J and K inputs (00, 01, 10, 11).",
    "5. For each combination of J and K, the testbench must check the output Q against the expected value based on the truth table.",
    "6. Include a reporting mechanism to indicate whether each test case passed or failed."
  ]
}
DUT header:
module top_module (
	input clk,
	input j,
	input k,
	output reg Q
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set J = 0 and K = 0. Wait for 1 clock cycle. This will test the condition where Q should remain Qold.",
  "scenario 2": "Set J = 0 and K = 1. Wait for 1 clock cycle. This will test the condition where Q should become 0.",
  "scenario 3": "Set J = 1 and K = 0. Wait for 1 clock cycle. This will test the condition where Q should become 1.",
  "scenario 4": "Set J = 1 and K = 1. Wait for 1 clock cycle. This will test the condition where Q should toggle to ~Qold.",
  "scenario 5": "Reset DUT by deasserting clock and setting J = 0 and K = 0. Then assert the clock for 1 clock cycle. Observe if Q remains unchanged.",
  "scenario 6": "Set J = 0 and K = 1, wait for 1 clock cycle, then set J = 1, K = 0 on the next clock cycle. Wait for 1 cycle and observe Q.",
  "scenario 7": "Set J = 1 and K = 1, wait for 1 clock cycle, then toggle K to 0 and J to 0. Wait for an additional clock cycle to observe the toggle effect."
}

