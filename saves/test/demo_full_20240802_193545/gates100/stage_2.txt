############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: 
// (1) out_and: output of a 100-input AND gate. 
// (2) out_or: output of a 100-input OR gate. 
// (3) out_xor: output of a 100-input XOR gate.


RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. Specification of the DUT: The DUT is a combinational circuit with 100 inputs and 3 outputs.",
    "2. Inputs: A 100-bit wide input vector named 'in', defined as in[99:0].",
    "3. Outputs: Three single-bit outputs: 'out_and', 'out_or', and 'out_xor'.",
    "4. Output 'out_and' is the result of a 100-input AND gate operation on the input vector 'in'.",
    "5. Output 'out_or' is the result of a 100-input OR gate operation on the input vector 'in'.",
    "6. Output 'out_xor' is the result of a 100-input XOR gate operation on the input vector 'in'."
  ]
}
DUT header:
module top_module (
	input [99:0] in,
	output out_and,
	output out_or,
	output out_xor
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set all 100 inputs (in[99:0]) to 0 at clock cycle 0. Wait for 1 clock cycle and capture the outputs.",
  "scenario 2": "Set all 100 inputs (in[99:0]) to 1 at clock cycle 1. Wait for 1 clock cycle and capture the outputs.",
  "scenario 3": "Set half of the inputs (in[49:0] = 1 and in[99:50] = 0) at clock cycle 2. Wait for 1 clock cycle and capture the outputs.",
  "scenario 4": "Set half of the inputs (in[49:0] = 0 and in[99:50] = 1) at clock cycle 3. Wait for 1 clock cycle and capture the outputs.",
  "scenario 5": "Set inputs in[99:0] with values alternating between 0 and 1 (e.g., in[99] = 0, in[98] = 1, ..., in[0] = 0) at clock cycle 4. Wait for 1 clock cycle and capture the outputs.",
  "scenario 6": "Set the first 50 inputs to 1 and the remaining 50 inputs to 0 (in[99:50] = 0, in[49:0] = 1) at clock cycle 5. Wait for 1 clock cycle and capture the outputs.",
  "scenario 7": "Randomly set inputs with a mix of 1's and 0's (e.g., in[99] = 1, in[98] = 0, in[97] = 1, ..., in[0] = 0) at clock cycle 6. Wait for 1 clock cycle and capture the outputs.",
  "scenario 8": "Set all inputs to a predetermined pattern (e.g., in[99:0] = 1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010) at clock cycle 7. Wait for 1 clock cycle and capture the outputs."
}

