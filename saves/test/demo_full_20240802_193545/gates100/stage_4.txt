############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out_and = %d, out_or = %d, out_xor = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out_and = %d, out_or = %d, out_xor = %d", "scenario: 1b, in = %d, out_and = %d, out_or = %d, out_xor = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [99:0] in,
	output out_and,
	output out_or,
	output out_xor
);

Your other information:
RTL circuit problem description:
Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: 
// (1) out_and: output of a 100-input AND gate. 
// (2) out_or: output of a 100-input OR gate. 
// (3) out_xor: output of a 100-input XOR gate.


RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. Specification of the DUT: The DUT is a combinational circuit with 100 inputs and 3 outputs.",
    "2. Inputs: A 100-bit wide input vector named 'in', defined as in[99:0].",
    "3. Outputs: Three single-bit outputs: 'out_and', 'out_or', and 'out_xor'.",
    "4. Output 'out_and' is the result of a 100-input AND gate operation on the input vector 'in'.",
    "5. Output 'out_or' is the result of a 100-input OR gate operation on the input vector 'in'.",
    "6. Output 'out_xor' is the result of a 100-input XOR gate operation on the input vector 'in'."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set all 100 inputs (in[99:0]) to 0 at clock cycle 0. Wait for 1 clock cycle and capture the outputs.",
  "scenario 2": "Set all 100 inputs (in[99:0]) to 1 at clock cycle 1. Wait for 1 clock cycle and capture the outputs.",
  "scenario 3": "Set half of the inputs (in[49:0] = 1 and in[99:50] = 0) at clock cycle 2. Wait for 1 clock cycle and capture the outputs.",
  "scenario 4": "Set half of the inputs (in[49:0] = 0 and in[99:50] = 1) at clock cycle 3. Wait for 1 clock cycle and capture the outputs.",
  "scenario 5": "Set inputs in[99:0] with values alternating between 0 and 1 (e.g., in[99] = 0, in[98] = 1, ..., in[0] = 0) at clock cycle 4. Wait for 1 clock cycle and capture the outputs.",
  "scenario 6": "Set the first 50 inputs to 1 and the remaining 50 inputs to 0 (in[99:50] = 0, in[49:0] = 1) at clock cycle 5. Wait for 1 clock cycle and capture the outputs.",
  "scenario 7": "Randomly set inputs with a mix of 1's and 0's (e.g., in[99] = 1, in[98] = 0, in[97] = 1, ..., in[0] = 0) at clock cycle 6. Wait for 1 clock cycle and capture the outputs.",
  "scenario 8": "Set all inputs to a predetermined pattern (e.g., in[99:0] = 1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010) at clock cycle 7. Wait for 1 clock cycle and capture the outputs."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out_and = %d, out_or = %d, out_xor = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out_and = %d, out_or = %d, out_xor = %d", "scenario: 1b, in = %d, out_and = %d, out_or = %d, out_xor = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns/1ns

module tb_top_module;

    reg [99:0] in;
    wire out_and;
    wire out_or;
    wire out_xor;

    // Instantiate the DUT
    top_module dut (
        .in(in),
        .out_and(out_and),
        .out_or(out_or),
        .out_xor(out_xor)
    );

    integer file;

    initial begin
        file = $fopen("TBout.txt", "w");
        
        // Scenario 1
        in = 100'b0;
        #1;
        $fdisplay(file, "scenario: 1, in = %d, out_and = %b, out_or = %b, out_xor = %b", in, out_and, out_or, out_xor);

        // Scenario 2
        in = 100'b1;
        #1;
        $fdisplay(file, "scenario: 2, in = %d, out_and = %b, out_or = %b, out_xor = %b", in, out_and, out_or, out_xor);

        // Scenario 3
        in = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001; // 49 bits 1, 51 bits 0
        #1;
        $fdisplay(file, "scenario: 3, in = %d, out_and = %b, out_or = %b, out_xor = %b", in, out_and, out_or, out_xor);

        // Scenario 4
        in = 100'b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000; // 51 bits 1, 49 bits 0
        #1;
        $fdisplay(file, "scenario: 4, in = %d, out_and = %b, out_or = %b, out_xor = %b", in, out_and, out_or, out_xor);

        // Scenario 5
        in = 100'b0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101; // Alternating
        #1;
        $fdisplay(file, "scenario: 5, in = %d, out_and = %b, out_or = %b, out_xor = %b", in, out_and, out_or, out_xor);

        // Scenario 6
        in = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111; // First 50 inputs 1, remaining 0
        #1;
        $fdisplay(file, "scenario: 6, in = %d, out_and = %b, out_or = %b, out_xor = %b", in, out_and, out_or, out_xor);

        // Scenario 7
        in = 100'b1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010; // Random pattern
        #1;
        $fdisplay(file, "scenario: 7, in = %d, out_and = %b, out_or = %b, out_xor = %b", in, out_and, out_or, out_xor);

        // Scenario 8
        in = 100'b1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010; // Preset pattern
        #1;
        $fdisplay(file, "scenario: 8, in = %d, out_and = %b, out_or = %b, out_xor = %b", in, out_and, out_or, out_xor);

        $fclose(file);
        $finish;
    end

endmodule
```

