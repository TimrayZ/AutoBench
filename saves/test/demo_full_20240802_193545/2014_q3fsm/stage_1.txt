############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. You are in the first stage. In this stage, please summarize the technical details of the DUT and give me a technical specification of the testbench generation task, so we can use it to design its corresponding testbench.
3. The core of testbench is the testcases. It usually include two parts logically: the input signals to the DUT and the expected result signals from DUT. The testbench will send the input signals to DUT and check if the result signals are the same as the expected result signals. If they are the same, this means the DUT is passed. Otherwise the DUT fails.
4. Your technical specification should include these sections:
- section 1: specification of the DUT, including the module header of the RTL code. If table or other detailed data is provided in the original problem description, DO repeat them in your response. They are very important!!!
5. your response should be in the form of JSON.
6. below is the information including the problem description and the DUT header:
RTL circuit problem description:
Consider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.
DUT header:
module top_module (
	input clk,
	input reset,
	input s,
	input w,
	output reg z
);

your response must be in JSON form. example:
{
  "important data": "...", # type: string. If no table, state transition or other direct data, leave this with ""
  "technical specifications": ["...", "...", ...] # each element of the list is one specification string, the starting of the string is its index 
}



########## assistant ##########
{
  "important data": "The FSM begins in a reset state called A, and it transitions to state B when s = 1. The FSM examines the input w over three clock cycles after entering state B. If w = 1 in exactly two of these cycles, the output z is set to 1 for the next clock cycle; otherwise, z is set to 0. The s input is only used in state A.",
  "technical specifications": [
    "1. The DUT executes a finite state machine design with two states: A (reset state) and B (checking state).",
    "2. The FSM transitions from state A to state B when input s = 1.",
    "3. In state B, the DUT will monitor input w for three clock cycles.",
    "4. Output z will be set to 1 if w is 1 in exactly two out of the three clock cycles; otherwise, z will be set to 0.",
    "5. The reset is active high and synchronous, meaning the FSM resets to state A when reset is high.",
    "6. The testbench needs to verify the DUT's behavior in all possible scenarios of input signals s and w."
  ]
}

