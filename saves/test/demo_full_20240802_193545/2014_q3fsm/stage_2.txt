############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Consider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.
RTL testbench specification:
{
  "important data": "The FSM begins in a reset state called A, and it transitions to state B when s = 1. The FSM examines the input w over three clock cycles after entering state B. If w = 1 in exactly two of these cycles, the output z is set to 1 for the next clock cycle; otherwise, z is set to 0. The s input is only used in state A.",
  "technical specifications": [
    "1. The DUT executes a finite state machine design with two states: A (reset state) and B (checking state).",
    "2. The FSM transitions from state A to state B when input s = 1.",
    "3. In state B, the DUT will monitor input w for three clock cycles.",
    "4. Output z will be set to 1 if w is 1 in exactly two out of the three clock cycles; otherwise, z will be set to 0.",
    "5. The reset is active high and synchronous, meaning the FSM resets to state A when reset is high.",
    "6. The testbench needs to verify the DUT's behavior in all possible scenarios of input signals s and w."
  ]
}
DUT header:
module top_module (
	input clk,
	input reset,
	input s,
	input w,
	output reg z
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set reset to high (reset = 1) for 1 clock cycle to initialize the FSM. After that, set reset to low (reset = 0) and ensure s = 0 to verify that the FSM remains in state A.",
  "scenario 2": "Set reset to high (reset = 1) for 1 clock cycle, then reset to low (reset = 0). Next, set s = 1 on the 2nd clock cycle to transition the FSM from state A to state B.",
  "scenario 3": "After transitioning to state B, drive w = 1 for the first clock cycle, w = 1 for the second clock cycle, and w = 0 for the third clock cycle. Monitor z output on the next clock cycle.",
  "scenario 4": "After transitioning to state B, drive w = 0 for the first clock cycle, w = 1 for the second clock cycle, and w = 1 for the third clock cycle. Monitor z output on the next clock cycle.",
  "scenario 5": "After transitioning to state B, drive w = 0 for the first clock cycle, w = 0 for the second clock cycle, and w = 1 for the third clock cycle. Monitor z output on the next clock cycle.",
  "scenario 6": "After transitioning to state B, drive w = 1 for the first clock cycle, w = 0 for the second clock cycle, and w = 0 for the third clock cycle. Monitor z output on the next clock cycle.",
  "scenario 7": "Set s back to 0 while in state B, and drive w = 1 for the first, second, and third clock cycles. Monitor z output on the next clock cycle.",
  "scenario 8": "Set reset to high (reset = 1) for 1 clock cycle. Then set reset to low (reset = 0) and s = 1 to transition to state B. Afterward, wait for 3 clock cycles without any changes to w and monitor z output.",
  "scenario 9": "In state A, set s = 1 and w = 0, and then reset to low after 1 clock cycle. Ensure that z remains unchanged in state A.",
  "scenario 10": "From state A, transition to state B, and set w = 1 for all 3 clock cycles. Monitor z output on the next clock cycle."
}

