############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, out = %d", "scenario: 1b, a = %d, b = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	input a, 
	input b,
	output out
);

Your other information:
RTL circuit problem description:
Create a module that implements a NOR gate.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "0: The DUT is a NOR gate module, which has two input signals (a, b) and one output signal (out).",
    "1: The output signal 'out' should be high (1) only when both input signals 'a' and 'b' are low (0).",
    "2: All possible combinations of the input signals 'a' and 'b' (00, 01, 10, 11) should be tested to verify the correct functionality of the NOR gate.",
    "3: The testbench should initialize the input signals, apply all combinations of inputs, and monitor the output against the expected results for each combination.",
    "4: The expected output for the input combinations is as follows: '00' -> 1, '01' -> 0, '10' -> 0, '11' -> 0."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Initialize inputs a and b to 0. Apply a = 0, b = 0 for 1 clock cycle.",
  "scenario 2": "Change inputs to a = 0, b = 1. Apply for 1 clock cycle.",
  "scenario 3": "Change inputs to a = 1, b = 0. Apply for 1 clock cycle.",
  "scenario 4": "Change inputs to a = 1, b = 1. Apply for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, out = %d", "scenario: 1b, a = %d, b = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // DUT signals
    reg a;
    reg b;
    wire out;

    // Instantiate the Device Under Test (DUT)
    top_module DUT (
        .a(a),
        .b(b),
        .out(out)
    );

    // File pointer for exporting signals
    integer fp;

    initial begin
        // Open the file for writing
        fp = $fopen("TBout.txt", "w");
        
        // Scenario 1
        a = 0; b = 0; 
        #1; 
        $fdisplay(fp, "scenario: 1, a = %d, b = %d, out = %d", a, b, out);

        // Scenario 2
        a = 0; b = 1; 
        #1; 
        $fdisplay(fp, "scenario: 2, a = %d, b = %d, out = %d", a, b, out);

        // Scenario 3
        a = 1; b = 0; 
        #1; 
        $fdisplay(fp, "scenario: 3, a = %d, b = %d, out = %d", a, b, out);

        // Scenario 4
        a = 1; b = 1; 
        #1; 
        $fdisplay(fp, "scenario: 4, a = %d, b = %d, out = %d", a, b, out);

        // Close the file
        $fclose(fp);
        $finish;
    end

endmodule
```

