############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in1 = %d, in2 = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in1 = %d, in2 = %d, out = %d", "scenario: 1b, in1 = %d, in2 = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input in1,
	input in2,
	output logic out
);

Your other information:
RTL circuit problem description:
Implement a 2-input NOR gate.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1: The DUT is a 2-input NOR gate which has the following functionality: the output (out) is high if both inputs (in1 and in2) are low.",
    "2: The module header for the DUT is as follows: module top_module (input in1, input in2, output logic out);",
    "3: The testbench should provide various combinations of inputs (in1 and in2) to test the NOR gate functionality.",
    "4: The expected results of the output (out) should be verified for each input combination: For (0, 0), expect out = 1; for (0, 1), expect out = 0; for (1, 0), expect out = 0; and for (1, 1), expect out = 0.",
    "5: The testbench should check if the output matches the expected values for all possible combinations of the inputs."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply inputs in1 = 0 and in2 = 0 for clock cycle 0.",
  "scenario 2": "Apply inputs in1 = 0 and in2 = 1 for clock cycle 1.",
  "scenario 3": "Apply inputs in1 = 1 and in2 = 0 for clock cycle 2.",
  "scenario 4": "Apply inputs in1 = 1 and in2 = 1 for clock cycle 3."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in1 = %d, in2 = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in1 = %d, in2 = %d, out = %d", "scenario: 1b, in1 = %d, in2 = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
module tb_top_module;

  reg in1;
  reg in2;
  wire out;

  // Instantiate the Device Under Test (DUT)
  top_module dut (
    .in1(in1),
    .in2(in2),
    .out(out)
  );

  // File descriptor for exporting signals
  integer file;

  initial begin
    // Open the output file
    file = $fopen("TBout.txt", "w");
    
    // Scenario 1: Apply inputs in1 = 0 and in2 = 0
    in1 = 0;
    in2 = 0;
    #1; // Delay to ensure signal stability
    $fdisplay(file, "scenario: 1, in1 = %d, in2 = %d, out = %d", in1, in2, out);

    // Scenario 2: Apply inputs in1 = 0 and in2 = 1
    in1 = 0;
    in2 = 1;
    #1; // Delay to ensure signal stability
    $fdisplay(file, "scenario: 2, in1 = %d, in2 = %d, out = %d", in1, in2, out);

    // Scenario 3: Apply inputs in1 = 1 and in2 = 0
    in1 = 1;
    in2 = 0;
    #1; // Delay to ensure signal stability
    $fdisplay(file, "scenario: 3, in1 = %d, in2 = %d, out = %d", in1, in2, out);

    // Scenario 4: Apply inputs in1 = 1 and in2 = 1
    in1 = 1;
    in2 = 1;
    #1; // Delay to ensure signal stability
    $fdisplay(file, "scenario: 4, in1 = %d, in2 = %d, out = %d", in1, in2, out);

    // Close the output file
    $fclose(file);
    
    // End the testbench
    $finish;
  end

endmodule
```

