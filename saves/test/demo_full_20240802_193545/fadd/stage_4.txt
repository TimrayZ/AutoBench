############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, cin = %d, cout = %d, sum = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, cin = %d, cout = %d, sum = %d", "scenario: 1b, a = %d, b = %d, cin = %d, cout = %d, sum = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input a,
	input b,
	input cin,
	output cout,
	output sum
);

Your other information:
RTL circuit problem description:
Create a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.
RTL testbench specification:
{
  "important data": "A full adder adds three bits (including carry-in) and produces a sum and carry-out.",
  "technical specifications": [
    "1. DUT module name: top_module",
    "2. Input signals: a (1 bit), b (1 bit), cin (1 bit) - total of 3 input bits",
    "3. Output signals: cout (1 bit), sum (1 bit) - total of 2 output bits",
    "4. Functionality: The DUT must correctly compute the sum and carry-out from the given inputs a, b, and cin.",
    "5. Expected behavior: For all combinations of a, b, and cin (0 or 1), the DUT's output signals (cout, sum) must match the predefined truth table for a full adder."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set inputs a, b, and cin to 0. Wait for 1 clock cycle to observe the outputs.",
  "scenario 2": "Set input a to 0, b to 0, and cin to 1. Wait for 1 clock cycle to observe the outputs.",
  "scenario 3": "Set input a to 0, b to 1, and cin to 0. Wait for 1 clock cycle to observe the outputs.",
  "scenario 4": "Set input a to 0, b to 1, and cin to 1. Wait for 1 clock cycle to observe the outputs.",
  "scenario 5": "Set input a to 1, b to 0, and cin to 0. Wait for 1 clock cycle to observe the outputs.",
  "scenario 6": "Set input a to 1, b to 0, and cin to 1. Wait for 1 clock cycle to observe the outputs.",
  "scenario 7": "Set input a to 1, b to 1, and cin to 0. Wait for 1 clock cycle to observe the outputs.",
  "scenario 8": "Set input a to 1, b to 1, and cin to 1. Wait for 1 clock cycle to observe the outputs."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, cin = %d, cout = %d, sum = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, cin = %d, cout = %d, sum = %d", "scenario: 1b, a = %d, b = %d, cin = %d, cout = %d, sum = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

  // Inputs
  reg a;
  reg b;
  reg cin;

  // Outputs
  wire cout;
  wire sum;

  // Instantiate the Device Under Test (DUT)
  top_module dut (
    .a(a),
    .b(b),
    .cin(cin),
    .cout(cout),
    .sum(sum)
  );

  integer file;

  initial begin
    // Open file for writing
    file = $fopen("TBout.txt", "w");

    // Scenario 1
    a = 0; b = 0; cin = 0;
    #1; // Wait for 1 time unit
    $fdisplay(file, "scenario: 1, a = %d, b = %d, cin = %d, cout = %d, sum = %d", a, b, cin, cout, sum);

    // Scenario 2
    a = 0; b = 0; cin = 1;
    #1;
    $fdisplay(file, "scenario: 2, a = %d, b = %d, cin = %d, cout = %d, sum = %d", a, b, cin, cout, sum);

    // Scenario 3
    a = 0; b = 1; cin = 0;
    #1;
    $fdisplay(file, "scenario: 3, a = %d, b = %d, cin = %d, cout = %d, sum = %d", a, b, cin, cout, sum);

    // Scenario 4
    a = 0; b = 1; cin = 1;
    #1;
    $fdisplay(file, "scenario: 4, a = %d, b = %d, cin = %d, cout = %d, sum = %d", a, b, cin, cout, sum);

    // Scenario 5
    a = 1; b = 0; cin = 0;
    #1;
    $fdisplay(file, "scenario: 5, a = %d, b = %d, cin = %d, cout = %d, sum = %d", a, b, cin, cout, sum);

    // Scenario 6
    a = 1; b = 0; cin = 1;
    #1;
    $fdisplay(file, "scenario: 6, a = %d, b = %d, cin = %d, cout = %d, sum = %d", a, b, cin, cout, sum);

    // Scenario 7
    a = 1; b = 1; cin = 0;
    #1;
    $fdisplay(file, "scenario: 7, a = %d, b = %d, cin = %d, cout = %d, sum = %d", a, b, cin, cout, sum);

    // Scenario 8
    a = 1; b = 1; cin = 1;
    #1;
    $fdisplay(file, "scenario: 8, a = %d, b = %d, cin = %d, cout = %d, sum = %d", a, b, cin, cout, sum);

    // Close file
    $fclose(file);
    $finish;
  end

endmodule
```

