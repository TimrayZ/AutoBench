############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input slowena,
	input reset,
	output reg [3:0] q);

Your other information:
RTL circuit problem description:
Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the "slowena" input if high indicates when the counter should increment. 
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Initialize the simulation with clk set to 0, slowena set to 0, and reset set to 0. After 5 clock cycles (clk high for 1 cycle and then low for 1 cycle), set reset high for 1 clock cycle and then return it to low.",
  "scenario 2": "Set slowena high after the reset has been released, and observe the counter incrementing on each clock cycle for 10 clock cycles. The clk should toggle every cycle.",
  "scenario 3": "Set slowena high for 5 clock cycles and then set it low for the next 5 clock cycles. Observe the output q during this time.",
  "scenario 4": "Set reset high at clock cycle 0, then return it low at clock cycle 1. Check that the output q is reset immediately and observe the output for 10 clock cycles while slowena is low.",
  "scenario 5": "Hold slowena high and simulate for 20 clock cycles while resetting the counter by setting reset high at clock cycle 10 and then low at clock cycle 11, continuing to check the output q.",
  "scenario 6": "Set slowena low and apply a series of reset pulses every 5 clock cycles, each lasting for 1 clock cycle. Ensure to toggle the clk appropriately."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  slowena;
reg  reset;
wire [3:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.slowena(slowena),
	.reset(reset),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, slowena = %d, reset = %d, q = %d", scenario, clk, slowena, reset, q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, slowena = %d, reset = %d, q = %d", scenario, clk, slowena, reset, q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  slowena;
reg  reset;
wire [3:0] q;

integer file, scenario;

// DUT instantiation
top_module DUT (
	.clk(clk),
	.slowena(slowena),
	.reset(reset),
	.q(q)
);

// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end

// Scenario Based Test
initial begin

    // Scenario 1
    scenario = 1;
    slowena = 0; reset = 0;
    #10; #10; #10; #10; #10; // 5 clock cycles
    reset = 1;
    #10; // reset high for 1 clock cycle
    reset = 0;
    #10; 
    $fdisplay(file, "[check]scenario: %d, clk = %d, slowena = %d, reset = %d, q = %d", scenario, clk, slowena, reset, q);

    // Scenario 2
    scenario = 2;
    slowena = 1; 
    repeat(10) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, slowena = %d, reset = %d, q = %d", scenario, clk, slowena, reset, q);
    end

    // Scenario 3
    scenario = 3;
    slowena = 1; 
    repeat(5) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, slowena = %d, reset = %d, q = %d", scenario, clk, slowena, reset, q);
    end
    slowena = 0; 
    repeat(5) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, slowena = %d, reset = %d, q = %d", scenario, clk, slowena, reset, q);
    end

    // Scenario 4
    scenario = 4;
    reset = 1; 
    #10; // reset high for 1 clock cycle
    reset = 0; 
    repeat(10) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, slowena = %d, reset = %d, q = %d", scenario, clk, slowena, reset, q);
    end

    // Scenario 5
    scenario = 5;
    slowena = 1; 
    repeat(20) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, slowena = %d, reset = %d, q = %d", scenario, clk, slowena, reset, q);
        if ($time == 100) begin // clock cycle 10
            reset = 1; 
            #10; // reset high for 1 clock cycle
            reset = 0; 
        end
    end

    // Scenario 6
    scenario = 6;
    slowena = 0; 
    repeat(20) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, slowena = %d, reset = %d, q = %d", scenario, clk, slowena, reset, q);
        if ($time % 50 == 0) begin // every 5 clock cycles
            reset = 1; 
            #10; // reset high for 1 clock cycle
            reset = 0; 
        end
    end
    
    $fclose(file);
    $finish;
end

endmodule
```

