############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.

// time            a                  q            
// 0ns             x                  x            
// 5ns             x                  x            
// 10ns            x                  x            
// 15ns            0               1232            
// 20ns            1               aee0            
// 25ns            2               27d4            
// 30ns            3               5a0e            
// 35ns            4               2066            
// 40ns            5               64ce            
// 45ns            6               c526            
// 50ns            7               2f19            
// 55ns            0               1232            
// 60ns            1               aee0            
// 65ns            2               27d4            
// 70ns            4               2066            
// 75ns            1               aee0            
// 80ns            1               aee0            
// 85ns            3               5a0e            
// 90ns            5               64ce            
RTL testbench specification:
{
  "important data": 
    "Time vs Input/Output Mapping: \n" 
        		
    	 	, 	"0ns" : {"a": "x", "q": "x"}, 
    	"5ns" : {"a": "x", "q": "x"}, 
    	"10ns": {"a": "x", "q": "x"}, 
    	"15ns": {"a": "0", "q": "1232"}, 
    	"20ns": {"a": "1", "q": "aee0"}, 
    	"25ns": {"a": "2", "q": "27d4"}, 
    	"30ns": {"a": "3", "q": "5a0e"}, 
    	"35ns": {"a": "4", "q": "2066"}, 
    	"40ns": {"a": "5", "q": "64ce"}, 
    	"45ns": {"a": "6", "q": "c526"}, 
    	"50ns": {"a": "7", "q": "2f19"}, 
    	"55ns": {"a": "0", "q": "1232"}, 
    	"60ns": {"a": "1", "q": "aee0"}, 
    	"65ns": {"a": "2", "q": "27d4"}, 
    	"70ns": {"a": "4", "q": "2066"}, 
    	"75ns": {"a": "1", "q": "aee0"}, 
    	"80ns": {"a": "1", "q": "aee0"}, 
    	"85ns": {"a": "3", "q": "5a0e"}, 
    	"90ns": {"a": "5", "q": "64ce"} 
   ,
  "technical specifications": [
    "1. DUT Name: top_module",
    "2. DUT Inputs: 1 x 3-bit input 'a'",
    "3. DUT Outputs: 1 x 16-bit output 'q'",
    "4. DUT Behavior: Combinational logic that maps input 'a' to output 'q' based on the given time versus input/output values.",
    "5. Number of test cases needed: At least 15 based on the provided time instances.",
    "6. Expected Output for each input 'a' at the respective time instance is given}"
  ]
}
DUT header:
module top_module (
	input [2:0] a, 
	output reg [15:0] q
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "At 0ns, set input 'a' to 'x'. Do not expect any output as the circuit is just starting.",
  "scenario 2": "At 5ns, keep input 'a' at 'x'. Maintain the same condition as the previous time.",
  "scenario 3": "At 10ns, still keep input 'a' at 'x'. No changes to report.",
  "scenario 4": "At 15ns, set input 'a' to binary '000' (0). Observe the output 'q'.",
  "scenario 5": "At 20ns, change input 'a' to binary '001' (1). Observe the output 'q'.",
  "scenario 6": "At 25ns, set input 'a' to binary '010' (2). Observe the output 'q'.",
  "scenario 7": "At 30ns, change input 'a' to binary '011' (3). Observe the output 'q'.",
  "scenario 8": "At 35ns, update input 'a' to binary '100' (4). Observe the output 'q'.",
  "scenario 9": "At 40ns, set input 'a' to binary '101' (5). Observe the output 'q'.",
  "scenario 10": "At 45ns, change input 'a' to binary '110' (6). Observe the output 'q'.",
  "scenario 11": "At 50ns, set input 'a' to binary '111' (7). Observe the output 'q'.",
  "scenario 12": "At 55ns, change input 'a' back to binary '000' (0). Observe the output 'q'.",
  "scenario 13": "At 60ns, set input 'a' to binary '001' (1). Observe the output 'q'.",
  "scenario 14": "At 65ns, set input 'a' to binary '010' (2). Observe the output 'q'.",
  "scenario 15": "At 70ns, change input 'a' to binary '100' (4). Observe the output 'q'.",
  "scenario 16": "At 75ns, change input 'a' to binary '001' (1). Observe the output 'q'.",
  "scenario 17": "At 80ns, keep input 'a' at binary '001' (1). Observe the output 'q'.",
  "scenario 18": "At 85ns, set input 'a' to binary '011' (3). Observe the output 'q'.",
  "scenario 19": "At 90ns, set input 'a' to binary '101' (5). Observe the output 'q'."
}

