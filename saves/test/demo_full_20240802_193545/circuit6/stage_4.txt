############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, q = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, q = %d", "scenario: 1b, a = %d, q = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [2:0] a, 
	output reg [15:0] q
);

Your other information:
RTL circuit problem description:
This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.

// time            a                  q            
// 0ns             x                  x            
// 5ns             x                  x            
// 10ns            x                  x            
// 15ns            0               1232            
// 20ns            1               aee0            
// 25ns            2               27d4            
// 30ns            3               5a0e            
// 35ns            4               2066            
// 40ns            5               64ce            
// 45ns            6               c526            
// 50ns            7               2f19            
// 55ns            0               1232            
// 60ns            1               aee0            
// 65ns            2               27d4            
// 70ns            4               2066            
// 75ns            1               aee0            
// 80ns            1               aee0            
// 85ns            3               5a0e            
// 90ns            5               64ce            
RTL testbench specification:
{
  "important data": 
    "Time vs Input/Output Mapping: \n" 
        		
    	 	, 	"0ns" : {"a": "x", "q": "x"}, 
    	"5ns" : {"a": "x", "q": "x"}, 
    	"10ns": {"a": "x", "q": "x"}, 
    	"15ns": {"a": "0", "q": "1232"}, 
    	"20ns": {"a": "1", "q": "aee0"}, 
    	"25ns": {"a": "2", "q": "27d4"}, 
    	"30ns": {"a": "3", "q": "5a0e"}, 
    	"35ns": {"a": "4", "q": "2066"}, 
    	"40ns": {"a": "5", "q": "64ce"}, 
    	"45ns": {"a": "6", "q": "c526"}, 
    	"50ns": {"a": "7", "q": "2f19"}, 
    	"55ns": {"a": "0", "q": "1232"}, 
    	"60ns": {"a": "1", "q": "aee0"}, 
    	"65ns": {"a": "2", "q": "27d4"}, 
    	"70ns": {"a": "4", "q": "2066"}, 
    	"75ns": {"a": "1", "q": "aee0"}, 
    	"80ns": {"a": "1", "q": "aee0"}, 
    	"85ns": {"a": "3", "q": "5a0e"}, 
    	"90ns": {"a": "5", "q": "64ce"} 
   ,
  "technical specifications": [
    "1. DUT Name: top_module",
    "2. DUT Inputs: 1 x 3-bit input 'a'",
    "3. DUT Outputs: 1 x 16-bit output 'q'",
    "4. DUT Behavior: Combinational logic that maps input 'a' to output 'q' based on the given time versus input/output values.",
    "5. Number of test cases needed: At least 15 based on the provided time instances.",
    "6. Expected Output for each input 'a' at the respective time instance is given}"
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "At 0ns, set input 'a' to 'x'. Do not expect any output as the circuit is just starting.",
  "scenario 2": "At 5ns, keep input 'a' at 'x'. Maintain the same condition as the previous time.",
  "scenario 3": "At 10ns, still keep input 'a' at 'x'. No changes to report.",
  "scenario 4": "At 15ns, set input 'a' to binary '000' (0). Observe the output 'q'.",
  "scenario 5": "At 20ns, change input 'a' to binary '001' (1). Observe the output 'q'.",
  "scenario 6": "At 25ns, set input 'a' to binary '010' (2). Observe the output 'q'.",
  "scenario 7": "At 30ns, change input 'a' to binary '011' (3). Observe the output 'q'.",
  "scenario 8": "At 35ns, update input 'a' to binary '100' (4). Observe the output 'q'.",
  "scenario 9": "At 40ns, set input 'a' to binary '101' (5). Observe the output 'q'.",
  "scenario 10": "At 45ns, change input 'a' to binary '110' (6). Observe the output 'q'.",
  "scenario 11": "At 50ns, set input 'a' to binary '111' (7). Observe the output 'q'.",
  "scenario 12": "At 55ns, change input 'a' back to binary '000' (0). Observe the output 'q'.",
  "scenario 13": "At 60ns, set input 'a' to binary '001' (1). Observe the output 'q'.",
  "scenario 14": "At 65ns, set input 'a' to binary '010' (2). Observe the output 'q'.",
  "scenario 15": "At 70ns, change input 'a' to binary '100' (4). Observe the output 'q'.",
  "scenario 16": "At 75ns, change input 'a' to binary '001' (1). Observe the output 'q'.",
  "scenario 17": "At 80ns, keep input 'a' at binary '001' (1). Observe the output 'q'.",
  "scenario 18": "At 85ns, set input 'a' to binary '011' (3). Observe the output 'q'.",
  "scenario 19": "At 90ns, set input 'a' to binary '101' (5). Observe the output 'q'."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, q = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, q = %d", "scenario: 1b, a = %d, q = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    reg [2:0] a;
    wire [15:0] q;

    // Instantiate DUT
    top_module DUT (
        .a(a),
        .q(q)
    );

    // File descriptor for output
    integer output_file;

    initial begin
        // Open the output file
        output_file = $fopen("TBout.txt", "w");

        // Test scenarios
        // Scenario 1
        a = 3'bx; 
        #5; 
        $fdisplay(output_file, "scenario: 1, a = %d, q = %d", a, q);

        // Scenario 2
        a = 3'bx;
        #5;
        $fdisplay(output_file, "scenario: 2, a = %d, q = %d", a, q);

        // Scenario 3
        a = 3'bx;
        #5;
        $fdisplay(output_file, "scenario: 3, a = %d, q = %d", a, q);

        // Scenario 4
        a = 3'b000; 
        #5; 
        $fdisplay(output_file, "scenario: 4, a = %d, q = %d", a, q);

        // Scenario 5
        a = 3'b001;
        #5;
        $fdisplay(output_file, "scenario: 5, a = %d, q = %d", a, q);

        // Scenario 6
        a = 3'b010; 
        #5; 
        $fdisplay(output_file, "scenario: 6, a = %d, q = %d", a, q);

        // Scenario 7
        a = 3'b011; 
        #5; 
        $fdisplay(output_file, "scenario: 7, a = %d, q = %d", a, q);

        // Scenario 8
        a = 3'b100; 
        #5; 
        $fdisplay(output_file, "scenario: 8, a = %d, q = %d", a, q);

        // Scenario 9
        a = 3'b101; 
        #5; 
        $fdisplay(output_file, "scenario: 9, a = %d, q = %d", a, q);

        // Scenario 10
        a = 3'b110; 
        #5; 
        $fdisplay(output_file, "scenario: 10, a = %d, q = %d", a, q);

        // Scenario 11
        a = 3'b111; 
        #5; 
        $fdisplay(output_file, "scenario: 11, a = %d, q = %d", a, q);

        // Scenario 12
        a = 3'b000; 
        #5; 
        $fdisplay(output_file, "scenario: 12, a = %d, q = %d", a, q);

        // Scenario 13
        a = 3'b001; 
        #5; 
        $fdisplay(output_file, "scenario: 13, a = %d, q = %d", a, q);

        // Scenario 14
        a = 3'b010; 
        #5; 
        $fdisplay(output_file, "scenario: 14, a = %d, q = %d", a, q);

        // Scenario 15
        a = 3'b100; 
        #5; 
        $fdisplay(output_file, "scenario: 15, a = %d, q = %d", a, q);

        // Scenario 16
        a = 3'b001; 
        #5; 
        $fdisplay(output_file, "scenario: 16, a = %d, q = %d", a, q);

        // Scenario 17
        a = 3'b001; 
        #5; 
        $fdisplay(output_file, "scenario: 17, a = %d, q = %d", a, q);

        // Scenario 18
        a = 3'b011; 
        #5; 
        $fdisplay(output_file, "scenario: 18, a = %d, q = %d", a, q);

        // Scenario 19
        a = 3'b101; 
        #5; 
        $fdisplay(output_file, "scenario: 19, a = %d, q = %d", a, q);

        // Close the output file
        $fclose(output_file);
        $finish;
    end

endmodule
```

