############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d", "scenario: 1b, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input a,
	input b,
	input sel_b1,
	input sel_b2,
	output out_assign,
	output reg out_always
);

Your other information:
RTL circuit problem description:
Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a 2-to-1 multiplexer (mux) that selects inputs a and b based on control signals sel_b1 and sel_b2.",
    "2. The module has the following I/O ports: input a, input b, input sel_b1, input sel_b2, output out_assign, output reg out_always.",
    "3. The output out_assign is determined using assign statements. It should output b when both sel_b1 and sel_b2 are true; otherwise, it should output a.",
    "4. The output out_always is determined using a procedural if statement, which also selects b if both sel_b1 and sel_b2 are true, and a otherwise.",
    "5. Testbench must apply various combinations of input signals (a, b, sel_b1, sel_b2) to verify that outputs out_assign and out_always behave correctly."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply a = 0, b = 0, sel_b1 = 0, sel_b2 = 0. Wait for 1 clock cycle to observe both outputs.",
  "scenario 2": "Apply a = 1, b = 0, sel_b1 = 0, sel_b2 = 0. Wait for 1 clock cycle to observe both outputs.",
  "scenario 3": "Apply a = 0, b = 1, sel_b1 = 0, sel_b2 = 0. Wait for 1 clock cycle to observe both outputs.",
  "scenario 4": "Apply a = 0, b = 0, sel_b1 = 1, sel_b2 = 0. Wait for 1 clock cycle to observe both outputs.",
  "scenario 5": "Apply a = 0, b = 0, sel_b1 = 0, sel_b2 = 1. Wait for 1 clock cycle to observe both outputs.",
  "scenario 6": "Apply a = 1, b = 1, sel_b1 = 1, sel_b2 = 1. Wait for 1 clock cycle to observe both outputs.",
  "scenario 7": "Apply a = 1, b = 0, sel_b1 = 1, sel_b2 = 1. Wait for 1 clock cycle to observe both outputs.",
  "scenario 8": "Apply a = 0, b = 1, sel_b1 = 1, sel_b2 = 1. Wait for 1 clock cycle to observe both outputs.",
  "scenario 9": "Apply a = 1, b = 1, sel_b1 = 0, sel_b2 = 0. Wait for 1 clock cycle to observe both outputs.",
  "scenario 10": "Apply a = 1, b = 0, sel_b1 = 0, sel_b2 = 1. Wait for 1 clock cycle to observe both outputs."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d", "scenario: 1b, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns/1ps

module tb_top_module;

    // Inputs
    reg a;
    reg b;
    reg sel_b1;
    reg sel_b2;

    // Outputs
    wire out_assign;
    wire out_always;

    // Instantiate the DUT
    top_module DUT (
        .a(a),
        .b(b),
        .sel_b1(sel_b1),
        .sel_b2(sel_b2),
        .out_assign(out_assign),
        .out_always(out_always)
    );

    // File to save output
    integer file;

    initial begin
        // Open the file 
        file = $fopen("TBout.txt", "w");

        // Test scenarios
        // Scenario 1
        a = 0; b = 0; sel_b1 = 0; sel_b2 = 0;
        #1; // Wait for 1 time unit
        $fdisplay(file, "scenario: 1, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d", a, b, sel_b1, sel_b2, out_assign, out_always);

        // Scenario 2
        a = 1; b = 0; sel_b1 = 0; sel_b2 = 0;
        #1;
        $fdisplay(file, "scenario: 2, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d", a, b, sel_b1, sel_b2, out_assign, out_always);

        // Scenario 3
        a = 0; b = 1; sel_b1 = 0; sel_b2 = 0;
        #1;
        $fdisplay(file, "scenario: 3, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d", a, b, sel_b1, sel_b2, out_assign, out_always);

        // Scenario 4
        a = 0; b = 0; sel_b1 = 1; sel_b2 = 0;
        #1;
        $fdisplay(file, "scenario: 4, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d", a, b, sel_b1, sel_b2, out_assign, out_always);

        // Scenario 5
        a = 0; b = 0; sel_b1 = 0; sel_b2 = 1;
        #1;
        $fdisplay(file, "scenario: 5, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d", a, b, sel_b1, sel_b2, out_assign, out_always);

        // Scenario 6
        a = 1; b = 1; sel_b1 = 1; sel_b2 = 1;
        #1;
        $fdisplay(file, "scenario: 6, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d", a, b, sel_b1, sel_b2, out_assign, out_always);

        // Scenario 7
        a = 1; b = 0; sel_b1 = 1; sel_b2 = 1;
        #1;
        $fdisplay(file, "scenario: 7, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d", a, b, sel_b1, sel_b2, out_assign, out_always);

        // Scenario 8
        a = 0; b = 1; sel_b1 = 1; sel_b2 = 1;
        #1;
        $fdisplay(file, "scenario: 8, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d", a, b, sel_b1, sel_b2, out_assign, out_always);

        // Scenario 9
        a = 1; b = 1; sel_b1 = 0; sel_b2 = 0;
        #1;
        $fdisplay(file, "scenario: 9, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d", a, b, sel_b1, sel_b2, out_assign, out_always);

        // Scenario 10
        a = 1; b = 0; sel_b1 = 0; sel_b2 = 1;
        #1;
        $fdisplay(file, "scenario: 10, a = %d, b = %d, sel_b1 = %d, sel_b2 = %d, out_assign = %d, out_always = %d", a, b, sel_b1, sel_b2, out_assign, out_always);

        // Close the file
        $fclose(file);
        $finish;
    end

endmodule
```

