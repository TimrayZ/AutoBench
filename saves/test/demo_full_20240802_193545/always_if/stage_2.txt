############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a 2-to-1 multiplexer (mux) that selects inputs a and b based on control signals sel_b1 and sel_b2.",
    "2. The module has the following I/O ports: input a, input b, input sel_b1, input sel_b2, output out_assign, output reg out_always.",
    "3. The output out_assign is determined using assign statements. It should output b when both sel_b1 and sel_b2 are true; otherwise, it should output a.",
    "4. The output out_always is determined using a procedural if statement, which also selects b if both sel_b1 and sel_b2 are true, and a otherwise.",
    "5. Testbench must apply various combinations of input signals (a, b, sel_b1, sel_b2) to verify that outputs out_assign and out_always behave correctly."
  ]
}
DUT header:
module top_module (
	input a,
	input b,
	input sel_b1,
	input sel_b2,
	output out_assign,
	output reg out_always
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Apply a = 0, b = 0, sel_b1 = 0, sel_b2 = 0. Wait for 1 clock cycle to observe both outputs.",
  "scenario 2": "Apply a = 1, b = 0, sel_b1 = 0, sel_b2 = 0. Wait for 1 clock cycle to observe both outputs.",
  "scenario 3": "Apply a = 0, b = 1, sel_b1 = 0, sel_b2 = 0. Wait for 1 clock cycle to observe both outputs.",
  "scenario 4": "Apply a = 0, b = 0, sel_b1 = 1, sel_b2 = 0. Wait for 1 clock cycle to observe both outputs.",
  "scenario 5": "Apply a = 0, b = 0, sel_b1 = 0, sel_b2 = 1. Wait for 1 clock cycle to observe both outputs.",
  "scenario 6": "Apply a = 1, b = 1, sel_b1 = 1, sel_b2 = 1. Wait for 1 clock cycle to observe both outputs.",
  "scenario 7": "Apply a = 1, b = 0, sel_b1 = 1, sel_b2 = 1. Wait for 1 clock cycle to observe both outputs.",
  "scenario 8": "Apply a = 0, b = 1, sel_b1 = 1, sel_b2 = 1. Wait for 1 clock cycle to observe both outputs.",
  "scenario 9": "Apply a = 1, b = 1, sel_b1 = 0, sel_b2 = 0. Wait for 1 clock cycle to observe both outputs.",
  "scenario 10": "Apply a = 1, b = 0, sel_b1 = 0, sel_b2 = 1. Wait for 1 clock cycle to observe both outputs."
}

