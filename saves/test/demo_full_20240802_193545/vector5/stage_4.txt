############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, e = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, e = %d, out = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, e = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input a,
	input b,
	input c,
	input d,
	input e,
	output [24:0] out
);

Your other information:
RTL circuit problem description:
Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.
RTL testbench specification:
{
  "important data": "Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example comparisons include out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[1] = ~e ^ d; out[0] = ~e ^ e.",
  "technical specifications": [
    "1. Module Header: module top_module (input a, input b, input c, input d, input e, output [24:0] out)",
    "2. Input signals: 5 one-bit inputs (a, b, c, d, e)",
    "3. Output signal: 25-bit output vector (out)",
    "4. Output logic: out[n] = ~(input1 ^ input2) where input1 and input2 are combined from inputs a, b, c, d, and e for all pairwise comparisons.",
    "5. Total number of comparisons: 25 pairs from 5 signals (each signal compared with every other, including itself).",
    "6. Expected output should match the condition where out[i] is 1 if the corresponding bits are equal and 0 otherwise."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set inputs a, b, c, d, e to 0, 0, 0, 0, 0 respectively. Wait for 1 clock cycle to observe output.",
  "scenario 2": "Set inputs a, b, c, d, e to 1, 1, 1, 1, 1 respectively. Wait for 1 clock cycle to observe output.",
  "scenario 3": "Set inputs a, b, c, d, e to 1, 0, 1, 0, 1 respectively. Wait for 1 clock cycle to observe output.",
  "scenario 4": "Set inputs a, b, c, d, e to 0, 1, 0, 1, 0 respectively. Wait for 1 clock cycle to observe output.",
  "scenario 5": "Set inputs a, b, c, d, e to 0, 0, 1, 1, 0 respectively. Wait for 1 clock cycle to observe output.",
  "scenario 6": "Set inputs a, b, c, d, e to 0, 1, 1, 0, 1 respectively. Wait for 1 clock cycle to observe output.",
  "scenario 7": "Set inputs a, b, c, d, e to 1, 1, 0, 0, 1 respectively. Wait for 1 clock cycle to observe output.",
  "scenario 8": "Set inputs a, b, c, d, e to 1, 1, 1, 0, 0 respectively. Wait for 1 clock cycle to observe output.",
  "scenario 9": "Set inputs a, b, c, d, e to random values, e.g., 1, 0, 0, 1, 0. Wait for 1 clock cycle to observe output.",
  "scenario 10": "Set inputs a, b, c, d, e to random values, e.g., 0, 0, 1, 1, 1. Wait for 1 clock cycle to observe output."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, e = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, e = %d, out = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, e = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Inputs
    reg a;
    reg b;
    reg c;
    reg d;
    reg e;

    // Outputs
    wire [24:0] out;

    // Instantiate the DUT
    top_module dut (
        .a(a),
        .b(b),
        .c(c),
        .d(d),
        .e(e),
        .out(out)
    );

    integer file;

    // Open the output file
    initial begin
        file = $fopen("TBout.txt", "w");
    end

    // Test scenarios
    initial begin
        // Scenario 1
        a = 0; b = 0; c = 0; d = 0; e = 0;
        #1;
        $fdisplay(file, "scenario: 1, a = %d, b = %d, c = %d, d = %d, e = %d, out = %b", a, b, c, d, e, out);

        // Scenario 2
        a = 1; b = 1; c = 1; d = 1; e = 1;
        #1;
        $fdisplay(file, "scenario: 2, a = %d, b = %d, c = %d, d = %d, e = %d, out = %b", a, b, c, d, e, out);

        // Scenario 3
        a = 1; b = 0; c = 1; d = 0; e = 1;
        #1;
        $fdisplay(file, "scenario: 3, a = %d, b = %d, c = %d, d = %d, e = %d, out = %b", a, b, c, d, e, out);

        // Scenario 4
        a = 0; b = 1; c = 0; d = 1; e = 0;
        #1;
        $fdisplay(file, "scenario: 4, a = %d, b = %d, c = %d, d = %d, e = %d, out = %b", a, b, c, d, e, out);

        // Scenario 5
        a = 0; b = 0; c = 1; d = 1; e = 0;
        #1;
        $fdisplay(file, "scenario: 5, a = %d, b = %d, c = %d, d = %d, e = %d, out = %b", a, b, c, d, e, out);

        // Scenario 6
        a = 0; b = 1; c = 1; d = 0; e = 1;
        #1;
        $fdisplay(file, "scenario: 6, a = %d, b = %d, c = %d, d = %d, e = %d, out = %b", a, b, c, d, e, out);

        // Scenario 7
        a = 1; b = 1; c = 0; d = 0; e = 1;
        #1;
        $fdisplay(file, "scenario: 7, a = %d, b = %d, c = %d, d = %d, e = %d, out = %b", a, b, c, d, e, out);

        // Scenario 8
        a = 1; b = 1; c = 1; d = 0; e = 0;
        #1;
        $fdisplay(file, "scenario: 8, a = %d, b = %d, c = %d, d = %d, e = %d, out = %b", a, b, c, d, e, out);

        // Scenario 9
        a = 1; b = 0; c = 0; d = 1; e = 0;
        #1;
        $fdisplay(file, "scenario: 9, a = %d, b = %d, c = %d, d = %d, e = %d, out = %b", a, b, c, d, e, out);

        // Scenario 10
        a = 0; b = 0; c = 1; d = 1; e = 1;
        #1;
        $fdisplay(file, "scenario: 10, a = %d, b = %d, c = %d, d = %d, e = %d, out = %b", a, b, c, d, e, out);
        
        // Close the output file
        $fclose(file);
        
        // End simulation
        $finish;
    end

endmodule
```

