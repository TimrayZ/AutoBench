############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, pos = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, pos = %d", "scenario: 1b, in = %d, pos = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [3:0] in,
	output reg [1:0] pos
);

Your other information:
RTL circuit problem description:
A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. DUT module header: module top_module (input [3:0] in, output reg [1:0] pos);",
    "2. The DUT takes a 4-bit input vector and outputs a 2-bit position representing the index of the highest-priority input bit set to 1.",
    "3. If no input bits are set (input = 4'b0000), the output must also be 2'b00.",
    "4. The DUT must support all 16 possible combinations of the 4-bit input.",
    "5. The output position should be the index of the first '1' bit from the left (highest index priority) if an input is high."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set input to 4'b0000 and wait for 1 clock cycle.",
  "scenario 2": "Set input to 4'b0001 and wait for 1 clock cycle.",
  "scenario 3": "Set input to 4'b0010 and wait for 1 clock cycle.",
  "scenario 4": "Set input to 4'b0100 and wait for 1 clock cycle.",
  "scenario 5": "Set input to 4'b1000 and wait for 1 clock cycle.",
  "scenario 6": "Set input to 4'b0011 and wait for 1 clock cycle.",
  "scenario 7": "Set input to 4'b0101 and wait for 1 clock cycle.",
  "scenario 8": "Set input to 4'b1001 and wait for 1 clock cycle.",
  "scenario 9": "Set input to 4'b0110 and wait for 1 clock cycle.",
  "scenario 10": "Set input to 4'b1010 and wait for 1 clock cycle.",
  "scenario 11": "Set input to 4'b1100 and wait for 1 clock cycle.",
  "scenario 12": "Set input to 4'b1011 and wait for 1 clock cycle.",
  "scenario 13": "Set input to 4'b1101 and wait for 1 clock cycle.",
  "scenario 14": "Set input to 4'b1110 and wait for 1 clock cycle.",
  "scenario 15": "Set input to 4'b1111 and wait for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, pos = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, pos = %d", "scenario: 1b, in = %d, pos = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Inputs
    reg [3:0] in;

    // Outputs
    wire [1:0] pos;

    // Instantiate the DUT
    top_module uut (
        .in(in),
        .pos(pos)
    );

    // File handle
    integer file;

    initial begin
        // Open the output file
        file = $fopen("TBout.txt", "w");

        // Test scenarios
        run_scenario(1, 4'b0000);
        run_scenario(2, 4'b0001);
        run_scenario(3, 4'b0010);
        run_scenario(4, 4'b0100);
        run_scenario(5, 4'b1000);
        run_scenario(6, 4'b0011);
        run_scenario(7, 4'b0101);
        run_scenario(8, 4'b1001);
        run_scenario(9, 4'b0110);
        run_scenario(10, 4'b1010);
        run_scenario(11, 4'b1100);
        run_scenario(12, 4'b1011);
        run_scenario(13, 4'b1101);
        run_scenario(14, 4'b1110);
        run_scenario(15, 4'b1111);

        // Close the output file
        $fclose(file);
        $finish;
    end

    // Task to run scenario and print results
    task run_scenario;
        input [3:0] scenario_num;
        input [3:0] test_input;

        begin
            in = test_input;
            #1; // Wait for 1 time unit for the signals to stabilize
            $fdisplay(file, "scenario: %0d, in = %d, pos = %d", scenario_num, in, pos);
        end
    endtask

endmodule
```

