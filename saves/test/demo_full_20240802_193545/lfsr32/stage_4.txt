############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input reset,
	output reg [31:0] q);

Your other information:
RTL circuit problem description:
A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a "tap" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Initialize the testbench with reset high for 1 clock cycle, then bring reset low to start the LFSR operation. Observe the output q after the reset.",
  "scenario 2": "After the initial reset, let the clock run for 10 clock cycles and observe how output q changes with each rising edge of clk.",
  "scenario 3": "Apply reset high again during the 5th clock cycle for 1 clock cycle and then release it. Check if q resets to 32'h1 after the reset.",
  "scenario 4": "Allow the DUT to run for 15 clock cycles following the second reset and record the changes in output q.",
  "scenario 5": "Check the output q by applying a reset at clock cycle 3 and 4 in succession, each for 1 clock cycle. Confirm if q is maintained at 32'h1 after both resets.",
  "scenario 6": "Run the DUT for 20 clock cycles without any reset and document the output q at each clock cycle. This will assess the functionality of the taps based on the previous state.",
  "scenario 7": "Introduce random input to reset (high and low) at different clock cycles (4, 10, and 15) for 1 clock cycle each. After each reset, check that q returns to 32'h1.",
  "scenario 8": "After an initial reset, run the DUT for 32 clock cycles, and verify that the output keeps cycling through the expected values as determined by the taps.",
  "scenario 9": "Run the simulation with the reset held low for 5 clock cycles, then set it high for 1 clock cycle in cycle 6. Confirm the output q matches the expected state after the reset."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
wire [31:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
wire [31:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
    .clk(clk),
    .reset(reset),
    .q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    reset = 1;
    #10;
    reset = 0;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);

    // scenario 2
    scenario = 2;
    repeat(10) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    end

    // scenario 3
    scenario = 3;
    #10;
    reset = 1;
    #10;
    reset = 0;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);

    // scenario 4
    scenario = 4;
    repeat(15) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    end

    // scenario 5
    scenario = 5;
    reset = 1;
    #10;
    reset = 0; 
    #10; 
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);

    // scenario 6
    scenario = 6;
    repeat(20) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    end

    // scenario 7
    scenario = 7;
    reset = 1;
    #10;
    reset = 0; 
    #10;
    reset = 1;
    #10;
    reset = 0; 
    #10;
    reset = 1;
    #10;
    reset = 0; 
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);

    // scenario 8
    scenario = 8;
    reset = 0; 
    repeat(32) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    end

    // scenario 9
    scenario = 9;
    reset = 0; 
    #50; // hold low for 5 clock cycles
    reset = 1; 
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);

    $fclose(file);
    $finish;
end

endmodule
```

