############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. You are in the first stage. In this stage, please summarize the technical details of the DUT and give me a technical specification of the testbench generation task, so we can use it to design its corresponding testbench.
3. The core of testbench is the testcases. It usually include two parts logically: the input signals to the DUT and the expected result signals from DUT. The testbench will send the input signals to DUT and check if the result signals are the same as the expected result signals. If they are the same, this means the DUT is passed. Otherwise the DUT fails.
4. Your technical specification should include these sections:
- section 1: specification of the DUT, including the module header of the RTL code. If table or other detailed data is provided in the original problem description, DO repeat them in your response. They are very important!!!
5. your response should be in the form of JSON.
6. below is the information including the problem description and the DUT header:
RTL circuit problem description:
A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a "tap" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.
DUT header:
module top_module(
	input clk,
	input reset,
	output reg [31:0] q);

your response must be in JSON form. example:
{
  "important data": "...", # type: string. If no table, state transition or other direct data, leave this with ""
  "technical specifications": ["...", "...", ...] # each element of the list is one specification string, the starting of the string is its index 
}



########## assistant ##########
{
  "important data": "A 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset is active high synchronous, output q should reset to 32'h1.",
  "technical specifications": [
    "0: Duty cycle - The DUT should operate on the rising edge of the clk signal and reset on the rising edge of the reset signal.",
    "1: Reset behavior - When reset is high, the output q should be set to 32'h1, overriding any current state.",
    "2: Taps - The next state of q is computed using XOR of bits at positions 32, 22, 2, and 1. This behavior needs to be verified.",
    "3: Output verification - The testbench must check if the output q matches expected values for various input sequences after reset.",
    "4: Clock cycles - The testbench should run for a sufficient number of clock cycles to ensure that the LFSR produces expected outputs based on the sequence.",
    "5: Edge case - Include test cases for reset at various clock cycles to ensure synchronous reset functionality works as intended."
  ]
}

