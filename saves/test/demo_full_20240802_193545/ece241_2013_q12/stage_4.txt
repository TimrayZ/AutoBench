############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module (
	input clk,
	input enable,
	input S,
	input A,
	input B,
	input C,
	output reg Z
);

Your other information:
RTL circuit problem description:
In this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is "random access", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. 
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Initialize the DUT with clk = 0, enable = 0, S = 0, A = 0, B = 0, C = 0. Wait for 1 clock cycle.",
  "scenario 2": "Set enable = 1, input S = 1. Shift in the value (1) into the shift register. Wait for 1 clock cycle. Then set enable = 0. Wait for 1 clock cycle.",
  "scenario 3": "Set enable = 1, input S = 0. Shift in the value (0) into the shift register. Wait for 1 clock cycle. Then set enable = 0. Wait for 1 clock cycle.",
  "scenario 4": "Set enable = 1, input S = 1. Shift in the value (1) into the shift register. Wait for 1 clock cycle. Set enable = 1, input S = 0. Shift in the value (0) into the shift register. Wait for 1 clock cycle. Set enable = 0. Wait for 1 clock cycle.",
  "scenario 5": "Set enable = 1, input S = 1. Shift in the value (1) into the first position (MSB). Wait for 1 clock cycle. Then set enable = 1, input S = 0. Shift in the value (0). Wait for 1 clock cycle. Set enable = 0. Wait for 1 clock cycle.",
  "scenario 6": "Change inputs A, B, C combinations in the following order: Set A = 0, B = 0, C = 1 and check Z. Wait for 1 clock cycle. Set A = 0, B = 1, C = 0 and check Z. Wait for 1 clock cycle. Set A = 1, B = 0, C = 0 and check Z. Wait for 1 clock cycle.",
  "scenario 7": "Set all input combinations for A, B, C from 000 to 111 while applying a test pattern in S. Specifically, set enable = 1, input S = 1 for the first 4 cycles, then input S = 0 for the next 4 clock cycles, each followed by a wait period of 1 clock cycle for verification.",
  "scenario 8": "After performing full shifts and checking output Z, reset the DUT by setting enable = 0. Wait for 2 clock cycles.",
  "scenario 9": "Finally, apply random sequence by toggling inputs A, B, C to test their effects on Z multiple times, ensuring S is driven high and low appropriately between actions, each followed by 1 clock cycle of wait time."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  enable;
reg  S;
reg  A;
reg  B;
reg  C;
wire  Z;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.enable(enable),
	.S(S),
	.A(A),
	.B(B),
	.C(C),
	.Z(Z)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  enable;
reg  S;
reg  A;
reg  B;
reg  C;
wire  Z;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.enable(enable),
	.S(S),
	.A(A),
	.B(B),
	.C(C),
	.Z(Z)
);

// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end

// Scenario Based Test
initial begin
    // Scenario 1
    scenario = 1;
    enable = 0; S = 0; A = 0; B = 0; C = 0;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);

    // Scenario 2
    scenario = 2;
    enable = 1; S = 1; 
    #10;
    enable = 0; 
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);

    // Scenario 3
    scenario = 3;
    enable = 1; S = 0; 
    #10;
    enable = 0; 
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);

    // Scenario 4
    scenario = 4;
    enable = 1; S = 1; 
    #10;
    enable = 1; S = 0; 
    #10;
    enable = 0; 
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);

    // Scenario 5
    scenario = 5;
    enable = 1; S = 1; 
    #10;
    enable = 1; S = 0; 
    #10;
    enable = 0; 
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);

    // Scenario 6
    scenario = 6;
    A = 0; B = 0; C = 1; 
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);
    A = 0; B = 1; C = 0; 
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);
    A = 1; B = 0; C = 0; 
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);

    // Scenario 7
    scenario = 7;
    enable = 1; 
    repeat(4) begin
        S = 1; 
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);
    end
    repeat(4) begin
        S = 0; 
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);
    end

    // Scenario 8
    scenario = 8;
    enable = 0; 
    #20;
    $fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);

    // Scenario 9
    scenario = 9;
    repeat(4) begin
        A = $urandom_range(0, 1); 
        B = $urandom_range(0, 1); 
        C = $urandom_range(0, 1); 
        S = $urandom_range(0, 1); 
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, enable = %d, S = %d, A = %d, B = %d, C = %d, Z = %d", scenario, clk, enable, S, A, B, C, Z);
    end

    $fclose(file);
    $finish;
end

endmodule
```

