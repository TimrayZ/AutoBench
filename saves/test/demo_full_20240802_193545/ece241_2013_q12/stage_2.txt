############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
In this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is "random access", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. 
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is an 8x1 memory realized with an 8-bit shift register and logic functions based on the inputs A, B, and C.",
    "2. The module header of the DUT is: module top_module (input clk, input enable, input S, input A, input B, input C, output reg Z);",
    "3. The shift register consists of 8 D-type flip-flops labeled Q[0] to Q[7].",
    "4. The input S feeds the MSB to Q[0], and the enable input is synchronous and controls the shifting process.",
    "5. The output Z is determined by the combination of inputs A, B, and C, specifically as follows: when ABC is 000, Z=Q[0]; when ABC is 001, Z=Q[1]; when ABC is 010, Z=Q[2]; when ABC is 011, Z=Q[3]; when ABC is 100, Z=Q[4]; when ABC is 101, Z=Q[5]; when ABC is 110, Z=Q[6]; when ABC is 111, Z=Q[7]."
  ]
}
DUT header:
module top_module (
	input clk,
	input enable,
	input S,
	input A,
	input B,
	input C,
	output reg Z
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Initialize the DUT with clk = 0, enable = 0, S = 0, A = 0, B = 0, C = 0. Wait for 1 clock cycle.",
  "scenario 2": "Set enable = 1, input S = 1. Shift in the value (1) into the shift register. Wait for 1 clock cycle. Then set enable = 0. Wait for 1 clock cycle.",
  "scenario 3": "Set enable = 1, input S = 0. Shift in the value (0) into the shift register. Wait for 1 clock cycle. Then set enable = 0. Wait for 1 clock cycle.",
  "scenario 4": "Set enable = 1, input S = 1. Shift in the value (1) into the shift register. Wait for 1 clock cycle. Set enable = 1, input S = 0. Shift in the value (0) into the shift register. Wait for 1 clock cycle. Set enable = 0. Wait for 1 clock cycle.",
  "scenario 5": "Set enable = 1, input S = 1. Shift in the value (1) into the first position (MSB). Wait for 1 clock cycle. Then set enable = 1, input S = 0. Shift in the value (0). Wait for 1 clock cycle. Set enable = 0. Wait for 1 clock cycle.",
  "scenario 6": "Change inputs A, B, C combinations in the following order: Set A = 0, B = 0, C = 1 and check Z. Wait for 1 clock cycle. Set A = 0, B = 1, C = 0 and check Z. Wait for 1 clock cycle. Set A = 1, B = 0, C = 0 and check Z. Wait for 1 clock cycle.",
  "scenario 7": "Set all input combinations for A, B, C from 000 to 111 while applying a test pattern in S. Specifically, set enable = 1, input S = 1 for the first 4 cycles, then input S = 0 for the next 4 clock cycles, each followed by a wait period of 1 clock cycle for verification.",
  "scenario 8": "After performing full shifts and checking output Z, reset the DUT by setting enable = 0. Wait for 2 clock cycles.",
  "scenario 9": "Finally, apply random sequence by toggling inputs A, B, C to test their effects on Z multiple times, ensuring S is driven high and low appropriately between actions, each followed by 1 clock cycle of wait time."
}

