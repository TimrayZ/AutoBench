############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
You are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: 
// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. 
// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. 
// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1: The DUT is defined as a module named 'top_module' with a four-bit input vector 'in[3:0]'.",
    "2: The DUT has three output vectors: 'out_both[2:0]', 'out_any[3:1]', and 'out_different[3:0]'.",
    "3: 'out_both[i]' will be '1' if both 'in[i]' and 'in[i+1]' are '1', for i = 0 to 2. 'out_both[3]' is not needed.",
    "4: 'out_any[i]' will be '1' if either 'in[i]' or 'in[i-1]' is '1', for i = 1 to 3. 'out_any[0]' is not needed.",
    "5: 'out_different[i]' will be '1' if 'in[i]' is different from 'in[i+1]', where 'in[3]' wraps around to compare with 'in[0]'.",
    "6: The testbench needs to apply various test cases to validate the outputs generated by the DUT based on the given input scenarios."
  ]
}
DUT header:
module top_module (
	input [3:0] in,
	output [2:0] out_both,
	output [3:1] out_any,
	output [3:0] out_different
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set in = 4'b0000. Wait for 1 clock cycle.",
  "scenario 2": "Set in = 4'b1111. Wait for 1 clock cycle.",
  "scenario 3": "Set in = 4'b1010. Wait for 1 clock cycle.",
  "scenario 4": "Set in = 4'b0101. Wait for 1 clock cycle.",
  "scenario 5": "Set in = 4'b1100. Wait for 1 clock cycle.",
  "scenario 6": "Set in = 4'b0011. Wait for 1 clock cycle.",
  "scenario 7": "Set in = 4'b0110. Wait for 1 clock cycle.",
  "scenario 8": "Set in = 4'b1001. Wait for 1 clock cycle.",
  "scenario 9": "Set in = 4'b1110. Wait for 1 clock cycle.",
  "scenario 10": "Set in = 4'b0001. Wait for 1 clock cycle."
}

