############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.

// time            clk             a               q               
// 0ns             0               1               x               
// 5ns             1               1               4               
// 10ns            0               1               4               
// 15ns            1               1               4               
// 20ns            0               1               4               
// 25ns            1               1               4               
// 30ns            0               1               4               
// 35ns            1               1               4               
// 40ns            0               1               4               
// 45ns            1               0               4               
// 50ns            0               0               4               
// 55ns            1               0               5               
// 60ns            0               0               5               
// 65ns            1               0               6               
// 70ns            0               0               6               
// 75ns            1               0               0               
// 80ns            0               0               0               
// 85ns            1               0               1               
// 90ns            0               0               1               
RTL testbench specification:
{
  "important data": "The DUT is a sequential circuit that outputs a 3-bit register value 'q' based on the clock signal 'clk' and input signal 'a'. The simulation waveforms show that for an initial input of '1', the output stabilizes at '4' until the input 'a' transitions to '0', subsequently altering the state of 'q' across several time intervals.",
  "technical specifications": [
    "1. The DUT has inputs: 'clk' (clock signal), 'a' (input signal).",
    "2. The DUT has one output: 'q' (3-bit register).",
    "3. The output 'q' holds its state across clock cycles, changing only based on the input 'a' according to the timing behavior described in the waveform data.",
    "4. The testbench will apply the clock signal with specified rising and falling edges as described, and will provide input transitions for 'a'.",
    "5. The testbench will check the output 'q' after each clock cycle against the expected values derived from the waveform data."
  ]
}
DUT header:
module top_module (
	input clk,
	input a, 
	output reg [2:0] q
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "At time 0ns, initialize the clock (clk) signal to 0 and input 'a' to 1. Begin the clock signal with a rising edge at 5ns.",
  "scenario 2": "At clock cycle 1 (15ns), maintain 'a' at 1. Observe the output 'q' after the rising edge.",
  "scenario 3": "At clock cycle 2 (25ns), keep 'a' at 1. Observe the output 'q' after the rising edge.",
  "scenario 4": "At clock cycle 3 (35ns), still hold 'a' at 1. Observe the output 'q' after the rising edge.",
  "scenario 5": "At clock cycle 4 (45ns), change 'a' from 1 to 0 before the rising edge. Observe the output 'q' after the rising edge.",
  "scenario 6": "At clock cycle 5 (55ns), maintain 'a' at 0. Observe the output 'q' after the rising edge.",
  "scenario 7": "At clock cycle 6 (65ns), still keep 'a' at 0. Observe the output 'q' after the rising edge.",
  "scenario 8": "At clock cycle 7 (75ns), change 'a' from 0 to 1 before the rising edge. Observe the output 'q' after the rising edge.",
  "scenario 9": "At clock cycle 8 (85ns), maintain 'a' at 1. Observe the output 'q' after the rising edge."
}

