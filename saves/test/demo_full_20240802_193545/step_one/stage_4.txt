############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, one = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, one = %d", "scenario: 1b, one = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	output one);

Your other information:
RTL circuit problem description:
Build a circuit with no inputs and one output. That output should always drive 1 (or logic high).
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a simple combinational circuit with no inputs and one output.",
    "2. The output of the DUT, named 'one', should always drive a logic high (1).",
    "3. The module header for the DUT is 'module top_module(output one);'.",
    "4. The testbench should instantiate the 'top_module' DUT.",
    "5. Upon instantiation, the testbench should check that the output signal 'one' consistently equals 1 throughout the simulation."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Instantiate the DUT and monitor the output 'one' immediately after the simulation starts. Check the output during the first clock cycle (0 to 10ns).",
  "scenario 2": "Continue monitoring the output 'one' for the next 10 clock cycles (10ns to 100ns) to ensure it remains at logic high.",
  "scenario 3": "Observe the output 'one' after 100ns for an additional 100ns (from 100ns to 200ns), ensuring the output stays high throughout this period.",
  "scenario 4": "Perform a final check at 200ns and 300ns to confirm that the output 'one' still maintains a logic high state during these intervals."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, one = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, one = %d", "scenario: 1b, one = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns/1ps

module tb_top_module;
    // DUT instantiation
    wire one;

    top_module DUT (
        .one(one)
    );

    // File descriptor
    integer fd;

    initial begin
        // Open the output file
        fd = $fopen("TBout.txt", "w");

        // Scenario 1: Monitor output 'one' immediately after simulation starts
        #10; // Delay to ensure signals are stable
        $fdisplay(fd, "scenario: 1, one = %d", one);

        // Scenario 2: Monitor output 'one' for the next 10 clock cycles (10ns to 100ns)
        repeat (10) begin
            #10; // Delay for the next time point
            $fdisplay(fd, "scenario: 2, one = %d", one);
        end

        // Scenario 3: Observe output 'one' after 100ns for an additional 100ns
        #100; // Delay for the duration
        #10; // Delay to ensure signals are stable
        $fdisplay(fd, "scenario: 3, one = %d", one);

        // Scenario 4: Final checks at 200ns and 300ns
        #90; // Delay to reach 300ns
        #10; // Delay to ensure signals are stable
        $fdisplay(fd, "scenario: 4a, one = %d", one); // At 200ns
        #100; // Delay to reach 300ns
        #10; // Delay to ensure signals are stable
        $fdisplay(fd, "scenario: 4b, one = %d", one); // At 300ns

        // Close the output file
        $fclose(fd);
        $finish;
    end
endmodule
```

