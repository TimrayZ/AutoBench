############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.

// OFF (out=0) --j=0--> OFF
// OFF (out=0) --j=1--> ON
// ON (out=1) --k=0--> ON
// ON (out=1) --k=1--> OFF
RTL header:
module top_module (
	input clk,
	input j,
	input k,
	input areset,
	output out
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
	input clk,
	input j,
	input k,
	input areset,
	output reg out
);

	typedef enum reg [1:0] {
		OFF = 2'b00,
		ON  = 2'b01
	} state_t;
	
	state_t state, next_state;

	// Asynchronous reset
	always @(posedge clk or posedge areset) begin
		if (areset) begin
			state <= OFF;
		end else begin
			state <= next_state;
		end
	end

	// Next state logic
	always @(*) begin
		case(state)
			OFF: begin
				if (j == 1) begin
					next_state = ON;
				end else begin
					next_state = OFF;
				end
			end
			ON: begin
				if (k == 1) begin
					next_state = OFF;
				end else begin
					next_state = ON;
				end
			end
			default: next_state = OFF; // Default state
		endcase
	end

	// Output logic
	always @(*) begin
		case(state)
			OFF: out = 0;
			ON:  out = 1;
			default: out = 0; // Default output
		endcase
	end

endmodule
```

