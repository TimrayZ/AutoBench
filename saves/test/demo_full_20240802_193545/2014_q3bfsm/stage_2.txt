############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.

// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z
// 000 | 000, 001 | 0
// 001 | 001, 100 | 0
// 010 | 010, 001 | 0
// 011 | 001, 010 | 1
// 100 | 011, 100 | 1

RTL testbench specification:
{
  "important data": "Given the state-assigned table for the finite-state machine (FSM):\n Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n 000 | 000, 001 | 0\n 001 | 001, 100 | 0\n 010 | 010, 001 | 0\n 011 | 001, 010 | 1\n 100 | 011, 100 | 1\nAlso, the DUT header is module top_module (input clk, input reset, input x, output reg z).",
  "technical specifications": [
    "1. The testbench should instantiate the DUT with appropriate signals: clk, reset, x, and z.",
    "2. Reset the FSM synchronously active high to state 000 when reset is asserted at the positive edge of clk.",
    "3. Apply various combinations of the input signal x (0 and 1) during each clock cycle to transition between states based on the state transition table provided.",
    "4. Capture the output z for the current state and input combination and compare it against the expected output derived from the state transition table.",
    "5. Use a defined number of cycles to test all possible input combinations and verify the state transitions and outputs to ensure the DUT behaves correctly under all conditions."
  ]
}
DUT header:
module top_module (
	input clk,
	input reset,
	input x,
	output reg z
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Assert reset high at clk cycle 0 (reset = 1) to reset the FSM to state 000. After one clock cycle (clk cycle 1), de-assert reset (reset = 0).",
  "scenario 2": "At clk cycle 2, apply x = 0 while in state 000. Observe the state transition at the next clock cycle (clk cycle 3).",
  "scenario 3": "At clk cycle 4, apply x = 1 while in state 000. Observe the state transition at the next clock cycle (clk cycle 5).",
  "scenario 4": "At clk cycle 6, apply x = 1 while in state 001. Observe the state transition at the next clock cycle (clk cycle 7).",
  "scenario 5": "At clk cycle 8, apply x = 0 while in state 001. Observe at the next clock cycle (clk cycle 9).",
  "scenario 6": "At clk cycle 10, apply x = 1 while in state 010. Observe at the next clock cycle (clk cycle 11).",
  "scenario 7": "At clk cycle 12, apply x = 0 while in state 011. Observe the state transition at the next clock cycle (clk cycle 13).",
  "scenario 8": "At clk cycle 14, apply x = 1 while in state 011. Observe the state transition at the next clock cycle (clk cycle 15).",
  "scenario 9": "At clk cycle 16, apply x = 1 while in state 100. Observe the state transition at the next clock cycle (clk cycle 17).",
  "scenario 10": "At clk cycle 18, apply x = 0 while in state 100. Observe the state transition at the next clock cycle (clk cycle 19).",
  "scenario 11": "At clk cycle 20, reapply x = 0 while in state 011 to verify the consistency of the output and state at clk cycle 21.",
  "scenario 12": "At clk cycle 22, apply x = 1 while in state 010. Observe at the next clock cycle (clk cycle 23)."
}

