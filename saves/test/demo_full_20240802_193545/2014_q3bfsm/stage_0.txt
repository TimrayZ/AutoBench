############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.

// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z
// 000 | 000, 001 | 0
// 001 | 001, 100 | 0
// 010 | 010, 001 | 0
// 011 | 001, 010 | 1
// 100 | 011, 100 | 1

RTL header:
module top_module (
	input clk,
	input reset,
	input x,
	output reg z
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
    input clk,
    input reset,
    input x,
    output reg z
);

    reg [2:0] y; // present state

    // State encoding
    parameter S0 = 3'b000, // state 000
              S1 = 3'b001, // state 001
              S2 = 3'b010, // state 010
              S3 = 3'b011, // state 011
              S4 = 3'b100; // state 100

    // Next state logic
    always @(*) begin
        case (y)
            S0: begin
                if (x) 
                    y_next = S1;
                else 
                    y_next = S0;
                z = 0;
            end
            S1: begin
                if (x) 
                    y_next = S4; 
                else 
                    y_next = S1;
                z = 0;
            end
            S2: begin
                if (x) 
                    y_next = S1; 
                else 
                    y_next = S2;
                z = 0;
            end
            S3: begin
                if (x) 
                    y_next = S2; 
                else 
                    y_next = S1;
                z = 1;
            end
            S4: begin
                if (x) 
                    y_next = S4; 
                else 
                    y_next = S3;
                z = 1;
            end
            default: begin
                y_next = S0; 
                z = 0;
            end
        endcase
    end

    // State register
    always @(posedge clk) begin
        if (reset) begin
            y <= S0; // reset to state 000
        end else begin
            y <= y_next; // update state
        end
    end

endmodule
```

