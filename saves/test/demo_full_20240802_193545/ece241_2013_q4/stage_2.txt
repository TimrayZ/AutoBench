############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
A large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). 
// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted
// Above s[3] | s[1], s[2], s[3] | None
// Between s[3] and s[2] | s[1], s[2] | fr1
// Between s[2] and s[1]  | s[1] | fr1, fr2
// Below s[1] | None | fr1, fr2, fr3
// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).
RTL testbench specification:
{
  "important data": "Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\nAbove s[3] | s[1], s[2], s[3] | None\nBetween s[3] and s[2] | s[1], s[2] | fr1\nBetween s[2] and s[1] | s[1] | fr1, fr2\nBelow s[1] | None | fr1, fr2, fr3\nAlso include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).",
  "technical specifications": [
    "0: The DUT is a water level control system with input signals including clock (clk), reset, and 3 sensor signals (s[3:1]).",
    "1: The DUT has output signals for flow rates fr1, fr2, fr3, and dfr.",
    "2: The system responds to the state of the sensors to control the flow rates based on predefined conditions for water levels.",
    "3: The DUT should use an active-high synchronous reset that initializes all outputs as asserted when reset is high.",
    "4: The testbench will apply various combinations of sensor inputs to check the correctness of DUT's output under different water levels.",
    "5: Test cases will include scenarios for all ranges of sensor states: above s[3], between s[3] and s[2], between s[2] and s[1], and below s[1]."
  ]
}
DUT header:
module top_module (
	input clk,
	input reset,
	input [3:1] s,
	output reg fr3,
	output reg fr2,
	output reg fr1,
	output reg dfr
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Apply active-high reset signal (reset = 1) for one clock cycle (clk). After reset, set reset = 0. Assert s = 3'b000 (no sensors detected). Wait for 2 clock cycles.",
  "scenario 2": "Set s = 3'b111 (above s[3]) for 3 clock cycles. Keep reset = 0. Observe outputs fr1, fr2, fr3, and dfr.",
  "scenario 3": "Set s = 3'b110 (between s[3] and s[2]) for 3 clock cycles. Assert fr1 signal during this period. Observe changes in outputs.",
  "scenario 4": "Set s = 3'b100 (between s[2] and s[1]) for 3 clock cycles. Assert fr1 and fr2 signals during this period. Observe changes in outputs.",
  "scenario 5": "Set s = 3'b000 (below s[1]) for 4 clock cycles. Assert fr1, fr2, and fr3 signals during this period. Observe outputs.",
  "scenario 6": "After executing scenario 5, change s to 3'b110 (between s[3] and s[2]) for 2 clock cycles. Assert fr1 signal. Observe effects on outputs.",
  "scenario 7": "Change s back to 3'b000 (below s[1]) for 2 clock cycles after the previous scenario. Assert fr1, fr2, and fr3 signals. Observe for proper flow rate outputs.",
  "scenario 8": "For one clock cycle, assert active-high reset signal (reset = 1), then set reset = 0. After reset, apply sensor states s = 3'b111 (above s[3]) for 3 clock cycles. Observe outputs."
}

