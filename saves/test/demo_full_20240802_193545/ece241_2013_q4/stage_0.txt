############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
A large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). 
// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted
// Above s[3] | s[1], s[2], s[3] | None
// Between s[3] and s[2] | s[1], s[2] | fr1
// Between s[2] and s[1]  | s[1] | fr1, fr2
// Below s[1] | None | fr1, fr2, fr3
// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).
RTL header:
module top_module (
	input clk,
	input reset,
	input [3:1] s,
	output reg fr3,
	output reg fr2,
	output reg fr1,
	output reg dfr
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
    input clk,
    input reset,
    input [3:1] s,
    output reg fr3,
    output reg fr2,
    output reg fr1,
    output reg dfr
);

    reg [1:0] state;
    reg [1:0] prev_state;

    // State encoding
    localparam STATE_ABOVE_S3 = 2'b00;
    localparam STATE_BETWEEN_S3_S2 = 2'b01;
    localparam STATE_BETWEEN_S2_S1 = 2'b10;
    localparam STATE_BELOW_S1 = 2'b11;

    // Sequential logic for state transition
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= STATE_BELOW_S1;
            fr3 <= 1'b1;  // All flow outputs asserted
            fr2 <= 1'b1;
            fr1 <= 1'b1;
            dfr <= 1'b1;
            prev_state <= STATE_BELOW_S1;
        end else begin
            prev_state <= state;
            case (state)
                STATE_ABOVE_S3: begin
                    // If sensors indicate above s3
                    if (s[3] == 1'b0) // Went below s3
                        state <= STATE_BETWEEN_S3_S2;
                end

                STATE_BETWEEN_S3_S2: begin
                    // If sensors indicate between s3 and s2
                    if (s[2] == 1'b0 && s[1] == 1'b1) // Went below s2
                        state <= STATE_BETWEEN_S2_S1;
                    else if (s[3] == 1'b1) // Went back to above s3
                        state <= STATE_ABOVE_S3;
                end

                STATE_BETWEEN_S2_S1: begin
                    // If sensors indicate between s2 and s1
                    if (s[1] == 1'b0) // Went below s1
                        state <= STATE_BELOW_S1;
                    else if (s[3] == 1'b1) // Went back to above s3
                        state <= STATE_ABOVE_S3;
                    else if (s[2] == 1'b0) // Went back to between s3 and s2
                        state <= STATE_BETWEEN_S3_S2;
                end

                STATE_BELOW_S1: begin
                    // If sensors indicate below s1
                    if (s[1] == 1'b1) // Went above s1
                        state <= STATE_BETWEEN_S2_S1;
                end
            endcase
        end
    end

    // Combinational logic based on the state
    always @(*) begin
        case (state)
            STATE_ABOVE_S3: begin
                fr3 = 1'b0;
                fr2 = 1'b0;
                fr1 = 1'b0;
                dfr = 1'b0;
            end

            STATE_BETWEEN_S3_S2: begin
                fr3 = 1'b0;
                fr2 = 1'b0;
                fr1 = 1'b1;
                dfr = (prev_state == STATE_BETWEEN_S3_S2) ? 1'b0 : 1'b1; 
            end

            STATE_BETWEEN_S2_S1: begin
                fr3 = 1'b0;
                fr2 = 1'b1;
                fr1 = 1'b1;
                dfr = (prev_state == STATE_BETWEEN_S2_S1) ? 1'b0 : 1'b1; 
            end

            STATE_BELOW_S1: begin
                fr3 = 1'b1;
                fr2 = 1'b1;
                fr1 = 1'b1;
                dfr = 1'b1;
            end

            default: begin
                fr3 = 1'b1;
                fr2 = 1'b1;
                fr1 = 1'b1;
                dfr = 1'b1;
            end
        endcase
    end
endmodule
```

