############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input areset,
	input load,
	input ena,
	input [3:0] data,
	output reg [3:0] q);

Your other information:
RTL circuit problem description:
Build a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. 
// (1) areset: Resets shift register to zero. 
// (2) load: Loads shift register with data[3:0] instead of shifting. 
// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). 
// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. 

IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Assert areset (high) for one clock cycle. Release areset (low) and verify that q is set to 0000.",
  "scenario 2": "Set areset (low). Apply load signal (high) with data set to 1010. Hold load high for one clock cycle and check q for 1010 thereafter.",
  "scenario 3": "Set areset (low), load (low), and ena (high). Apply clk and verify that q remains unchanged. This should be done for two clock cycles.",
  "scenario 4": "Set areset (low), then set load (high) and ena (high) with data set to 1100. After one clock cycle, assert ena (low) while keeping load high and check that q remains 1100 in the next clock cycle.",
  "scenario 5": "Set areset (low) and load (low). After one clock cycle, apply ena (high) and clk. Observe that with q initialized at 0000, q remains the same for each clock cycle of ena (high) asserted.",
  "scenario 6": "Set areset (low), then apply data as 1111 with load (high) for one clock cycle. Next, after releasing load (low), assert ena (high) and pulse clk for two clock cycles to observe right shifts occur.",
  "scenario 7": "Set areset (low) and apply data as 0011 with load (high) for one clock cycle, then release load and set ena (high). Pulse clk for three clock cycles to verify that shifting takes place correctly from initial data.",
  "scenario 8": "Set areset (low), then apply load with data as 0001 (high), followed by setting ena (low) and observing q for two clock cycles to ensure it retains its value despite ena being low.",
  "scenario 9": "Set areset (low), apply load with data as 1001 (high), release load (low), then assert ena (high) and pulse clk for one clock cycle to check the right shift of q from initialized data.",
  "scenario 10": "Set areset (high) for one cycle, then return to low and verify q is 0000, then apply ena (high) without loading any data and pulse clk for three clock cycles to check that q remains zero."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  areset;
reg  load;
reg  ena;
reg [3:0] data;
wire [3:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.areset(areset),
	.load(load),
	.ena(ena),
	.data(data),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, areset, load, ena, data, q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, areset, load, ena, data, q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  areset;
reg  load;
reg  ena;
reg [3:0] data;
wire [3:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.areset(areset),
	.load(load),
	.ena(ena),
	.data(data),
	.q(q)
);

// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end

// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    areset = 1;
    #10
    areset = 0;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, areset, load, ena, data, q);

    // scenario 2
    scenario = 2;
    load = 1; 
    data = 4'b1010;
    areset = 0;
    #10;
    load = 0;
    $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, areset, load, ena, data, q);

    // scenario 3
    scenario = 3;
    ena = 1;
    areset = 0;
    load = 0;
    repeat(2) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, areset, load, ena, data, q);
    end

    // scenario 4
    scenario = 4;
    load = 1; 
    data = 4'b1100;
    areset = 0;
    #10;
    ena = 0;
    load = 1;
    #10;
    load = 0;
    $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, areset, load, ena, data, q);

    // scenario 5
    scenario = 5;
    areset = 0;
    load = 0;
    #10
    ena = 1;
    repeat(3) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, areset, load, ena, data, q);
    end

    // scenario 6
    scenario = 6;
    areset = 0;
    load = 1;
    data = 4'b1111;
    #10;
    load = 0;
    ena = 1;
    repeat(2) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, areset, load, ena, data, q);
    end

    // scenario 7
    scenario = 7;
    areset = 0;
    load = 1;
    data = 4'b0011;
    #10;
    load = 0;
    ena = 1;
    repeat(3) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, areset, load, ena, data, q);
    end

    // scenario 8
    scenario = 8;
    areset = 0;
    load = 1;
    data = 4'b0001;
    #10;
    load = 0;
    ena = 0;
    repeat(2) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, areset, load, ena, data, q);
    end

    // scenario 9
    scenario = 9;
    areset = 0;
    load = 1;
    data = 4'b1001;
    #10;
    load = 0;
    ena = 1;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, areset, load, ena, data, q);

    // scenario 10
    scenario = 10;
    areset = 1;
    #10;
    areset = 0;
    #10;
    ena = 1;
    repeat(3) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, areset, load, ena, data, q);
    end

    $fclose(file);
    $finish;
end

endmodule
```

