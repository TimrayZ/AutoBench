############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
Build a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. 
// (1) areset: Resets shift register to zero. 
// (2) load: Loads shift register with data[3:0] instead of shifting. 
// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). 
// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. 

RTL header:
module top_module(
	input clk,
	input areset,
	input load,
	input ena,
	input [3:0] data,
	output reg [3:0] q);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module(
	input clk,
	input areset,
	input load,
	input ena,
	input [3:0] data,
	output reg [3:0] q);

	always @(posedge clk or posedge areset) begin
		if (areset) begin
			q <= 4'b0000; // Reset shift register to zero
		end else if (load) begin
			q <= data; // Load data into the shift register
		end else if (ena) begin
			q <= {1'b0, q[3:1]}; // Shift right
		end
	end
endmodule
```

