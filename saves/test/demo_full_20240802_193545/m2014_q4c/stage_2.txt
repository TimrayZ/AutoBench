############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Implement a simple D flip flop with active high synchronous reset (reset output to 0).
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1: The DUT is a D flip flop that captures the value of input 'd' on the rising edge of the clock 'clk' while considering an active high synchronous reset 'r'. If 'r' is asserted (high), the output 'q' will be reset to 0 regardless of the other inputs.",
    "2: The input signals to the DUT include 'clk' (clock signal), 'd' (data input), and 'r' (reset input). The output signal is 'q' (output of the flip flop).",
    "3: The testbench should generate clock cycles at a specific frequency to properly test the D flip flop functionality.",
    "4: The testbench must include test cases that cover the following scenarios: (a) Normal operation where 'r' is low, verify that 'q' follows 'd'; (b) Asserting 'r' to check if 'q' resets to 0; (c) Edge case tests such as having 'd' change right before the clock edge; (d) Multiple consecutive resets and toggles of 'd'; (e) Ensure that 'q' does not change when 'r' is asserted regardless of 'd'.",
    "5: The testbench should include assertions or checks after each clock cycle to validate the output 'q' against expected values based on the input signals."
  ]
}
DUT header:
module top_module (
	input clk,
	input d,
	input r,
	output logic q
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Initialize 'clk' to 0, 'r' to 0, and 'd' to 0. Generate 10 clock cycles (5 rising edges) while maintaining 'r' low. After the 5th rising edge, change 'd' to 1 and continue for another 5 clock cycles.",
  "scenario 2": "Assert 'r' high for one clock cycle, then de-assert 'r' to low and keep 'd' at 0. Observe the output 'q' during the next clock edge.",
  "scenario 3": "Set 'r' to low, then change 'd' to 1 one clock cycle before the rising edge of 'clk'. Observe the output 'q' at the next rising edge.",
  "scenario 4": "Assert 'r' high for three consecutive clock cycles, then set 'd' to 1 while 'r' remains high. De-assert 'r' and observe 'q' in the next clock cycle.",
  "scenario 5": "Set 'd' to 0, assert 'r' high for two cycles, then de-assert 'r'. Change 'd' back to 1 and observe 'q' at the next clock edge.",
  "scenario 6": "While 'r' is asserted, alternate 'd' between 0 and 1 for four clock cycles, and observe that 'q' remains at 0 during this period.",
  "scenario 7": "Reset 'r' to low, then pulse 'd' from 0 to 1 and back to 0 over two clock cycles, observing 'q' after each clock edge."
}

