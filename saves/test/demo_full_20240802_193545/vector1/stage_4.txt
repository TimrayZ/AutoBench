############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out_hi = %d, out_lo = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out_hi = %d, out_lo = %d", "scenario: 1b, in = %d, out_hi = %d, out_lo = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [15:0] in,
	output [7:0] out_hi,
	output [7:0] out_lo
);

Your other information:
RTL circuit problem description:
Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "0. The DUT is a combinational circuit that takes a 16-bit input and splits it into two 8-bit outputs.",
    "1. The module header indicates the input is a 16-bit wide signal called 'in'.",
    "2. The output signals are 'out_hi' for the upper byte ([15:8]) and 'out_lo' for the lower byte ([7:0]).",
    "3. The expected functionality is to assign the upper 8 bits of 'in' to 'out_hi' and the lower 8 bits of 'in' to 'out_lo'.",
    "4. Test cases for the testbench should cover all possible input combinations of the 16-bit input to ensure both outputs are correctly assigned.",
    "5. The testbench should include assertions to compare the output of the DUT with the expected results."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply the input 'in' as 16'b0000000000000000. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 2": "Apply the input 'in' as 16'b1111111111111111. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 3": "Apply the input 'in' as 16'b1010101010101010. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 4": "Apply the input 'in' as 16'b0001001000110100. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 5": "Apply the input 'in' as 16'b1111000011110000. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 6": "Apply the input 'in' as 16'b0000111100001111. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 7": "Apply the input 'in' as 16'b0101010101010101. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 8": "Apply the input 'in' as 16'b1100110011001100. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 9": "Apply the input 'in' as 16'b0000000011111111. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 10": "Apply the input 'in' as 16'b1111111100000000. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out_hi = %d, out_lo = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out_hi = %d, out_lo = %d", "scenario: 1b, in = %d, out_hi = %d, out_lo = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    reg [15:0] in;
    wire [7:0] out_hi;
    wire [7:0] out_lo;

    // Instantiate the DUT
    top_module DUT (
        .in(in),
        .out_hi(out_hi),
        .out_lo(out_lo)
    );

    // File handling
    integer file;

    initial begin
        file = $fopen("TBout.txt", "w");

        // Scenario 1
        in = 16'b0000000000000000; 
        #1;
        $fdisplay(file, "scenario: 1, in = %d, out_hi = %d, out_lo = %d", in, out_hi, out_lo);

        // Scenario 2
        in = 16'b1111111111111111; 
        #1;
        $fdisplay(file, "scenario: 2, in = %d, out_hi = %d, out_lo = %d", in, out_hi, out_lo);

        // Scenario 3
        in = 16'b1010101010101010; 
        #1;
        $fdisplay(file, "scenario: 3, in = %d, out_hi = %d, out_lo = %d", in, out_hi, out_lo);

        // Scenario 4
        in = 16'b0001001000110100; 
        #1;
        $fdisplay(file, "scenario: 4, in = %d, out_hi = %d, out_lo = %d", in, out_hi, out_lo);

        // Scenario 5
        in = 16'b1111000011110000; 
        #1;
        $fdisplay(file, "scenario: 5, in = %d, out_hi = %d, out_lo = %d", in, out_hi, out_lo);

        // Scenario 6
        in = 16'b0000111100001111; 
        #1;
        $fdisplay(file, "scenario: 6, in = %d, out_hi = %d, out_lo = %d", in, out_hi, out_lo);

        // Scenario 7
        in = 16'b0101010101010101; 
        #1;
        $fdisplay(file, "scenario: 7, in = %d, out_hi = %d, out_lo = %d", in, out_hi, out_lo);

        // Scenario 8
        in = 16'b1100110011001100; 
        #1;
        $fdisplay(file, "scenario: 8, in = %d, out_hi = %d, out_lo = %d", in, out_hi, out_lo);

        // Scenario 9
        in = 16'b0000000011111111; 
        #1;
        $fdisplay(file, "scenario: 9, in = %d, out_hi = %d, out_lo = %d", in, out_hi, out_lo);

        // Scenario 10
        in = 16'b1111111100000000; 
        #1;
        $fdisplay(file, "scenario: 10, in = %d, out_hi = %d, out_lo = %d", in, out_hi, out_lo);

        $fclose(file);
        $finish;
    end

endmodule
```

