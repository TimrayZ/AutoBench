############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "0. The DUT is a combinational circuit that takes a 16-bit input and splits it into two 8-bit outputs.",
    "1. The module header indicates the input is a 16-bit wide signal called 'in'.",
    "2. The output signals are 'out_hi' for the upper byte ([15:8]) and 'out_lo' for the lower byte ([7:0]).",
    "3. The expected functionality is to assign the upper 8 bits of 'in' to 'out_hi' and the lower 8 bits of 'in' to 'out_lo'.",
    "4. Test cases for the testbench should cover all possible input combinations of the 16-bit input to ensure both outputs are correctly assigned.",
    "5. The testbench should include assertions to compare the output of the DUT with the expected results."
  ]
}
DUT header:
module top_module (
	input [15:0] in,
	output [7:0] out_hi,
	output [7:0] out_lo
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Apply the input 'in' as 16'b0000000000000000. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 2": "Apply the input 'in' as 16'b1111111111111111. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 3": "Apply the input 'in' as 16'b1010101010101010. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 4": "Apply the input 'in' as 16'b0001001000110100. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 5": "Apply the input 'in' as 16'b1111000011110000. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 6": "Apply the input 'in' as 16'b0000111100001111. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 7": "Apply the input 'in' as 16'b0101010101010101. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 8": "Apply the input 'in' as 16'b1100110011001100. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 9": "Apply the input 'in' as 16'b0000000011111111. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'.",
  "scenario 10": "Apply the input 'in' as 16'b1111111100000000. Wait for 1 clock cycle to observe 'out_hi' and 'out_lo'."
}

