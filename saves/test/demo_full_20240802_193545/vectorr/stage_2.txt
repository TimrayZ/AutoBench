############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Given an 8-bit input vector [7:0], reverse its bit ordering.
RTL testbench specification:
{
  "important data": "Input is an 8-bit vector [7:0]. Output should be the same bit vector with the ordering reversed.",
  "technical specifications": [
    "1. The DUT is a module named 'top_module' that takes an 8-bit input vector 'in' and produces an 8-bit output vector 'out'.",
    "2. The input vector 'in' is defined as input [7:0], meaning it has indices from 0 to 7.",
    "3. The output vector 'out' is defined as output [7:0], also having indices from 0 to 7.",
    "4. The core functionality of the DUT is to reverse the order of the bits in the input vector 'in'.",
    "5. Example case: If 'in' = 8'b00001111, then 'out' should be 8'b11110000.",
    "6. The testbench will generate multiple test cases to validate that the DUT is functioning correctly, including edge cases such as all bits being 0 or all bits being 1."
  ]
}
DUT header:
module top_module (
	input [7:0] in,
	output [7:0] out
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Apply input vector in = 8'b00000000. Wait for 1 clock cycle before observing output.",
  "scenario 2": "Apply input vector in = 8'b11111111. Wait for 1 clock cycle before observing output.",
  "scenario 3": "Apply input vector in = 8'b10101010. Wait for 1 clock cycle before observing output.",
  "scenario 4": "Apply input vector in = 8'b01010101. Wait for 1 clock cycle before observing output.",
  "scenario 5": "Apply input vector in = 8'b00001111. Wait for 1 clock cycle before observing output.",
  "scenario 6": "Apply input vector in = 8'b11110000. Wait for 1 clock cycle before observing output.",
  "scenario 7": "Apply input vector in = 8'b00000001. Wait for 1 clock cycle before observing output.",
  "scenario 8": "Apply input vector in = 8'b00001110. Wait for 1 clock cycle before observing output.",
  "scenario 9": "Apply input vector in = 8'b11111110. Wait for 1 clock cycle before observing output.",
  "scenario 10": "Apply input vector in = 8'b10000000. Wait for 1 clock cycle before observing output."
}

