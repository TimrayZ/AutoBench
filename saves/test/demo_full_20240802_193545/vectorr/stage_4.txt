############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out = %d", "scenario: 1b, in = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [7:0] in,
	output [7:0] out
);

Your other information:
RTL circuit problem description:
Given an 8-bit input vector [7:0], reverse its bit ordering.
RTL testbench specification:
{
  "important data": "Input is an 8-bit vector [7:0]. Output should be the same bit vector with the ordering reversed.",
  "technical specifications": [
    "1. The DUT is a module named 'top_module' that takes an 8-bit input vector 'in' and produces an 8-bit output vector 'out'.",
    "2. The input vector 'in' is defined as input [7:0], meaning it has indices from 0 to 7.",
    "3. The output vector 'out' is defined as output [7:0], also having indices from 0 to 7.",
    "4. The core functionality of the DUT is to reverse the order of the bits in the input vector 'in'.",
    "5. Example case: If 'in' = 8'b00001111, then 'out' should be 8'b11110000.",
    "6. The testbench will generate multiple test cases to validate that the DUT is functioning correctly, including edge cases such as all bits being 0 or all bits being 1."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply input vector in = 8'b00000000. Wait for 1 clock cycle before observing output.",
  "scenario 2": "Apply input vector in = 8'b11111111. Wait for 1 clock cycle before observing output.",
  "scenario 3": "Apply input vector in = 8'b10101010. Wait for 1 clock cycle before observing output.",
  "scenario 4": "Apply input vector in = 8'b01010101. Wait for 1 clock cycle before observing output.",
  "scenario 5": "Apply input vector in = 8'b00001111. Wait for 1 clock cycle before observing output.",
  "scenario 6": "Apply input vector in = 8'b11110000. Wait for 1 clock cycle before observing output.",
  "scenario 7": "Apply input vector in = 8'b00000001. Wait for 1 clock cycle before observing output.",
  "scenario 8": "Apply input vector in = 8'b00001110. Wait for 1 clock cycle before observing output.",
  "scenario 9": "Apply input vector in = 8'b11111110. Wait for 1 clock cycle before observing output.",
  "scenario 10": "Apply input vector in = 8'b10000000. Wait for 1 clock cycle before observing output."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out = %d", "scenario: 1b, in = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Declare inputs and outputs
    reg [7:0] in;
    wire [7:0] out;

    // Instantiate the DUT
    top_module DUT (
        .in(in),
        .out(out)
    );

    // File pointer for output
    integer file;

    // Initial block for stimulus and file initialization
    initial begin
        // Open the output file
        file = $fopen("TBout.txt", "w");

        // Scenario 1
        in = 8'b00000000; 
        #1; 
        $fdisplay(file, "scenario: 1, in = %d, out = %d", in, out);
        
        // Scenario 2
        in = 8'b11111111;
        #1;
        $fdisplay(file, "scenario: 2, in = %d, out = %d", in, out);
        
        // Scenario 3
        in = 8'b10101010;
        #1;
        $fdisplay(file, "scenario: 3, in = %d, out = %d", in, out);
        
        // Scenario 4
        in = 8'b01010101;
        #1;
        $fdisplay(file, "scenario: 4, in = %d, out = %d", in, out);
        
        // Scenario 5
        in = 8'b00001111;
        #1;
        $fdisplay(file, "scenario: 5, in = %d, out = %d", in, out);
        
        // Scenario 6
        in = 8'b11110000;
        #1;
        $fdisplay(file, "scenario: 6, in = %d, out = %d", in, out);
        
        // Scenario 7
        in = 8'b00000001;
        #1;
        $fdisplay(file, "scenario: 7, in = %d, out = %d", in, out);
        
        // Scenario 8
        in = 8'b00001110;
        #1;
        $fdisplay(file, "scenario: 8, in = %d, out = %d", in, out);
        
        // Scenario 9
        in = 8'b11111110;
        #1;
        $fdisplay(file, "scenario: 9, in = %d, out = %d", in, out);
        
        // Scenario 10
        in = 8'b10000000;
        #1;
        $fdisplay(file, "scenario: 10, in = %d, out = %d", in, out);

        // Close the output file
        $fclose(file);
    end

endmodule
```

