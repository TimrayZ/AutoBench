############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, x = %d, y = %d, sum = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, x = %d, y = %d, sum = %d", "scenario: 1b, x = %d, y = %d, sum = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [3:0] x,
	input [3:0] y,
	output [4:0] sum
);

Your other information:
RTL circuit problem description:
Implement a 4-bit adder with full adders. The output sum should include the overflow bit.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. DUT is a 4-bit adder that sums two 4-bit inputs (x and y) and produces a 5-bit output (sum) that includes an overflow bit.",
    "2. Inputs: x [3:0] and y [3:0], both are 4-bit wide signals.",
    "3. Output: sum [4:0], a 5-bit signal that includes the sum of x and y and the overflow bit.",
    "4. The adder must correctly handle all combinations of 4-bit inputs, including edge cases where overflow occurs."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply x = 4'b0000 and y = 4'b0000 at time = 0 clock cycles.",
  "scenario 2": "Apply x = 4'b0001 and y = 4'b0001 at time = 1 clock cycle.",
  "scenario 3": "Apply x = 4'b0010 and y = 4'b0010 at time = 2 clock cycles.",
  "scenario 4": "Apply x = 4'b1111 and y = 4'b0001 at time = 3 clock cycles.",
  "scenario 5": "Apply x = 4'b0101 and y = 4'b1010 at time = 4 clock cycles.",
  "scenario 6": "Apply x = 4'b1000 and y = 4'b1000 at time = 5 clock cycles.",
  "scenario 7": "Apply x = 4'b1111 and y = 4'b1111 at time = 6 clock cycles.",
  "scenario 8": "Apply x = 4'b0111 and y = 4'b1000 at time = 7 clock cycles.",
  "scenario 9": "Apply x = 4'b0011 and y = 4'b0101 at time = 8 clock cycles.",
  "scenario 10": "Apply x = 4'b0000 and y = 4'b1111 at time = 9 clock cycles."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, x = %d, y = %d, sum = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, x = %d, y = %d, sum = %d", "scenario: 1b, x = %d, y = %d, sum = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;
  reg [3:0] x;
  reg [3:0] y;
  wire [4:0] sum;

  // Instantiate the DUT
  top_module DUT (
    .x(x),
    .y(y),
    .sum(sum)
  );

  integer file;

  initial begin
    file = $fopen("TBout.txt", "w");

    // Scenario 1
    x = 4'b0000; 
    y = 4'b0000; 
    #1; // Delay for signal stabilization
    $fdisplay(file, "scenario: 1, x = %d, y = %d, sum = %d", x, y, sum);

    // Scenario 2
    x = 4'b0001; 
    y = 4'b0001; 
    #1; 
    $fdisplay(file, "scenario: 2, x = %d, y = %d, sum = %d", x, y, sum);

    // Scenario 3
    x = 4'b0010; 
    y = 4'b0010; 
    #1; 
    $fdisplay(file, "scenario: 3, x = %d, y = %d, sum = %d", x, y, sum);

    // Scenario 4
    x = 4'b1111; 
    y = 4'b0001; 
    #1; 
    $fdisplay(file, "scenario: 4, x = %d, y = %d, sum = %d", x, y, sum);

    // Scenario 5
    x = 4'b0101; 
    y = 4'b1010; 
    #1; 
    $fdisplay(file, "scenario: 5, x = %d, y = %d, sum = %d", x, y, sum);

    // Scenario 6
    x = 4'b1000; 
    y = 4'b1000; 
    #1; 
    $fdisplay(file, "scenario: 6, x = %d, y = %d, sum = %d", x, y, sum);

    // Scenario 7
    x = 4'b1111; 
    y = 4'b1111; 
    #1; 
    $fdisplay(file, "scenario: 7, x = %d, y = %d, sum = %d", x, y, sum);

    // Scenario 8
    x = 4'b0111; 
    y = 4'b1000; 
    #1; 
    $fdisplay(file, "scenario: 8, x = %d, y = %d, sum = %d", x, y, sum);

    // Scenario 9
    x = 4'b0011; 
    y = 4'b0101; 
    #1; 
    $fdisplay(file, "scenario: 9, x = %d, y = %d, sum = %d", x, y, sum);

    // Scenario 10
    x = 4'b0000; 
    y = 4'b1111; 
    #1; 
    $fdisplay(file, "scenario: 10, x = %d, y = %d, sum = %d", x, y, sum);

    $fclose(file);
    $finish;
  end
endmodule
```

