############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input reset,
	output reg [3:0] q);

Your other information:
RTL circuit problem description:
Make a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Initially, set 'reset' to high for 1 clock cycle to reset the counter, then set 'reset' low. Wait for 1 clock cycle.",
  "scenario 2": "With 'reset' low, toggle 'clk' for 10 clock cycles. Monitor the output 'q' as it increments each clock cycle from the reset value.",
  "scenario 3": "After 10 clock cycles, keep 'reset' low, and toggle 'clk' for 1 additional clock cycle to observe the wrap-around from 10 back to 1.",
  "scenario 4": "Set 'reset' high during the 5th clock cycle (after 4 increments). Hold 'reset' high for 1 clock cycle and then set it low. Wait for 1 clock cycle.",
  "scenario 5": "After resetting, toggle the 'clk' for 3 clock cycles while observing the output, confirming the counter increments from 1 to 3.",
  "scenario 6": "Set 'reset' high during the 8th clock cycle. Hold 'reset' for 1 clock cycle, then release 'reset' and let the system run for 5 clock cycles to check the counter increments from 1 after the reset."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
wire [3:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
wire [3:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // Scenario 1
    scenario = 1;
    reset = 1;  // Set reset high
    #10;        // Wait for 1 clock cycle
    reset = 0;  // Set reset low
    #10;        // Wait for 1 clock cycle
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);

    // Scenario 2
    scenario = 2;
    reset = 0;  // Keep reset low
    repeat(10) begin
        #10;  // Wait for each clock cycle
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    end

    // Scenario 3
    scenario = 3;
    #10;  // Wait for 1 clock cycle (after 10 increments)
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);

    // Scenario 4
    scenario = 4;
    reset = 1;  // Set reset high
    #10;        // Hold reset high for 1 clock cycle
    reset = 0;  // Set reset low
    #10;        // Wait for 1 clock cycle
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);

    // Scenario 5
    scenario = 5;
    reset = 0;  // Keep reset low
    repeat(3) begin
        #10;  // Wait for each clock cycle
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    end

    // Scenario 6
    scenario = 6;
    reset = 1;  // Set reset high
    #10;        // Hold reset high for 1 clock cycle
    reset = 0;  // Release reset
    repeat(5) begin
        #10;  // Wait for each clock cycle
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    end

    $fclose(file);
    $finish;
end

endmodule
```

