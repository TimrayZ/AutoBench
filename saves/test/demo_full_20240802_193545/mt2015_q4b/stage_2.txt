############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
The module can be described by the following simulation waveform: 

// time            x               y               z               
// 0ns             0               0               1               
// 5ns             0               0               1               
// 10ns            0               0               1               
// 15ns            0               0               1               
// 20ns            0               0               1               
// 25ns            1               0               0               
// 30ns            1               0               0               
// 35ns            0               1               0               
// 40ns            0               1               0               
// 45ns            1               1               1               
// 50ns            1               1               1               
// 55ns            0               0               1               
// 60ns            0               1               0               
// 65ns            0               1               0               
// 70ns            1               1               1               
// 75ns            0               1               0               
// 80ns            0               1               0               
// 85ns            0               1               0               
// 90ns            1               0               0               
RTL testbench specification:
{
  "important data": "The DUT module receives two input signals 'x' and 'y', producing an output signal 'z'. The provided simulation waveform describes the timing and values of the inputs 'x' and 'y', and the expected output 'z' over specified time intervals.",
  "technical specifications": [
    "1: The module header defines the inputs x (1-bit) and y (1-bit), and the output z (1-bit).",
    "2: The DUT should maintain output z according to the state transitions represented in the simulation waveform table.",
    "3: The testbench must apply the input signals x and y at the specified time intervals and verify the output z against the expected values based on the waveform provided.",
    "4: Inputs x and y can only take binary values (0 or 1) and output z should also be binary.",
    "5: The testbench must incorporate a timing mechanism to match the intervals outlined in the provided waveform.",
    "6: The expected output z corresponding to the input combinations should be derived from the provided simulation waveform."
  ]
}
DUT header:
module top_module(
	input x,
	input y,
	output z);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "At 0ns, drive x = 0 and y = 0. Hold these values until 25ns.",
  "scenario 2": "At 25ns, change x = 1 and y = 0. Hold these values until 35ns.",
  "scenario 3": "At 35ns, set x = 0 and y = 1. Hold this input combination until 45ns.",
  "scenario 4": "At 45ns, change x = 1 and y = 1. Hold these values until 55ns.",
  "scenario 5": "At 55ns, drive x = 0 and y = 0. Hold these values until 60ns.",
  "scenario 6": "At 60ns, set x = 0 and y = 1. Hold this input combination until 70ns.",
  "scenario 7": "At 70ns, change x = 1 and y = 1. Hold these values until 75ns.",
  "scenario 8": "At 75ns, drive x = 0 and y = 1. Hold these values until 90ns.",
  "scenario 9": "At 90ns, set x = 1 and y = 0. Hold this input combination indefinitely."
}

