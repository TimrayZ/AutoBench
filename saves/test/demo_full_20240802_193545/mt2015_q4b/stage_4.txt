############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, x = %d, y = %d, z = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, x = %d, y = %d, z = %d", "scenario: 1b, x = %d, y = %d, z = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	input x,
	input y,
	output z);

Your other information:
RTL circuit problem description:
The module can be described by the following simulation waveform: 

// time            x               y               z               
// 0ns             0               0               1               
// 5ns             0               0               1               
// 10ns            0               0               1               
// 15ns            0               0               1               
// 20ns            0               0               1               
// 25ns            1               0               0               
// 30ns            1               0               0               
// 35ns            0               1               0               
// 40ns            0               1               0               
// 45ns            1               1               1               
// 50ns            1               1               1               
// 55ns            0               0               1               
// 60ns            0               1               0               
// 65ns            0               1               0               
// 70ns            1               1               1               
// 75ns            0               1               0               
// 80ns            0               1               0               
// 85ns            0               1               0               
// 90ns            1               0               0               
RTL testbench specification:
{
  "important data": "The DUT module receives two input signals 'x' and 'y', producing an output signal 'z'. The provided simulation waveform describes the timing and values of the inputs 'x' and 'y', and the expected output 'z' over specified time intervals.",
  "technical specifications": [
    "1: The module header defines the inputs x (1-bit) and y (1-bit), and the output z (1-bit).",
    "2: The DUT should maintain output z according to the state transitions represented in the simulation waveform table.",
    "3: The testbench must apply the input signals x and y at the specified time intervals and verify the output z against the expected values based on the waveform provided.",
    "4: Inputs x and y can only take binary values (0 or 1) and output z should also be binary.",
    "5: The testbench must incorporate a timing mechanism to match the intervals outlined in the provided waveform.",
    "6: The expected output z corresponding to the input combinations should be derived from the provided simulation waveform."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "At 0ns, drive x = 0 and y = 0. Hold these values until 25ns.",
  "scenario 2": "At 25ns, change x = 1 and y = 0. Hold these values until 35ns.",
  "scenario 3": "At 35ns, set x = 0 and y = 1. Hold this input combination until 45ns.",
  "scenario 4": "At 45ns, change x = 1 and y = 1. Hold these values until 55ns.",
  "scenario 5": "At 55ns, drive x = 0 and y = 0. Hold these values until 60ns.",
  "scenario 6": "At 60ns, set x = 0 and y = 1. Hold this input combination until 70ns.",
  "scenario 7": "At 70ns, change x = 1 and y = 1. Hold these values until 75ns.",
  "scenario 8": "At 75ns, drive x = 0 and y = 1. Hold these values until 90ns.",
  "scenario 9": "At 90ns, set x = 1 and y = 0. Hold this input combination indefinitely."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, x = %d, y = %d, z = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, x = %d, y = %d, z = %d", "scenario: 1b, x = %d, y = %d, z = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;
    // Inputs
    reg x;
    reg y;

    // Outputs
    wire z;

    // Instantiate the DUT
    top_module DUT (
        .x(x),
        .y(y),
        .z(z)
    );

    // File descriptor
    integer file;

    initial begin
        // Open the output file
        file = $fopen("TBout.txt", "w");
        
        // Scenario 1
        x = 0; y = 0; 
        #5;
        $fdisplay(file, "scenario: 1, x = %d, y = %d, z = %d", x, y, z);
        #20; // Hold for 25ns

        // Scenario 2
        x = 1; y = 0; 
        #5;
        $fdisplay(file, "scenario: 2, x = %d, y = %d, z = %d", x, y, z);
        #10; // Hold for 35ns

        // Scenario 3
        x = 0; y = 1; 
        #5;
        $fdisplay(file, "scenario: 3, x = %d, y = %d, z = %d", x, y, z);
        #10; // Hold for 45ns

        // Scenario 4
        x = 1; y = 1; 
        #5;
        $fdisplay(file, "scenario: 4, x = %d, y = %d, z = %d", x, y, z);
        #10; // Hold for 55ns

        // Scenario 5
        x = 0; y = 0; 
        #5;
        $fdisplay(file, "scenario: 5, x = %d, y = %d, z = %d", x, y, z);
        #5; // Hold for 60ns

        // Scenario 6
        x = 0; y = 1; 
        #5;
        $fdisplay(file, "scenario: 6, x = %d, y = %d, z = %d", x, y, z);
        #10; // Hold for 70ns

        // Scenario 7
        x = 1; y = 1; 
        #5;
        $fdisplay(file, "scenario: 7, x = %d, y = %d, z = %d", x, y, z);
        #5; // Hold for 75ns

        // Scenario 8
        x = 0; y = 1; 
        #5;
        $fdisplay(file, "scenario: 8, x = %d, y = %d, z = %d", x, y, z);
        #15; // Hold for 90ns

        // Scenario 9
        x = 1; y = 0; 
        #5;
        $fdisplay(file, "scenario: 9, x = %d, y = %d, z = %d", x, y, z);
        // Hold indefinitely
        #1000;

        // Close the output file
        $fclose(file);
        $finish;
    end
endmodule
```

