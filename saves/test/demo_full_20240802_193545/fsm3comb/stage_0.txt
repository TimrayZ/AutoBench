############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.
// State | Next state in=0, Next state in=1 | Output
// A | A, B | 0
// B | C, B | 0
// C | A, D | 0
// D | C, B | 1
RTL header:
module top_module (
	input in,
	input [1:0] state,
	output reg [1:0] next_state,
	output out
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
    input in,
    input [1:0] state,
    output reg [1:0] next_state,
    output out
);

always @(*) begin
    case (state)
        2'b00: begin // State A
            if (in) begin
                next_state = 2'b01; // Transition to B
            end else begin
                next_state = 2'b00; // Stay in A
            end
            out = 0;
        end
        
        2'b01: begin // State B
            if (in) begin
                next_state = 2'b01; // Stay in B
            end else begin
                next_state = 2'b10; // Transition to C
            end
            out = 0;
        end
        
        2'b10: begin // State C
            if (in) begin
                next_state = 2'b11; // Transition to D
            end else begin
                next_state = 2'b00; // Transition to A
            end
            out = 0;
        end
        
        2'b11: begin // State D
            if (in) begin
                next_state = 2'b01; // Transition to B
            end else begin
                next_state = 2'b10; // Transition to C
            end
            out = 1;
        end
        
        default: begin
            next_state = 2'b00; // Defaulting to state A
            out = 0;
        end
    endcase
end

endmodule
```

