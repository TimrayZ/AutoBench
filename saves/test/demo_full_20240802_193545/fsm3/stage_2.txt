############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.
 
// state | next state in=0, next state in=1 | output
// A | A, B | 0
// B | C, B | 0
// C | A, D | 0
// D | C, B | 1
RTL testbench specification:
{
  "important data": "// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1",
  "technical specifications": [
    "1. DUT Module Header: module top_module (input clk, input in, input areset, output out);",
    "2. The state machine has four states: A, B, C, and D.",
    "3. The state transition based on input 'in' is defined in the provided state transition table.",
    "4. The state machine is a Moore state machine, which means the output is determined by the state alone, not by the input.",
    "5. An asynchronous reset input 'areset' is present, which resets the FSM to state A on a positive edge.",
    "6. The output 'out' is defined as follows: it is 1 only when the system is in state D, and 0 in all other states.",
    "7. The testbench must generate input signals that test all transitions between states for both input values (0 and 1).",
    "8. There should be a series of checks in the testbench to validate that the output 'out' matches expected output for each state and input condition."
  ]
}
DUT header:
module top_module (
	input clk,
	input in,
	input areset,
	output out
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Apply the asynchronous reset by asserting 'areset' high for one clock cycle, followed by de-asserting it. The state machine should start from state A after the reset.",
  "scenario 2": "Set 'in' to 0. After 1 clock cycle, observe the state transition from state A to state A, and output 'out' should be 0.",
  "scenario 3": "Set 'in' to 1. After 1 clock cycle, observe the state transition from state A to state B, and output 'out' should remain 0.",
  "scenario 4": "Set 'in' to 0 while in state B. After 1 clock cycle, observe the state transition from state B to state C, and output 'out' should be 0.",
  "scenario 5": "Set 'in' to 1 while in state B. After 1 clock cycle, observe that the state remains in state B, and output 'out' should still be 0.",
  "scenario 6": "Set 'in' to 0 while in state C. After 1 clock cycle, observe the state transition from state C to state A, and output 'out' should be 0.",
  "scenario 7": "Set 'in' to 1 while in state C. After 1 clock cycle, observe the state transition from state C to state D, and output 'out' should change to 1.",
  "scenario 8": "Set 'in' to 0 while in state D. After 1 clock cycle, observe the state transition from state D to state C, and output 'out' should revert to 0.",
  "scenario 9": "Set 'in' to 1 while in state D. After 1 clock cycle, observe that the state transitions from state D to state B, and output 'out' should remain 0.",
  "scenario 10": "Apply asynchronous reset again by asserting 'areset' high for one clock cycle while in any state. Confirm that the state machine resets back to state A and output 'out' is 0."
}

