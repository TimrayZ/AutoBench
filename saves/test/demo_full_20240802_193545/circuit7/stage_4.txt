############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module (
	input clk,
	input a, 
	output reg q
);

Your other information:
RTL circuit problem description:
This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.

// time            clk             a               q               
// 0ns             0               x               x               
// 5ns             1               0               x               
// 10ns            0               0               x               
// 15ns            1               0               1               
// 20ns            0               0               1               
// 25ns            1               0               1               
// 30ns            0               0               1               
// 35ns            1               1               1               
// 40ns            0               1               1               
// 45ns            1               1               0               
// 50ns            0               1               0               
// 55ns            1               1               0               
// 60ns            0               1               0               
// 65ns            1               1               0               
// 70ns            0               1               0               
// 75ns            1               1               0               
// 80ns            0               1               0               
// 85ns            1               1               0               
// 90ns            0               1               0         
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Initially, all signals are inactive. Apply clk as 0 at time 0ns, with input a as 'x'. At 5ns, apply clk as 1 and a as 0.",
  "scenario 2": "At 10ns, clock signal clk goes to 0 with input a remaining as 0. Validate the output q.",
  "scenario 3": "At 15ns, clk rises to 1 again while keeping a as 0. Check the output q after this cycle.",
  "scenario 4": "At 20ns, clk goes to 0 with input a still 0. Observe the output q.",
  "scenario 5": "At 25ns, clk goes to 1 while input a remains 0. Monitor the output q.",
  "scenario 6": "At 30ns, clk falls to 0. Keep input a as 0 and validate the output q.",
  "scenario 7": "At 35ns, clk rises to 1 and change a to 1. Check output q after this clock cycle.",
  "scenario 8": "At 40ns, clk goes to 0 with input a as 1. Check the output q there.",
  "scenario 9": "At 45ns, clk rises to 1 and a remains 1. Observe the output q.",
  "scenario 10": "At 50ns, clk falls to 0 with a as 1, monitoring the output q.",
  "scenario 11": "At 55ns, the clk signal rises to 1 while a remains 1. Watch the output q.",
  "scenario 12": "At 60ns, clk goes to 0 with input a as 1. Validate the output q.",
  "scenario 13": "At 65ns, clk rises to 1 while a stays 1. Check the output q again.",
  "scenario 14": "At 70ns, the clk signal drops to 0 and a remains 1. Observe the output q.",
  "scenario 15": "At 75ns, clk rises to 1 while a stays 1. Monitor the output q.",
  "scenario 16": "At 80ns, clk goes to 0 with input a still 1. Validate the output q.",
  "scenario 17": "At 85ns, clk rises to 1 while a is still 1. Observe the output q.",
  "scenario 18": "Finally, at 90ns, clk falls to 0 with input a remaining 1. Check the output q."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  a;
wire  q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.a(a),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  a;
wire  q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.a(a),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    a = 'x';
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
    
    #10; a = 0; // At 5ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);

    // scenario 2
    scenario = 2;
    a = 0; // At 10ns
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);

    // scenario 3
    scenario = 3; 
    #10; // At 15ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);

    // scenario 4
    scenario = 4; 
    #10; // At 20ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
    
    // scenario 5
    scenario = 5; 
    #10; // At 25ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
    
    // scenario 6
    scenario = 6; 
    #10; // At 30ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);

    // scenario 7
    scenario = 7; 
    a = 1; // At 35ns
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
    
    // scenario 8
    scenario = 8; 
    #10; // At 40ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
    
    // scenario 9
    scenario = 9; 
    #10; // At 45ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);

    // scenario 10
    scenario = 10; 
    #10; // At 50ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
    
    // scenario 11
    scenario = 11; 
    #10; // At 55ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
    
    // scenario 12
    scenario = 12; 
    #10; // At 60ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
    
    // scenario 13
    scenario = 13; 
    #10; // At 65ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
    
    // scenario 14
    scenario = 14; 
    #10; // At 70ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
    
    // scenario 15
    scenario = 15; 
    #10; // At 75ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);

    // scenario 16
    scenario = 16; 
    #10; // At 80ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
    
    // scenario 17
    scenario = 17; 
    #10; // At 85ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);
    
    // scenario 18
    scenario = 18; 
    #10; // At 90ns
    $fdisplay(file, "[check]scenario: %d, clk = %d, a = %d, q = %d", scenario, clk, a, q);

    $fclose(file);
    $finish;
end

endmodule
```

