############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.

// time            clk             a               q               
// 0ns             0               x               x               
// 5ns             1               0               x               
// 10ns            0               0               x               
// 15ns            1               0               1               
// 20ns            0               0               1               
// 25ns            1               0               1               
// 30ns            0               0               1               
// 35ns            1               1               1               
// 40ns            0               1               1               
// 45ns            1               1               0               
// 50ns            0               1               0               
// 55ns            1               1               0               
// 60ns            0               1               0               
// 65ns            1               1               0               
// 70ns            0               1               0               
// 75ns            1               1               0               
// 80ns            0               1               0               
// 85ns            1               1               0               
// 90ns            0               1               0         
RTL header:
module top_module (
	input clk,
	input a, 
	output reg q
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
    input clk,
    input a, 
    output reg q
);

    reg [1:0] state;

    always @(posedge clk) begin
        case (state)
            2'b00: begin
                q <= 1'b0; // Initial state when both clk and a are low
                if (a) state <= 2'b01; // Move to state 01 on a=1
            end
            2'b01: begin
                q <= 1'b1; // Set q to 1 when in state 01
                if (~a) state <= 2'b10; // Move to state 10 on a=0
            end
            2'b10: begin
                q <= 1'b0; // Set q to 0 when in state 10
                if (a) state <= 2'b11; // Move to state 11 on a=1
            end
            2'b11: begin
                q <= 1'b0; // Set q to 0 when in state 11
                if (~a) state <= 2'b01; // Return to state 01 on a=0
            end
            default: state <= 2'b00; // Reset to initial state
        endcase
    end

    initial begin
        state = 2'b00; // Initial state
        q = 1'b0; // Initial output
    end
endmodule
```

