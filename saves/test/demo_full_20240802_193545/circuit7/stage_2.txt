############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.

// time            clk             a               q               
// 0ns             0               x               x               
// 5ns             1               0               x               
// 10ns            0               0               x               
// 15ns            1               0               1               
// 20ns            0               0               1               
// 25ns            1               0               1               
// 30ns            0               0               1               
// 35ns            1               1               1               
// 40ns            0               1               1               
// 45ns            1               1               0               
// 50ns            0               1               0               
// 55ns            1               1               0               
// 60ns            0               1               0               
// 65ns            1               1               0               
// 70ns            0               1               0               
// 75ns            1               1               0               
// 80ns            0               1               0               
// 85ns            1               1               0               
// 90ns            0               1               0         
RTL testbench specification:
{
  "important data": "This is a sequential circuit that behaves based on the given clock (clk) and input (a) signals. The output (q) is a registered state that is influenced by the input signals over time as outlined in the provided waveform data.",
  "technical specifications": [
    "1. The DUT is implemented as a sequential circuit with inputs clk and a, and output q.",
    "2. The clock signal (clk) is toggled every 5ns, with the first rising edge occurring at 5ns.",
    "3. The input signal a changes at various points in time, and the corresponding output q must be validated at each clock cycle.",
    "4. The expected behavior of the output q at different clock cycles is derived from the provided simulation waveforms.",
    "5. The testbench will include a clock generation mechanism to simulate the clk signal.",
    "6. The testbench will apply various values of a over multiple clock cycles as per the provided waveforms.",
    "7. The expected outputs for each clock cycle based on the simulation waveforms will be checked against the actual outputs from the DUT."
  ]
}
DUT header:
module top_module (
	input clk,
	input a, 
	output reg q
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Initially, all signals are inactive. Apply clk as 0 at time 0ns, with input a as 'x'. At 5ns, apply clk as 1 and a as 0.",
  "scenario 2": "At 10ns, clock signal clk goes to 0 with input a remaining as 0. Validate the output q.",
  "scenario 3": "At 15ns, clk rises to 1 again while keeping a as 0. Check the output q after this cycle.",
  "scenario 4": "At 20ns, clk goes to 0 with input a still 0. Observe the output q.",
  "scenario 5": "At 25ns, clk goes to 1 while input a remains 0. Monitor the output q.",
  "scenario 6": "At 30ns, clk falls to 0. Keep input a as 0 and validate the output q.",
  "scenario 7": "At 35ns, clk rises to 1 and change a to 1. Check output q after this clock cycle.",
  "scenario 8": "At 40ns, clk goes to 0 with input a as 1. Check the output q there.",
  "scenario 9": "At 45ns, clk rises to 1 and a remains 1. Observe the output q.",
  "scenario 10": "At 50ns, clk falls to 0 with a as 1, monitoring the output q.",
  "scenario 11": "At 55ns, the clk signal rises to 1 while a remains 1. Watch the output q.",
  "scenario 12": "At 60ns, clk goes to 0 with input a as 1. Validate the output q.",
  "scenario 13": "At 65ns, clk rises to 1 while a stays 1. Check the output q again.",
  "scenario 14": "At 70ns, the clk signal drops to 0 and a remains 1. Observe the output q.",
  "scenario 15": "At 75ns, clk rises to 1 while a stays 1. Monitor the output q.",
  "scenario 16": "At 80ns, clk goes to 0 with input a still 1. Validate the output q.",
  "scenario 17": "At 85ns, clk rises to 1 while a is still 1. Observe the output q.",
  "scenario 18": "Finally, at 90ns, clk falls to 0 with input a remaining 1. Check the output q."
}

