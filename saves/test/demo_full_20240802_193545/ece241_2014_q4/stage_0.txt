############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
Given the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.

// Build this circuit in Verilog.

// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.
RTL header:
module top_module (
	input clk,
	input x,
	output z
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
    input clk,
    input x,
    output z
);
    reg dff_a, dff_b, dff_c;

    // D Flip-Flops
    always @(posedge clk) begin
        dff_a <= (x ^ dff_a);         // XOR gate
        dff_b <= (x & ~dff_b);        // AND gate
        dff_c <= (x | ~dff_c);        // OR gate
    end

    // XNOR gate with flip-flop outputs
    assign z = ~(dff_a ^ dff_b ^ dff_c);

endmodule
```

