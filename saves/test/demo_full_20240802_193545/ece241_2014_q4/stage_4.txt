############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module (
	input clk,
	input x,
	output z
);

Your other information:
RTL circuit problem description:
Given the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.

// Build this circuit in Verilog.

// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Initialize the simulation by driving the clock signal 'clk' to 0 and the input signal 'x' to 0. This should happen for at least 2 clock cycles, to ensure the D flip-flops are reset to zero.",
  "scenario 2": "At clock cycle 2, toggle the input 'x' to 1 and observe the outputs for one clock cycle (clk = 3).",
  "scenario 3": "At clock cycle 3, toggle 'x' back to 0 and maintain this state for two clock cycles (clk = 4, 5).",
  "scenario 4": "At clock cycle 5, toggle 'x' to 1 again and observe the outputs for one clock cycle (clk = 6).",
  "scenario 5": "At clock cycle 6, switch 'x' to 0 and monitor the response for three clock cycles (clk = 7, 8, 9).",
  "scenario 6": "At clock cycle 9, set 'x' to 1 again and maintain it for four clock cycles (clk = 10, 11, 12, 13), monitoring the output 'z' throughout.",
  "scenario 7": "At clock cycle 13, toggle 'x' back to 0 and observe how the system responds, checking the outputs for three clock cycles (clk = 14, 15, 16)."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  x;
wire  z;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.x(x),
	.z(z)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, x = %d, z = %d", scenario, clk, x, z);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, x = %d, z = %d", scenario, clk, x, z);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  x;
wire  z;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.x(x),
	.z(z)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    x = 0;
    repeat(2) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, x = %d, z = %d", scenario, clk, x, z);
        #10;
    end

    // scenario 2
    scenario = 2;
    x = 1;
    $fdisplay(file, "[check]scenario: %d, clk = %d, x = %d, z = %d", scenario, clk, x, z);
    #10;

    // scenario 3
    scenario = 3;
    x = 0;
    repeat(2) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, x = %d, z = %d", scenario, clk, x, z);
        #10;
    end

    // scenario 4
    scenario = 4;
    x = 1;
    $fdisplay(file, "[check]scenario: %d, clk = %d, x = %d, z = %d", scenario, clk, x, z);
    #10;

    // scenario 5
    scenario = 5;
    x = 0;
    repeat(3) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, x = %d, z = %d", scenario, clk, x, z);
        #10;
    end

    // scenario 6
    scenario = 6;
    x = 1;
    repeat(4) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, x = %d, z = %d", scenario, clk, x, z);
        #10;
    end

    // scenario 7
    scenario = 7;
    x = 0;
    repeat(3) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, x = %d, z = %d", scenario, clk, x, z);
        #10;
    end

    $fclose(file);
    $finish;
end

endmodule
```

