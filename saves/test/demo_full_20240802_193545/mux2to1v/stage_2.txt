############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. DUT specification: The DUT is a 2-1 multiplexer that chooses between two input signals based on the selection signal 'sel'. When 'sel' is 0, the output 'out' equals input 'a'; when 'sel' is 1, the output 'out' equals input 'b'.",
    "2. Inputs: The DUT accepts two inputs, 'a' and 'b', both of size 100 bits (99:0), and a selection signal 'sel' which is a single bit.",
    "3. Output: The DUT provides one output, 'out', which is also 100 bits wide (99:0).",
    "4. Functional Requirements: The multiplexer must correctly route the inputs to the output based on the value of 'sel'.",
    "5. Testbench Objectives: The testbench will apply a variety of input combinations for 'a', 'b', and 'sel' to ensure that the output 'out' is correct based on the given conditions."
  ]
}
DUT header:
module top_module (
	input [99:0] a,
	input [99:0] b,
	input sel,
	output [99:0] out
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Apply a = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, b = 100'b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111, sel = 0 for 1 clock cycle.",
  "scenario 2": "Apply a = 100'b1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, b = 100'b0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, sel = 1 for 1 clock cycle.",
  "scenario 3": "Apply a = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, b = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, sel = 0 for 1 clock cycle.",
  "scenario 4": "Apply a = 100'b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111, b = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, sel = 1 for 1 clock cycle.",
  "scenario 5": "Apply a = 100'b0011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011, b = 100'b1100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100, sel = 0 for 1 clock cycle, then change sel to 1 for the next clock cycle.",
  "scenario 6": "Apply a = 100'b1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, b = 100'b0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, sel = 0 for 1 clock cycle, then toggle sel to 1 for 1 clock cycle."
}

