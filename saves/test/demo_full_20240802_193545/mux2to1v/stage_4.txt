############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, sel = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, sel = %d, out = %d", "scenario: 1b, a = %d, b = %d, sel = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [99:0] a,
	input [99:0] b,
	input sel,
	output [99:0] out
);

Your other information:
RTL circuit problem description:
Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. DUT specification: The DUT is a 2-1 multiplexer that chooses between two input signals based on the selection signal 'sel'. When 'sel' is 0, the output 'out' equals input 'a'; when 'sel' is 1, the output 'out' equals input 'b'.",
    "2. Inputs: The DUT accepts two inputs, 'a' and 'b', both of size 100 bits (99:0), and a selection signal 'sel' which is a single bit.",
    "3. Output: The DUT provides one output, 'out', which is also 100 bits wide (99:0).",
    "4. Functional Requirements: The multiplexer must correctly route the inputs to the output based on the value of 'sel'.",
    "5. Testbench Objectives: The testbench will apply a variety of input combinations for 'a', 'b', and 'sel' to ensure that the output 'out' is correct based on the given conditions."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply a = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, b = 100'b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111, sel = 0 for 1 clock cycle.",
  "scenario 2": "Apply a = 100'b1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, b = 100'b0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, sel = 1 for 1 clock cycle.",
  "scenario 3": "Apply a = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, b = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, sel = 0 for 1 clock cycle.",
  "scenario 4": "Apply a = 100'b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111, b = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, sel = 1 for 1 clock cycle.",
  "scenario 5": "Apply a = 100'b0011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011, b = 100'b1100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100, sel = 0 for 1 clock cycle, then change sel to 1 for the next clock cycle.",
  "scenario 6": "Apply a = 100'b1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, b = 100'b0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, sel = 0 for 1 clock cycle, then toggle sel to 1 for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, sel = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, sel = %d, out = %d", "scenario: 1b, a = %d, b = %d, sel = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    reg [99:0] a;
    reg [99:0] b;
    reg sel;
    wire [99:0] out;

    // Instantiate the DUT
    top_module DUT (
        .a(a),
        .b(b),
        .sel(sel),
        .out(out)
    );

    integer file;

    initial begin
        // Open the output file
        file = $fopen("TBout.txt", "w");

        // Scenario 1
        a = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
        b = 100'b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
        sel = 0;
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 1, a = %d, b = %d, sel = %d, out = %d", a, b, sel, out);
        
        // Scenario 2
        a = 100'b1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
        b = 100'b0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101;
        sel = 1;
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 2, a = %d, b = %d, sel = %d, out = %d", a, b, sel, out);
        
        // Scenario 3
        a = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001;
        b = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
        sel = 0;
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 3, a = %d, b = %d, sel = %d, out = %d", a, b, sel, out);

        // Scenario 4
        a = 100'b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
        b = 100'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
        sel = 1;
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 4, a = %d, b = %d, sel = %d, out = %d", a, b, sel, out);
        
        // Scenario 5
        a = 100'b0011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011;
        b = 100'b1100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100;
        sel = 0;
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 5a, a = %d, b = %d, sel = %d, out = %d", a, b, sel, out);
        sel = 1;
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 5b, a = %d, b = %d, sel = %d, out = %d", a, b, sel, out);

        // Scenario 6
        a = 100'b1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
        b = 100'b0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101;
        sel = 0;
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 6a, a = %d, b = %d, sel = %d, out = %d", a, b, sel, out);
        sel = 1;
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 6b, a = %d, b = %d, sel = %d, out = %d", a, b, sel, out);

        // Close the output file
        $fclose(file);
        
        $finish;
    end

endmodule
```

