############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", "scenario: 1b, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	input ring, 
	input vibrate_mode,
	output ringer,
	output motor
);

Your other information:
RTL circuit problem description:
Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a module named 'top_module' which has two input signals: 'ring' and 'vibrate_mode'.",
    "2. The output signals from the DUT are 'ringer' and 'motor'.",
    "3. When 'ring' is asserted (1) and 'vibrate_mode' is also asserted (1), the output should prioritize 'motor' to be on (motor = 1, ringer = 0).",
    "4. When 'ring' is asserted (1) and 'vibrate_mode' is not asserted (0), the output should turn on the ringer (ringer = 1, motor = 0).",
    "5. If 'ring' is not asserted (0), both outputs should be off (ringer = 0, motor = 0).",
    "6. The testbench must generate various test cases to validate all possible combinations of input signals and check the corresponding outputs."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set ring to 0 and vibrate_mode to 0 for 10 clock cycles. This tests the default state where no alerts are triggered.",
  "scenario 2": "Set ring to 0 and vibrate_mode to 1 for 10 clock cycles. This checks if the system remains idle with vibration mode enabled but no incoming call.",
  "scenario 3": "Set ring to 1 and vibrate_mode to 0 for 10 clock cycles. This tests the condition where an incoming call should activate the ringer.",
  "scenario 4": "Set ring to 1 and vibrate_mode to 1 for 10 clock cycles. This tests the priority of the vibration mode when both inputs are asserted.",
  "scenario 5": "Set ring to 1, then change vibrate_mode to 0 after 5 clock cycles. Observe the transition to verify the output reflects the change in state.",
  "scenario 6": "Set ring to 0, then change vibrate_mode to 1 after 5 clock cycles for 10 clock cycles. This ensures that the device remains idle under vibrate mode.",
  "scenario 7": "Cycle through all combinations of ring and vibrate_mode, pausing each combination for 5 clock cycles to observe stability in outputs: [0,0], [0,1], [1,0], [1,1]."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", "scenario: 1b, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module; 
    // Inputs
    reg ring; 
    reg vibrate_mode; 

    // Outputs
    wire ringer; 
    wire motor; 

    // Instantiate the DUT
    top_module DUT (
        .ring(ring), 
        .vibrate_mode(vibrate_mode), 
        .ringer(ringer), 
        .motor(motor)
    );

    // File Descriptor
    integer fd;

    initial begin
        // Open file for writing
        fd = $fopen("TBout.txt", "w");

        // Scenario 1
        ring = 0; 
        vibrate_mode = 0; 
        #10;
        $fdisplay(fd, "scenario: 1, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);

        // Scenario 2
        ring = 0; 
        vibrate_mode = 1; 
        #10;
        $fdisplay(fd, "scenario: 2, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);

        // Scenario 3
        ring = 1; 
        vibrate_mode = 0; 
        #10;
        $fdisplay(fd, "scenario: 3, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);

        // Scenario 4
        ring = 1; 
        vibrate_mode = 1; 
        #10;
        $fdisplay(fd, "scenario: 4, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);

        // Scenario 5
        ring = 1; 
        vibrate_mode = 0; 
        #5;
        $fdisplay(fd, "scenario: 5a, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        vibrate_mode = 1; 
        #5;
        $fdisplay(fd, "scenario: 5b, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);

        // Scenario 6
        ring = 0; 
        vibrate_mode = 1; 
        #5; 
        $fdisplay(fd, "scenario: 6a, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        #5; 
        $fdisplay(fd, "scenario: 6b, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);

        // Scenario 7
        for (integer i = 0; i < 4; i = i + 1) begin
            {ring, vibrate_mode} = i;
            #5;
            $fdisplay(fd, "scenario: 7, ring = %d, vibrate_mode = %d, ringer = %d, motor = %d", ring, vibrate_mode, ringer, motor);
        end

        // Close file
        $fclose(fd);
        $finish;
    end
endmodule
```

