############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module (
	input clk,
	input w,
	input R,
	input E,
	input L,
	output reg Q
);

Your other information:
RTL circuit problem description:
Consider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Initial setup - apply reset condition by driving L high while keeping E low, then release L after 1 clock cycle.",
  "scenario 2": "Load a value into the shift register - set L high and R to the desired value, observe the value loaded on the next clock edge. L should go low after 1 clock cycle.",
  "scenario 3": "Shift operation - set E high and w to a new value. Observe the shifting operation occurring over 3 clock cycles with the input w changing on the first clock cycle.",
  "scenario 4": "Test with continuous shifting - keep E high and provide different values for w every clock cycle for 5 clock cycles.",
  "scenario 5": "Load a value again while shifting - set E high and provide new values for w for 2 clock cycles, then assert L high for 1 clock cycle with R as a new value. L goes low after this clock cycle and observe the state.",
  "scenario 6": "Disable shifting - set E low after holding it high for 3 clock cycles, then observe the output Q holds without change for 2 clock cycles while E remains low.",
  "scenario 7": "Test edge case for enable signal - set E and L together and switch L off after 1 clock cycle while observing output Q.",
  "scenario 8": "Interrupt the load operation by asserting E during L, set L high for 2 clock cycles while E is also high, then deassert L."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  w;
reg  R;
reg  E;
reg  L;
wire  Q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.w(w),
	.R(R),
	.E(E),
	.L(L),
	.Q(Q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  w;
reg  R;
reg  E;
reg  L;
wire  Q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.w(w),
	.R(R),
	.E(E),
	.L(L),
	.Q(Q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    L = 1; E = 0; R = 0; w = 0; 
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end
    L = 0; 
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end 

    // scenario 2
    scenario = 2;
    L = 1; R = 8'b10101010; E = 0; w = 0; 
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end
    L = 0; 
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end 

    // scenario 3
    scenario = 3;
    E = 1; w = 1; L = 0; R = 0; 
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end
    w = 0; 
    repeat(2) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end 

    // scenario 4
    scenario = 4;
    w = 1; L = 0; R = 0; E = 1; 
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
        w = w + 1; // Changing w value to simulate continuous shifting
    end 

    // scenario 5
    scenario = 5;
    E = 1; w = 1; L = 0; R = 0; 
    repeat(2) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end 
    L = 1; R = 8'b11111111; 
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end 
    L = 0; 
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end 

    // scenario 6
    scenario = 6;
    E = 1; L = 0; R = 0; w = 0; 
    repeat(3) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end 
    E = 0; 
    repeat(2) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end 

    // scenario 7
    scenario = 7;
    E = 1; L = 1; R = 0; w = 0; 
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end 
    L = 0; 
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end 

    // scenario 8
    scenario = 8;
    L = 1; E = 1; R = 0; w = 0; 
    repeat(2) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end 
    L = 0; 
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, w = %d, R = %d, E = %d, L = %d, Q = %d", scenario, clk, w, R, E, L, Q);
        #10;
    end 

    $fclose(file);
    $finish;
end

endmodule
```

