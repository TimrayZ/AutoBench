############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in1 = %d, in2 = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in1 = %d, in2 = %d, out = %d", "scenario: 1b, in1 = %d, in2 = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input in1,
	input in2,
	output logic out
);

Your other information:
RTL circuit problem description:
Implement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT module is named 'top_module' and has two inputs: 'in1' (logic) and 'in2' (logic).",
    "2. The output of the DUT is 'out' (logic).",
    "3. The circuit implements an AND gate where 'in2' has a bubble (inverted input) before reaching the AND gate. Therefore, the effective operation being performed is: out = in1 AND (NOT in2).",
    "4. Testbench should apply various combinations of 'in1' and 'in2' inputs to verify the output behavior against the expected output."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply in1 = 0 and in2 = 0. Hold for 10 clock cycles.",
  "scenario 2": "Apply in1 = 0 and in2 = 1. Hold for 10 clock cycles.",
  "scenario 3": "Apply in1 = 1 and in2 = 0. Hold for 10 clock cycles.",
  "scenario 4": "Apply in1 = 1 and in2 = 1. Hold for 10 clock cycles.",
  "scenario 5": "Generate a clock signal. Apply in1 = 0 and toggle in2 from 0 to 1 every clock cycle for 5 cycles.",
  "scenario 6": "Generate a clock signal. Apply in1 = 1 and toggle in2 from 0 to 1 every clock cycle for 5 cycles.",
  "scenario 7": "Randomly toggle in1 and in2 every clock cycle for a total of 20 cycles."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in1 = %d, in2 = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in1 = %d, in2 = %d, out = %d", "scenario: 1b, in1 = %d, in2 = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
module tb_top_module;
    // Declare inputs and outputs
    logic in1;
    logic in2;
    logic out;

    // Instantiate the DUT
    top_module DUT (
        .in1(in1),
        .in2(in2),
        .out(out)
    );

    // File handling
    integer file;

    // Clock generation
    logic clk;
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 10 time unit clock period
    end

    // Test scenarios
    initial begin
        file = $fopen("TBout.txt", "w"); // Open output file

        // Scenario 1: Apply in1 = 0 and in2 = 0
        in1 = 0; in2 = 0;
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 1, in1 = %d, in2 = %d, out = %d", in1, in2, out);
        #90; // Hold for 10 clock cycles

        // Scenario 2: Apply in1 = 0 and in2 = 1
        in1 = 0; in2 = 1;
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 2, in1 = %d, in2 = %d, out = %d", in1, in2, out);
        #90; // Hold for 10 clock cycles

        // Scenario 3: Apply in1 = 1 and in2 = 0
        in1 = 1; in2 = 0;
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 3, in1 = %d, in2 = %d, out = %d", in1, in2, out);
        #90; // Hold for 10 clock cycles

        // Scenario 4: Apply in1 = 1 and in2 = 1
        in1 = 1; in2 = 1;
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 4, in1 = %d, in2 = %d, out = %d", in1, in2, out);
        #90; // Hold for 10 clock cycles

        // Scenario 5: Toggle in2 while in1 = 0
        in1 = 0;
        for (int i = 0; i < 5; i++) begin
            in2 = i % 2; // Toggle in2 between 0 and 1
            #10; // Wait for signals to stabilize
            $fdisplay(file, "scenario: 5%d, in1 = %d, in2 = %d, out = %d", i % 2, in1, in2, out);
        end

        // Scenario 6: Toggle in2 while in1 = 1
        in1 = 1;
        for (int i = 0; i < 5; i++) begin
            in2 = i % 2; // Toggle in2 between 0 and 1
            #10; // Wait for signals to stabilize
            $fdisplay(file, "scenario: 6%d, in1 = %d, in2 = %d, out = %d", i % 2, in1, in2, out);
        end

        // Scenario 7: Randomly toggle in1 and in2 for 20 cycles
        for (int i = 0; i < 20; i++) begin
            {in1, in2} = {$random} % 4; // Randomly generate in1 and in2
            #10; // Wait for signals to stabilize
            $fdisplay(file, "scenario: 7%d, in1 = %d, in2 = %d, out = %d", i, in1, in2, out);
        end

        // Close file
        $fclose(file);
        $finish;
    end
endmodule
```

