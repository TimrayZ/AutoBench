############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input load,
	input [511:0] data,
	output reg [511:0] q);

Your other information:
RTL circuit problem description:
Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:
// Left | Center | Right | Center's next state
// 1 | 1 | 1 | 0
// 1 | 1 | 0 | 1
// 1 | 0 | 1 | 0
// 1 | 0 | 0 | 1
// 0 | 1 | 1 | 1
// 0 | 1 | 0 | 0 
// 0 | 0 | 1 | 1
// 0 | 0 | 0 | 0
// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "At time 0 ns, assert the load signal high and provide a data value of '1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010' (512 bits) to the DUT. The clock signal should be toggled to high (1) and then to low (0) to simulate a clock cycle.",
  "scenario 2": "At time 10 ns, deassert the load signal (set it to low) while maintaining the same data input. Toggle the clock signal from low (0) to high (1) and back to low (0) to advance the cell states for the first time.",
  "scenario 3": "At time 20 ns, change the data input to '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000' (all cells off) while keeping the load signal deasserted. Toggle the clock from low (0) to high (1) and back to low (0) to simulate a state transition.",
  "scenario 4": "At time 30 ns, keep the load signal low and provide another data array '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111' (all cells on) while toggling the clock to simulate a state transition.",
  "scenario 5": "At time 40 ns, change the load signal to high again and provide a random data value '11001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011' (512 bits) to the DUT. Toggle the clock signal to ensure the DUT registers this new state.",
  "scenario 6": "At time 50 ns, deassert the load signal and toggle the clock to keep updating the state based on the previous states. Repeat this clock toggle for 10 cycles (from 50 ns to 90 ns) to allow observation of state transitions without loading new data."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  load;
reg [511:0] data;
wire [511:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.load(load),
	.data(data),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  load;
reg [511:0] data;
wire [511:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.load(load),
	.data(data),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    load = 1;
    data = 512'b1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    #10; // Simulate clock high
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
    #10; // Simulate clock low
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);

    // scenario 2
    scenario = 2;
    load = 0;
    #10; // Simulate clock high
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
    #10; // Simulate clock low
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);

    // scenario 3
    scenario = 3;
    load = 0;
    data = 512'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    #10; // Simulate clock high
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
    #10; // Simulate clock low
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);

    // scenario 4
    scenario = 4;
    load = 0;
    data = 512'b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
    #10; // Simulate clock high
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
    #10; // Simulate clock low
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);

    // scenario 5
    scenario = 5;
    load = 1;
    data = 512'b11001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011;
    #10; // Simulate clock high
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
    #10; // Simulate clock low
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
    
    // scenario 6
    scenario = 6;
    load = 0;
    repeat(10) begin
        #10; // Simulate clock high
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
        #10; // Simulate clock low
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
    end

    $fclose(file);
    $finish;
end

endmodule
```

