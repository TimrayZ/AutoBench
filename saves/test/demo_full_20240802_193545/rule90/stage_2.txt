############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:
// Left | Center | Right | Center's next state
// 1 | 1 | 1 | 0
// 1 | 1 | 0 | 1
// 1 | 0 | 1 | 0
// 1 | 0 | 0 | 1
// 0 | 1 | 1 | 1
// 0 | 1 | 0 | 0 
// 0 | 0 | 1 | 1
// 0 | 0 | 0 | 0
// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).
RTL testbench specification:
{
  "important data": "Rule 90 is a one-dimensional cellular automaton that updates the state of an array of cells based on the XOR of each cell with its two neighbors. The DUT processes a 512-cell array (q[511:0]) and has specific behavior based on the load input to initialize its state with a provided data array.",
  "technical specifications": [
    "1: The DUT module name is top_module.",
    "2: The DUT has three inputs: clk (clock), load (control signal), and data (initial state of the cells).",
    "3: The DUT output is q, which is a 512-bit wide register representing the current state of the cellular automaton.",
    "4: The state transition for each center cell q[i] is determined by the XOR of its two immediate neighbors (q[i-1] and q[i+1]), with the condition that q[-1] and q[512] are considered to be 0.",
    "5: The DUT must load the initial state when the load signal is asserted on the rising edge of clk.",
    "6: The output should reflect the new state of the array after each clock cycle if load is not active."
  ]
}
DUT header:
module top_module(
	input clk,
	input load,
	input [511:0] data,
	output reg [511:0] q);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "At time 0 ns, assert the load signal high and provide a data value of '1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010' (512 bits) to the DUT. The clock signal should be toggled to high (1) and then to low (0) to simulate a clock cycle.",
  "scenario 2": "At time 10 ns, deassert the load signal (set it to low) while maintaining the same data input. Toggle the clock signal from low (0) to high (1) and back to low (0) to advance the cell states for the first time.",
  "scenario 3": "At time 20 ns, change the data input to '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000' (all cells off) while keeping the load signal deasserted. Toggle the clock from low (0) to high (1) and back to low (0) to simulate a state transition.",
  "scenario 4": "At time 30 ns, keep the load signal low and provide another data array '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111' (all cells on) while toggling the clock to simulate a state transition.",
  "scenario 5": "At time 40 ns, change the load signal to high again and provide a random data value '11001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011' (512 bits) to the DUT. Toggle the clock signal to ensure the DUT registers this new state.",
  "scenario 6": "At time 50 ns, deassert the load signal and toggle the clock to keep updating the state based on the previous states. Repeat this clock toggle for 10 cycles (from 50 ns to 90 ns) to allow observation of state transitions without loading new data."
}

