############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:
// Left | Center | Right | Center's next state
// 1 | 1 | 1 | 0
// 1 | 1 | 0 | 1
// 1 | 0 | 1 | 0
// 1 | 0 | 0 | 1
// 0 | 1 | 1 | 1
// 0 | 1 | 0 | 0 
// 0 | 0 | 1 | 1
// 0 | 0 | 0 | 0
// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).
RTL header:
module top_module(
	input clk,
	input load,
	input [511:0] data,
	output reg [511:0] q);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module(
    input clk,
    input load,
    input [511:0] data,
    output reg [511:0] q
);
    reg [511:0] next_q;

    always @(posedge clk) begin
        if (load) begin
            q <= data; // Load the initial state from data
        end else begin
            q <= next_q; // Advance to the next state
        end
    end
    
    always @* begin
        // Compute next state based on Rule 90
        next_q[0] = 0 ^ q[1]; // Left boundary treated as 0
        next_q[511] = q[510] ^ 0; // Right boundary treated as 0
        for (integer i = 1; i < 511; i = i + 1) begin
            next_q[i] = q[i-1] ^ q[i+1]; // XOR of neighbors
        end
    end
endmodule
```

