############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. You are in the first stage. In this stage, please summarize the technical details of the DUT and give me a technical specification of the testbench generation task, so we can use it to design its corresponding testbench.
3. The core of testbench is the testcases. It usually include two parts logically: the input signals to the DUT and the expected result signals from DUT. The testbench will send the input signals to DUT and check if the result signals are the same as the expected result signals. If they are the same, this means the DUT is passed. Otherwise the DUT fails.
4. Your technical specification should include these sections:
- section 1: specification of the DUT, including the module header of the RTL code. If table or other detailed data is provided in the original problem description, DO repeat them in your response. They are very important!!!
5. your response should be in the form of JSON.
6. below is the information including the problem description and the DUT header:
RTL circuit problem description:
Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by "amount." Assume the right shit is an arithmetic right shift. 

// Signals are defined as below:
// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.
// (2) ena: Chooses whether to shift. Active high. 
// (3) amount: Chooses which direction and how much to shift. 
//     (a) 2'b00: shift left by 1 bit. 
//     (b) 2'b01: shift left by 8 bits. 
//     (c) 2'b10: shift right by 1 bit. 
//     (d) 2'b11: shift right by 8 bits. 
// (4) q: The contents of the shifter.
DUT header:
module top_module(
	input clk,
	input load,
	input ena,
	input [1:0] amount,
	input [63:0] data,
	output reg [63:0] q);

your response must be in JSON form. example:
{
  "important data": "...", # type: string. If no table, state transition or other direct data, leave this with ""
  "technical specifications": ["...", "...", ...] # each element of the list is one specification string, the starting of the string is its index 
}



########## assistant ##########
{
  "important data": "The DUT is a 64-bit arithmetic shift register with synchronous load capability, which shifts in both left and right directions by specified bit amounts (1 or 8) dependent on the 'amount' signal.",
  "technical specifications": [
    "1. The DUT module header is: 'module top_module(input clk, input load, input ena, input [1:0] amount, input [63:0] data, output reg [63:0] q);'",
    "2. The shift register implements four shift operations based on the 'amount' signal: 00 for left shift by 1 bit, 01 for left shift by 8 bits, 10 for arithmetic right shift by 1 bit, and 11 for arithmetic right shift by 8 bits.",
    "3. The 'load' signal is active high and is used to load the shift register with the input data instead of performing a shift operation.",
    "4. The 'ena' signal is active high and enables the shifting operation when asserted.",
    "5. The output 'q' holds the contents of the shift register after a load or shift operation."
  ]
}

