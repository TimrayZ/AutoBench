############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by "amount." Assume the right shit is an arithmetic right shift. 

// Signals are defined as below:
// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.
// (2) ena: Chooses whether to shift. Active high. 
// (3) amount: Chooses which direction and how much to shift. 
//     (a) 2'b00: shift left by 1 bit. 
//     (b) 2'b01: shift left by 8 bits. 
//     (c) 2'b10: shift right by 1 bit. 
//     (d) 2'b11: shift right by 8 bits. 
// (4) q: The contents of the shifter.
RTL testbench specification:
{
  "important data": "The DUT is a 64-bit arithmetic shift register with synchronous load capability, which shifts in both left and right directions by specified bit amounts (1 or 8) dependent on the 'amount' signal.",
  "technical specifications": [
    "1. The DUT module header is: 'module top_module(input clk, input load, input ena, input [1:0] amount, input [63:0] data, output reg [63:0] q);'",
    "2. The shift register implements four shift operations based on the 'amount' signal: 00 for left shift by 1 bit, 01 for left shift by 8 bits, 10 for arithmetic right shift by 1 bit, and 11 for arithmetic right shift by 8 bits.",
    "3. The 'load' signal is active high and is used to load the shift register with the input data instead of performing a shift operation.",
    "4. The 'ena' signal is active high and enables the shifting operation when asserted.",
    "5. The output 'q' holds the contents of the shift register after a load or shift operation."
  ]
}
DUT header:
module top_module(
	input clk,
	input load,
	input ena,
	input [1:0] amount,
	input [63:0] data,
	output reg [63:0] q);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "At time 0 ns, set 'load' to 1, 'ena' to 0, 'amount' to 00, and 'data' to 64'hA5A5A5A5A5A5A5A5. At time 10 ns, set 'load' back to 0 and 'ena' to 1. Observe the output 'q' after 1 clock cycle.",
  "scenario 2": "At time 0 ns, load the register with 'data' set to 64'hFFFFFFFFFFFFFFFF. Set 'load' to 1. At time 10 ns, set 'load' to 0, 'ena' to 1, and 'amount' to 00. Observe the output 'q' after 1 clock cycle.",
  "scenario 3": "At time 0 ns, load the register with 'data' set to 64'h1234567890ABCDEF. Set 'load' to 1. At time 10 ns, set 'load' back to 0, 'ena' to 1, and 'amount' to 01. Observe the output 'q' after 1 clock cycle.",
  "scenario 4": "At time 0 ns, load the register with 'data' set to 64'h0000000000000001. Set 'load' to 1. At time 10 ns, set 'load' to 0, 'ena' to 1, and 'amount' to 10. Observe the output 'q' after 1 clock cycle.",
  "scenario 5": "At time 0 ns, load the register with 'data' set to 64'h8000000000000000. Set 'load' to 1. At time 10 ns, set 'load' to 0, 'ena' to 1, and 'amount' to 11. Observe the output 'q' after 1 clock cycle.",
  "scenario 6": "At time 0 ns, load the register with 'data' set to 64'h1234567890ABCDEF. Set 'load' to 1. At time 10 ns, set 'load' to 0, 'ena' to 1, and 'amount' to 10. Observe the output 'q' after 1 clock cycle.",
  "scenario 7": "At time 0 ns, load the register with 'data' set to 64'hA5A5A5A5A5A5A5A5. Set 'load' to 1. At time 10 ns, set 'load' to 0, 'ena' to 1, and 'amount' to 01. Observe the output 'q' after 1 clock cycle.",
  "scenario 8": "At time 0 ns, load the register with 'data' set to 64'h5555555555555555. Set 'load' to 1. At time 10 ns, set 'load' to 0, 'ena' to 1, and 'amount' to 11. Observe the output 'q' after 1 clock cycle."
}

