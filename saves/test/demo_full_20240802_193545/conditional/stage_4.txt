############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, min = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, min = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [7:0] a,
	input [7:0] b,
	input [7:0] c,
	input [7:0] d,
	output reg [7:0] min
);

Your other information:
RTL circuit problem description:
Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). 
RTL testbench specification:
{
  "important data": "Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b).",
  "technical specifications": [
    "1. DUT Module Header: module top_module (input [7:0] a, input [7:0] b, input [7:0] c, input [7:0] d, output reg [7:0] min);",
    "2. Input Signals: The DUT takes four 8-bit unsigned inputs: a, b, c, and d.",
    "3. Output Signal: The DUT produces one 8-bit unsigned output signal: min, which indicates the minimum of the four inputs.",
    "4. Functionality Requirement: The DUT should compare the four unsigned input numbers and output the minimum value.",
    "5. Testbench Objective: The testbench should generate various test cases by providing different combinations of input values and verify that the output min from the DUT matches the expected minimum value."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set inputs a = 8'h03, b = 8'h05, c = 8'h02, d = 8'h04. Wait for 1 clock cycle to observe the output.",
  "scenario 2": "Set inputs a = 8'h00, b = 8'h00, c = 8'h00, d = 8'h00. Wait for 1 clock cycle to observe the output.",
  "scenario 3": "Set inputs a = 8'hFF, b = 8'h7F, c = 8'h80, d = 8'h01. Wait for 1 clock cycle to observe the output.",
  "scenario 4": "Set inputs a = 8'h10, b = 8'h20, c = 8'h30, d = 8'h40. Wait for 1 clock cycle to observe the output.",
  "scenario 5": "Set inputs a = 8'h99, b = 8'hAA, c = 8'h88, d = 8'h77. Wait for 1 clock cycle to observe the output.",
  "scenario 6": "Set inputs a = 8'h01, b = 8'h02, c = 8'h03, d = 8'h04. Wait for 1 clock cycle to observe the output.",
  "scenario 7": "Set inputs a = 8'h04, b = 8'h01, c = 8'h02, d = 8'h03. Wait for 1 clock cycle to observe the output.",
  "scenario 8": "Set inputs a = 8'h80, b = 8'h40, c = 8'h20, d = 8'h10. Wait for 1 clock cycle to observe the output.",
  "scenario 9": "Set inputs a = 8'hFE, b = 8'hFD, c = 8'hFC, d = 8'hFB. Wait for 1 clock cycle to observe the output.",
  "scenario 10": "Set inputs a = 8'h5A, b = 8'hA5, c = 8'h5F, d = 8'hA0. Wait for 1 clock cycle to observe the output."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, min = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, min = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Inputs
    reg [7:0] a;
    reg [7:0] b;
    reg [7:0] c;
    reg [7:0] d;

    // Outputs
    wire [7:0] min;

    // Instantiate the Device Under Test (DUT)
    top_module dut (
        .a(a),
        .b(b),
        .c(c),
        .d(d),
        .min(min)
    );

    // File for output
    integer file;

    initial begin
        // Open file for writing
        file = $fopen("TBout.txt", "w");
        
        // Scenario 1
        a = 8'h03; b = 8'h05; c = 8'h02; d = 8'h04;
        #1;
        $fdisplay(file, "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 2
        a = 8'h00; b = 8'h00; c = 8'h00; d = 8'h00;
        #1;
        $fdisplay(file, "scenario: 2, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 3
        a = 8'hFF; b = 8'h7F; c = 8'h80; d = 8'h01;
        #1;
        $fdisplay(file, "scenario: 3, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 4
        a = 8'h10; b = 8'h20; c = 8'h30; d = 8'h40;
        #1;
        $fdisplay(file, "scenario: 4, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 5
        a = 8'h99; b = 8'hAA; c = 8'h88; d = 8'h77;
        #1;
        $fdisplay(file, "scenario: 5, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 6
        a = 8'h01; b = 8'h02; c = 8'h03; d = 8'h04;
        #1;
        $fdisplay(file, "scenario: 6, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 7
        a = 8'h04; b = 8'h01; c = 8'h02; d = 8'h03;
        #1;
        $fdisplay(file, "scenario: 7, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 8
        a = 8'h80; b = 8'h40; c = 8'h20; d = 8'h10;
        #1;
        $fdisplay(file, "scenario: 8, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 9
        a = 8'hFE; b = 8'hFD; c = 8'hFC; d = 8'hFB;
        #1;
        $fdisplay(file, "scenario: 9, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 10
        a = 8'h5A; b = 8'hA5; c = 8'h5F; d = 8'hA0;
        #1;
        $fdisplay(file, "scenario: 10, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Close file
        $fclose(file);
        
        // End simulation
        $finish;
    end

endmodule
```

