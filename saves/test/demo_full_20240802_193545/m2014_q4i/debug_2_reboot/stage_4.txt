############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, out = %d", "scenario: 1b, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	output out);

Your other information:
RTL circuit problem description:
Build a circuit with no inputs and one output. That output should always drive 0 (or logic low).
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1: The DUT is a circuit with no inputs and a single output.",
    "2: The output of the DUT should always drive a logic low (0).",
    "3: The module header for the DUT is 'module top_module(output out);'.",
    "4: The testbench must provide verification that the output of the DUT remains at logic low (0) throughout the simulation."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Initialize the simulation. Wait for 10 clock cycles to allow any transient effects to settle in the DUT output.",
  "scenario 2": "Check the output of the DUT at clock cycle 10. Verify that the output remains at logic low (0).",
  "scenario 3": "Continue the simulation for an additional 10 clock cycles (total time of 20 clock cycles) and monitor the output. Ensure the output stays at logic low (0).",
  "scenario 4": "Simulate for a total of 50 clock cycles, periodically checking the output every 10 clock cycles (at cycles 10, 20, 30, 40, and 50) to confirm that the output remains logic low (0) throughout.",
  "scenario 5": "Extend the simulation to run for 100 clock cycles, checking the DUT's output at the end of each decade (10, 20, 30, ... until 100) and confirming it remains at logic low (0) across these checkpoints."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, out = %d", "scenario: 1b, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

  // DUT output signal
  wire out;

  // Instantiate the DUT
  top_module uut (
    .out(out)
  );

  // File descriptor for logging output
  integer file;

  initial begin
    // Open file for writing output
    file = $fopen("TBout.txt", "w");
    
    // Scenario 1: Initialize the simulation and wait for 10 clock cycles
    #10;
    $fdisplay(file, "scenario: 1, out = %d", out);

    // Scenario 2: Check output at clock cycle 10
    #10;
    $fdisplay(file, "scenario: 2, out = %d", out);

    // Scenario 3: Continue simulation for additional 10 clock cycles (total 20)
    #10;
    $fdisplay(file, "scenario: 3, out = %d", out);
    
    // Scenario 4: Simulate for total of 50 clock cycles checking every 10 cycles
    #10;
    $fdisplay(file, "scenario: 4, out = %d", out);
    #10;
    $fdisplay(file, "scenario: 4a, out = %d", out);
    #10;
    $fdisplay(file, "scenario: 4b, out = %d", out);
    #10;
    $fdisplay(file, "scenario: 4c, out = %d", out);
    #10;
    $fdisplay(file, "scenario: 4d, out = %d", out);

    // Scenario 5: Extend simulation to 100 cycles checking every decade
    repeat(5) begin
      #10;
      $fdisplay(file, "scenario: 5, out = %d", out);
    end

    // Close the file
    $fclose(file);
    // End the simulation
    $finish;
  end
  
endmodule
```

