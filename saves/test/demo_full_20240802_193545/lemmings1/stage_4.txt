############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module (
	input clk,
	input areset,
	input bump_left,
	input bump_right,
	output walk_left,
	output walk_right
);

Your other information:
RTL circuit problem description:
The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Initially, assert areset high and hold for 1 clock cycle to reset the DUT. After reset, release areset and wait for 1 clock cycle.",
  "scenario 2": "After the reset, set bump_left high for 1 clock cycle and observe the outputs. Ensure bump_right remains low during this cycle.",
  "scenario 3": "Set bump_right high for 1 clock cycle, while bump_left is low. Observe the outputs during this cycle.",
  "scenario 4": "Set bump_left high and bump_right low for 2 clock cycles, then set bump_left low and bump_right low for 1 clock cycle, followed by asserting bump_left high for 1 clock cycle.",
  "scenario 5": "Simultaneously assert both bump_left and bump_right high for 1 clock cycle, then release both signals and observe the outputs for 1 clock cycle.",
  "scenario 6": "Hold bump_left high for 1 clock cycle while asserting bump_right low, release bump_left after the cycle, and observe the outputs for 1 clock cycle.",
  "scenario 7": "Keep bump_right high for 2 clock cycles, then set it low and keep bump_left low. Observe outputs for 1 clock cycle.",
  "scenario 8": "Perform a final test by asserting areset high for 1 clock cycle, then release it and check the initial state outputs."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  areset;
reg  bump_left;
reg  bump_right;
wire  walk_left;
wire  walk_right;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.areset(areset),
	.bump_left(bump_left),
	.bump_right(bump_right),
	.walk_left(walk_left),
	.walk_right(walk_right)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  areset;
reg  bump_left;
reg  bump_right;
wire  walk_left;
wire  walk_right;

integer file, scenario;

// DUT instantiation
top_module DUT (
	.clk(clk),
	.areset(areset),
	.bump_left(bump_left),
	.bump_right(bump_right),
	.walk_left(walk_left),
	.walk_right(walk_right)
);

// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end

// Scenario Based Test
initial begin

    // Scenario 1
    scenario = 1;
    areset = 1;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
        #10;
    end
    areset = 0;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
        #10;
    end

    // Scenario 2
    scenario = 2;
    bump_left = 1;
    bump_right = 0;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
        #10;
    end
    bump_left = 0; // Reset for the next scenario

    // Scenario 3
    scenario = 3;
    bump_right = 1;
    bump_left = 0;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
        #10;
    end
    bump_right = 0; // Reset for the next scenario

    // Scenario 4
    scenario = 4;
    bump_left = 1;
    bump_right = 0;
    repeat(2) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
        #10;
    end
    bump_left = 0;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
        #10;
    end
    bump_left = 1;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
        #10;
    end
    bump_left = 0; // Reset for the next scenario

    // Scenario 5
    scenario = 5;
    bump_left = 1;
    bump_right = 1;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
        #10;
    end
    bump_left = 0;
    bump_right = 0; // Reset for the next scenario

    // Scenario 6
    scenario = 6;
    bump_left = 1;
    bump_right = 0;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
        #10;
    end
    bump_left = 0; // Reset for the next scenario

    // Scenario 7
    scenario = 7;
    bump_left = 0;
    bump_right = 1;
    repeat(2) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
        #10;
    end
    bump_right = 0; // Reset for the next scenario

    // Scenario 8
    scenario = 8;
    areset = 1;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
        #10;
    end
    areset = 0;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, walk_left = %d, walk_right = %d", scenario, clk, areset, bump_left, bump_right, walk_left, walk_right);
        #10;
    end

    $fclose(file);
    $finish;
end

endmodule
```

