############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Create a single D flip-flop.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a D flip-flop that captures the input signal 'd' on the rising edge of the clock signal 'clk'.",
    "2. The output 'q' should hold the value of 'd' when 'clk' transitions from low to high.",
    "3. The DUT has three ports: 'clk' (input), 'd' (input), and 'q' (output).",
    "4. The state of 'q' should only change on the positive edge of 'clk'.",
    "5. There should be no change in 'q' during the clock low state."
  ]
}
DUT header:
module top_module(
	input clk,
	input d,
	output reg q);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Initialize the simulation by setting 'clk' to low, 'd' to 0. Wait for 5 clock cycles (5 clk = 0).",
  "scenario 2": "Set 'd' to 1, assert 'clk' to high for 1 clock cycle, and then back to low. Wait for 5 clock cycles (1 clk = 1, 1 clk = 0).",
  "scenario 3": "Keep 'd' at 1, toggle 'clk' from low to high for 1 clock cycle and then back to low for 1 clock cycle. Wait for 5 clock cycles (1 clk = 1, 1 clk = 0).",
  "scenario 4": "Set 'd' to 0, assert 'clk' to high for 1 clock cycle, and then back to low. Wait for 5 clock cycles (1 clk = 0, 1 clk = 1, 1 clk = 0).",
  "scenario 5": "Keep 'd' at 0, toggle 'clk' from low to high for 1 clock cycle and then back to low for 1 clock cycle. Wait for 5 clock cycles (1 clk = 0, 1 clk = 1, 1 clk = 0).",
  "scenario 6": "Set 'd' to 1 again while 'clk' is low. Assert 'clk' to high for 1 clock cycle and then back to low. Wait for 5 clock cycles (1 clk = 1, 1 clk = 0).",
  "scenario 7": "Set 'd' to 0 during the last clock high state, then toggle 'clk' to low and high for 1 clock cycle each. Wait for 5 clock cycles (1 clk = 0, 1 clk = 1, 1 clk = 0).",
  "scenario 8": "Hold 'd' as 1 while toggling 'clk' from low to high and then back to low for several cycles. Wait for a total of 10 clock cycles (5 clk = 1, 5 clk = 0)."
}

