############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.

//       ab
// cd   00 01 11 10
//  00 | 0 | 0 | 0 | 1 |
//  01 | 1 | 0 | 0 | 0 |
//  11 | 1 | 0 | 1 | 1 |
//  10 | 1 | 0 | 0 | 1 |

// Consider a block diagram with inputs 'c' and 'd' going into a module called "top_module". This "top_module" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled "top_module", such that the entire circuit (including the 4-to-1 mux) implements the K-map.

RTL testbench specification:
{
  "important data": "Karnaugh map represents the Boolean function to be implemented. For the inputs (c, d), the outputs of the 4-to-1 multiplexer are defined as follows: mux_in[0] = 0 (ab = 00), mux_in[1] = 1 (ab = 01), mux_in[2] = 1 (ab = 11), mux_in[3] = 1 (ab = 10).",
  "technical specifications": [
    "1. Module header: The DUT module is defined as 'top_module' with inputs c and d, and outputs a 4-bit vector mux_in.",
    "2. The 4-to-1 multiplexer uses selector inputs a and b, where the input combination (ab values) will select one of the mux_in[0] through mux_in[3].",
    "3. The desired behavior is to match the output of the K-map implementation based on values of c and d, mapping them to the multiplexer inputs correctly.",
    "4. The testbench must apply different values for c and d, and check if mux_in signals match the expected values derived from the K-map for all possible combinations of c and d.",
    "5. The testbench should include at least 16 test cases corresponding to all combinations of input values for c and d (00, 01, 10, 11). The expected mux_in outputs must be specified for each case based on the K-map mapping."
  ]
}
DUT header:
module top_module (
	input c,
	input d,
	output [3:0] mux_in
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set inputs c and d to 0, 0 (c = 0, d = 0) and apply for 1 clock cycle.",
  "scenario 2": "Set inputs c and d to 0, 1 (c = 0, d = 1) and apply for 1 clock cycle.",
  "scenario 3": "Set inputs c and d to 1, 0 (c = 1, d = 0) and apply for 1 clock cycle.",
  "scenario 4": "Set inputs c and d to 1, 1 (c = 1, d = 1) and apply for 1 clock cycle.",
  "scenario 5": "Set inputs c and d to 0, 0 (c = 0, d = 0), then change to 0, 1 (c = 0, d = 1) after 1 clock cycle.",
  "scenario 6": "Set inputs c and d to 0, 1 (c = 0, d = 1), then change to 1, 0 (c = 1, d = 0) after 1 clock cycle.",
  "scenario 7": "Set inputs c and d to 1, 0 (c = 1, d = 0), then change to 1, 1 (c = 1, d = 1) after 1 clock cycle.",
  "scenario 8": "Set inputs c and d to 1, 1 (c = 1, d = 1), then change to 0, 0 (c = 0, d = 0) after 1 clock cycle.",
  "scenario 9": "Set inputs c and d to 0, 0 (c = 0, d = 0) and hold for 2 clock cycles.",
  "scenario 10": "Set inputs c and d to 0, 1 (c = 0, d = 1) and hold for 2 clock cycles.",
  "scenario 11": "Set inputs c and d to 1, 0 (c = 1, d = 0) and hold for 2 clock cycles.",
  "scenario 12": "Set inputs c and d to 1, 1 (c = 1, d = 1) and hold for 2 clock cycles.",
  "scenario 13": "Set inputs c and d to 0, 0 (c = 0, d = 0), then change to 1, 1 (c = 1, d = 1) after 1 clock cycle.",
  "scenario 14": "Set inputs c and d to 0, 1 (c = 0, d = 1), then change to 0, 0 (c = 0, d = 0) after 1 clock cycle.",
  "scenario 15": "Set inputs c and d to 1, 0 (c = 1, d = 0), then change to 1, 1 (c = 1, d = 1) after 1 clock cycle.",
  "scenario 16": "Randomly check each combination of c and d (00, 01, 10, 11) in a sequence, maintaining each for 1 clock cycle."
}

