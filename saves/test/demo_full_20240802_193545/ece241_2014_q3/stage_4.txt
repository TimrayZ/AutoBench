############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, c = %d, d = %d, mux_in = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, c = %d, d = %d, mux_in = %d", "scenario: 1b, c = %d, d = %d, mux_in = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input c,
	input d,
	output [3:0] mux_in
);

Your other information:
RTL circuit problem description:
For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.

//       ab
// cd   00 01 11 10
//  00 | 0 | 0 | 0 | 1 |
//  01 | 1 | 0 | 0 | 0 |
//  11 | 1 | 0 | 1 | 1 |
//  10 | 1 | 0 | 0 | 1 |

// Consider a block diagram with inputs 'c' and 'd' going into a module called "top_module". This "top_module" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled "top_module", such that the entire circuit (including the 4-to-1 mux) implements the K-map.

RTL testbench specification:
{
  "important data": "Karnaugh map represents the Boolean function to be implemented. For the inputs (c, d), the outputs of the 4-to-1 multiplexer are defined as follows: mux_in[0] = 0 (ab = 00), mux_in[1] = 1 (ab = 01), mux_in[2] = 1 (ab = 11), mux_in[3] = 1 (ab = 10).",
  "technical specifications": [
    "1. Module header: The DUT module is defined as 'top_module' with inputs c and d, and outputs a 4-bit vector mux_in.",
    "2. The 4-to-1 multiplexer uses selector inputs a and b, where the input combination (ab values) will select one of the mux_in[0] through mux_in[3].",
    "3. The desired behavior is to match the output of the K-map implementation based on values of c and d, mapping them to the multiplexer inputs correctly.",
    "4. The testbench must apply different values for c and d, and check if mux_in signals match the expected values derived from the K-map for all possible combinations of c and d.",
    "5. The testbench should include at least 16 test cases corresponding to all combinations of input values for c and d (00, 01, 10, 11). The expected mux_in outputs must be specified for each case based on the K-map mapping."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set inputs c and d to 0, 0 (c = 0, d = 0) and apply for 1 clock cycle.",
  "scenario 2": "Set inputs c and d to 0, 1 (c = 0, d = 1) and apply for 1 clock cycle.",
  "scenario 3": "Set inputs c and d to 1, 0 (c = 1, d = 0) and apply for 1 clock cycle.",
  "scenario 4": "Set inputs c and d to 1, 1 (c = 1, d = 1) and apply for 1 clock cycle.",
  "scenario 5": "Set inputs c and d to 0, 0 (c = 0, d = 0), then change to 0, 1 (c = 0, d = 1) after 1 clock cycle.",
  "scenario 6": "Set inputs c and d to 0, 1 (c = 0, d = 1), then change to 1, 0 (c = 1, d = 0) after 1 clock cycle.",
  "scenario 7": "Set inputs c and d to 1, 0 (c = 1, d = 0), then change to 1, 1 (c = 1, d = 1) after 1 clock cycle.",
  "scenario 8": "Set inputs c and d to 1, 1 (c = 1, d = 1), then change to 0, 0 (c = 0, d = 0) after 1 clock cycle.",
  "scenario 9": "Set inputs c and d to 0, 0 (c = 0, d = 0) and hold for 2 clock cycles.",
  "scenario 10": "Set inputs c and d to 0, 1 (c = 0, d = 1) and hold for 2 clock cycles.",
  "scenario 11": "Set inputs c and d to 1, 0 (c = 1, d = 0) and hold for 2 clock cycles.",
  "scenario 12": "Set inputs c and d to 1, 1 (c = 1, d = 1) and hold for 2 clock cycles.",
  "scenario 13": "Set inputs c and d to 0, 0 (c = 0, d = 0), then change to 1, 1 (c = 1, d = 1) after 1 clock cycle.",
  "scenario 14": "Set inputs c and d to 0, 1 (c = 0, d = 1), then change to 0, 0 (c = 0, d = 0) after 1 clock cycle.",
  "scenario 15": "Set inputs c and d to 1, 0 (c = 1, d = 0), then change to 1, 1 (c = 1, d = 1) after 1 clock cycle.",
  "scenario 16": "Randomly check each combination of c and d (00, 01, 10, 11) in a sequence, maintaining each for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, c = %d, d = %d, mux_in = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, c = %d, d = %d, mux_in = %d", "scenario: 1b, c = %d, d = %d, mux_in = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Inputs
    reg c;
    reg d;

    // Outputs
    wire [3:0] mux_in;

    // Instantiate the DUT
    top_module dut (
        .c(c),
        .d(d),
        .mux_in(mux_in)
    );

    // File descriptor for output
    integer file;

    initial begin
        // Open the output file
        file = $fopen("TBout.txt", "w");
        
        // Scenario 1
        c = 0; d = 0; #1;
        $fdisplay(file, "scenario: 1, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 2
        c = 0; d = 1; #1;
        $fdisplay(file, "scenario: 2, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 3
        c = 1; d = 0; #1;
        $fdisplay(file, "scenario: 3, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 4
        c = 1; d = 1; #1;
        $fdisplay(file, "scenario: 4, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 5
        c = 0; d = 0; #1;
        $fdisplay(file, "scenario: 5, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        c = 0; d = 1; #1;
        $fdisplay(file, "scenario: 5a, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 6
        c = 0; d = 1; #1;
        $fdisplay(file, "scenario: 6, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        c = 1; d = 0; #1;
        $fdisplay(file, "scenario: 6a, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 7
        c = 1; d = 0; #1;
        $fdisplay(file, "scenario: 7, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        c = 1; d = 1; #1;
        $fdisplay(file, "scenario: 7a, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 8
        c = 1; d = 1; #1;
        $fdisplay(file, "scenario: 8, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        c = 0; d = 0; #1;
        $fdisplay(file, "scenario: 8a, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 9
        c = 0; d = 0; #1;
        $fdisplay(file, "scenario: 9, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        #1;
        $fdisplay(file, "scenario: 9a, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 10
        c = 0; d = 1; #1;
        $fdisplay(file, "scenario: 10, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        #1;
        $fdisplay(file, "scenario: 10a, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 11
        c = 1; d = 0; #1;
        $fdisplay(file, "scenario: 11, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        #1;
        $fdisplay(file, "scenario: 11a, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 12
        c = 1; d = 1; #1;
        $fdisplay(file, "scenario: 12, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        #1;
        $fdisplay(file, "scenario: 12a, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 13
        c = 0; d = 0; #1;
        $fdisplay(file, "scenario: 13, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        c = 1; d = 1; #1;
        $fdisplay(file, "scenario: 13a, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 14
        c = 0; d = 1; #1;
        $fdisplay(file, "scenario: 14, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        c = 0; d = 0; #1;
        $fdisplay(file, "scenario: 14a, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 15
        c = 1; d = 0; #1;
        $fdisplay(file, "scenario: 15, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        c = 1; d = 1; #1;
        $fdisplay(file, "scenario: 15a, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Scenario 16
        c = 0; d = 0; #1;
        $fdisplay(file, "scenario: 16a, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        c = 0; d = 1; #1;
        $fdisplay(file, "scenario: 16b, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        c = 1; d = 0; #1;
        $fdisplay(file, "scenario: 16c, c = %d, d = %d, mux_in = %b", c, d, mux_in);
        c = 1; d = 1; #1;
        $fdisplay(file, "scenario: 16d, c = %d, d = %d, mux_in = %b", c, d, mux_in);

        // Close the output file
        $fclose(file);
        
        // Finish the simulation
        $finish;
    end

endmodule
```

