############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. 
// State | Next state in=0, Next state in=1 | Output
// A | A, B | 0
// B | C, B | 0
// C | A, D | 0
// D | C, B | 1
RTL header:
module top_module (
	input clk,
	input in,
	input reset,
	output out
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
    input clk,
    input in,
    input reset,
    output reg out
);

    // State encoding
    typedef enum reg [1:0] {
        A = 2'b00,
        B = 2'b01,
        C = 2'b10,
        D = 2'b11
    } state_t;

    state_t current_state, next_state;

    // State transition logic
    always @* begin
        case (current_state)
            A: begin
                if (in) next_state = B; 
                else next_state = A; 
                out = 0;
            end
            B: begin
                if (in) next_state = B; 
                else next_state = C; 
                out = 0;
            end
            C: begin
                if (in) next_state = D; 
                else next_state = A; 
                out = 0;
            end
            D: begin
                if (in) next_state = B; 
                else next_state = C; 
                out = 1;
            end
            default: begin
                next_state = A; 
                out = 0;
            end
        endcase
    end

    // State register with reset
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= A;
            out <= 0;
        end else begin
            current_state <= next_state;
        end
    end

endmodule
```

