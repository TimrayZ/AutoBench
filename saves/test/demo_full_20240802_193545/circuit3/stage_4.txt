############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, q = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, q = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, q = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input a, 
	input b, 
	input c, 
	input d,
	output q
);

Your other information:
RTL circuit problem description:
This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.

// time            a               b               c               d               q               
// 0ns             0               0               0               0               0               
// 5ns             0               0               0               0               0               
// 10ns            0               0               0               0               0               
// 15ns            0               0               0               0               0               
// 20ns            0               0               0               1               0               
// 25ns            0               0               1               0               0               
// 30ns            0               0               1               1               0               
// 35ns            0               1               0               0               0               
// 40ns            0               1               0               1               1               
// 45ns            0               1               1               0               1               
// 50ns            0               1               1               1               1               
// 55ns            1               0               0               0               0               
// 60ns            1               0               0               1               1               
// 65ns            1               0               1               0               1               
// 70ns            1               0               1               1               1               
// 75ns            1               1               0               0               0               
// 80ns            1               1               0               1               1               
// 85ns            1               1               1               0               1               
// 90ns            1               1               1               1               1               
RTL testbench specification:
{
  "important data": "Simulation waveforms showing the relationship between inputs (a, b, c, d) and output (q) at various time intervals.",
  "technical specifications": [
    "1. DUT is a combinational circuit with inputs 'a', 'b', 'c', 'd' and a single output 'q'.",
    "2. The DUT should evaluate the output 'q' based on the defined input transitions from the simulation waveforms.",
    "3. The output 'q' must be verified against expected values outlined in the simulation waveforms for corresponding inputs at each specified time interval.",
    "4. Testbench will consist of test cases that provide the various combinations of inputs and check the output against the expected result at specific simulation times.",
    "5. The test cases must cover all possible input combinations for inputs 'a', 'b', 'c', 'd' to ensure comprehensive verification."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "At time 0ns, apply inputs a=0, b=0, c=0, d=0.",
  "scenario 2": "At time 20ns, change input to a=0, b=0, c=0, d=1.",
  "scenario 3": "At time 25ns, change input to a=0, b=0, c=1, d=0.",
  "scenario 4": "At time 30ns, change input to a=0, b=0, c=1, d=1.",
  "scenario 5": "At time 35ns, change input to a=0, b=1, c=0, d=0.",
  "scenario 6": "At time 40ns, change input to a=0, b=1, c=0, d=1.",
  "scenario 7": "At time 45ns, change input to a=0, b=1, c=1, d=0.",
  "scenario 8": "At time 50ns, change input to a=0, b=1, c=1, d=1.",
  "scenario 9": "At time 55ns, change input to a=1, b=0, c=0, d=0.",
  "scenario 10": "At time 60ns, change input to a=1, b=0, c=0, d=1.",
  "scenario 11": "At time 65ns, change input to a=1, b=0, c=1, d=0.",
  "scenario 12": "At time 70ns, change input to a=1, b=0, c=1, d=1.",
  "scenario 13": "At time 75ns, change input to a=1, b=1, c=0, d=0.",
  "scenario 14": "At time 80ns, change input to a=1, b=1, c=0, d=1.",
  "scenario 15": "At time 85ns, change input to a=1, b=1, c=1, d=0.",
  "scenario 16": "At time 90ns, change input to a=1, b=1, c=1, d=1."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, q = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, q = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, q = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

  // Inputs
  reg a;
  reg b;
  reg c;
  reg d;

  // Output
  wire q;

  // Instantiate the DUT
  top_module DUT (
    .a(a), 
    .b(b), 
    .c(c), 
    .d(d), 
    .q(q)
  );

  // File descriptor
  integer file;

  initial begin
    // Open the output file
    file = $fopen("TBout.txt", "w");

    // Scenario 1
    a = 0; b = 0; c = 0; d = 0; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 1, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);

    // Scenario 2
    a = 0; b = 0; c = 0; d = 1;
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 2, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);

    // Scenario 3
    a = 0; b = 0; c = 1; d = 0; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 3, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);
    
    // Scenario 4
    a = 0; b = 0; c = 1; d = 1; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 4, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);
    
    // Scenario 5
    a = 0; b = 1; c = 0; d = 0; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 5, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);
    
    // Scenario 6
    a = 0; b = 1; c = 0; d = 1; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 6, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);
    
    // Scenario 7
    a = 0; b = 1; c = 1; d = 0; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 7, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);
    
    // Scenario 8
    a = 0; b = 1; c = 1; d = 1; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 8, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);

    // Scenario 9
    a = 1; b = 0; c = 0; d = 0; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 9, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);
    
    // Scenario 10
    a = 1; b = 0; c = 0; d = 1; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 10, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);
    
    // Scenario 11
    a = 1; b = 0; c = 1; d = 0; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 11, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);
    
    // Scenario 12
    a = 1; b = 0; c = 1; d = 1; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 12, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);
    
    // Scenario 13
    a = 1; b = 1; c = 0; d = 0; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 13, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);
    
    // Scenario 14
    a = 1; b = 1; c = 0; d = 1; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 14, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);
    
    // Scenario 15
    a = 1; b = 1; c = 1; d = 0; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 15, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);
    
    // Scenario 16
    a = 1; b = 1; c = 1; d = 1; 
    #5; // Wait for 5ns
    $fdisplay(file, "scenario: 16, a = %d, b = %d, c = %d, d = %d, q = %d", a, b, c, d, q);

    // Close the file
    $fclose(file);

    // Finish simulation
    $finish;
  end

endmodule
```

