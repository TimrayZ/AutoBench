############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d", "scenario: 1b, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [2:0] sel,
	input [3:0] data0,
	input [3:0] data1,
	input [3:0] data2,
	input [3:0] data3,
	input [3:0] data4,
	input [3:0] data5,
	output reg [3:0] out
);

Your other information:
RTL circuit problem description:
Create a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.
RTL testbench specification:
{
  "important data": "DUT header: module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);",
  "technical specifications": [
    "0: DUT functionality is to implement a 6-to-1 multiplexer.",
    "1: Input signals include a 3-bit select signal (sel) and six 4-bit data inputs (data0, data1, data2, data3, data4, data5).",
    "2: The output signal is a 4-bit wide output (out).",
    "3: When sel is between 0 and 5, out should be assigned the value from the corresponding data input; when sel is greater than 5, out should be set to 0.",
    "4: Testbench must simulate all possible sel values from 0 to 7 for comprehensive testing (0-5 for valid data selections and 6-7 for invalid selections).",
    "5: Each test case should check for both the expected output for valid sel values and verify that the output is 0 for sel values of 6 and 7."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set sel to 0, data0 to 4'b0001, data1 to 4'b0010, data2 to 4'b0011, data3 to 4'b0100, data4 to 4'b0101, data5 to 4'b0110. Wait for 1 clock cycle.",
  "scenario 2": "Set sel to 1, data0 to 4'b0001, data1 to 4'b0010, data2 to 4'b0011, data3 to 4'b0100, data4 to 4'b0101, data5 to 4'b0110. Wait for 1 clock cycle.",
  "scenario 3": "Set sel to 2, data0 to 4'b0001, data1 to 4'b0010, data2 to 4'b0011, data3 to 4'b0100, data4 to 4'b0101, data5 to 4'b0110. Wait for 1 clock cycle.",
  "scenario 4": "Set sel to 3, data0 to 4'b0001, data1 to 4'b0010, data2 to 4'b0011, data3 to 4'b0100, data4 to 4'b0101, data5 to 4'b0110. Wait for 1 clock cycle.",
  "scenario 5": "Set sel to 4, data0 to 4'b0001, data1 to 4'b0010, data2 to 4'b0011, data3 to 4'b0100, data4 to 4'b0101, data5 to 4'b0110. Wait for 1 clock cycle.",
  "scenario 6": "Set sel to 5, data0 to 4'b0001, data1 to 4'b0010, data2 to 4'b0011, data3 to 4'b0100, data4 to 4'b0101, data5 to 4'b0110. Wait for 1 clock cycle.",
  "scenario 7": "Set sel to 6, leave all data inputs set to data0=4'b0001, data1=4'b0010, data2=4'b0011, data3=4'b0100, data4=4'b0101, data5=4'b0110. Wait for 1 clock cycle.",
  "scenario 8": "Set sel to 7, leave all data inputs set to data0=4'b0001, data1=4'b0010, data2=4'b0011, data3=4'b0100, data4=4'b0101, data5=4'b0110. Wait for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d", "scenario: 1b, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Testbench signals
    reg [2:0] sel;
    reg [3:0] data0, data1, data2, data3, data4, data5;
    wire [3:0] out;

    // Instantiate the DUT
    top_module DUT (
        .sel(sel),
        .data0(data0),
        .data1(data1),
        .data2(data2),
        .data3(data3),
        .data4(data4),
        .data5(data5),
        .out(out)
    );

    // File descriptor for output
    integer file;

    initial begin
        // Open file to write
        file = $fopen("TBout.txt", "w");

        // Test Scenario 1: sel = 0
        sel = 3'b000; 
        data0 = 4'b0001; data1 = 4'b0010; data2 = 4'b0011; 
        data3 = 4'b0100; data4 = 4'b0101; data5 = 4'b0110;
        #1; // Wait for 1 time unit
        $fdisplay(file, "scenario: 1, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d", sel, data0, data1, data2, data3, data4, data5, out);

        // Test Scenario 2: sel = 1
        sel = 3'b001; 
        #1;
        $fdisplay(file, "scenario: 2, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d", sel, data0, data1, data2, data3, data4, data5, out);

        // Test Scenario 3: sel = 2
        sel = 3'b010; 
        #1;
        $fdisplay(file, "scenario: 3, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d", sel, data0, data1, data2, data3, data4, data5, out);

        // Test Scenario 4: sel = 3
        sel = 3'b011; 
        #1;
        $fdisplay(file, "scenario: 4, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d", sel, data0, data1, data2, data3, data4, data5, out);

        // Test Scenario 5: sel = 4
        sel = 3'b100; 
        #1;
        $fdisplay(file, "scenario: 5, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d", sel, data0, data1, data2, data3, data4, data5, out);

        // Test Scenario 6: sel = 5
        sel = 3'b101; 
        #1;
        $fdisplay(file, "scenario: 6, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d", sel, data0, data1, data2, data3, data4, data5, out);

        // Test Scenario 7: sel = 6
        sel = 3'b110; 
        #1;
        $fdisplay(file, "scenario: 7, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d", sel, data0, data1, data2, data3, data4, data5, out);

        // Test Scenario 8: sel = 7
        sel = 3'b111; 
        #1;
        $fdisplay(file, "scenario: 8, sel = %d, data0 = %d, data1 = %d, data2 = %d, data3 = %d, data4 = %d, data5 = %d, out = %d", sel, data0, data1, data2, data3, data4, data5, out);

        // Close file
        $fclose(file);
        $finish;
    end

endmodule
```

