############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Build a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: 
// (1) out_and: a and b 
// (2) out_or: a or b 
// (3) out_xor: a xor b 
// (4) out_nand: a nand b 
// (5) out_nor: a nor b 
// (6) out_xnor: a xnor b 
// (7) out_anotb: a and-not b
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. Module Header: module top_module ( input a, input b, output out_and, output out_or, output out_xor, output out_nand, output out_nor, output out_xnor, output out_anotb );",
    "2. Inputs: The DUT has two input signals: 'a' and 'b', both of which are single-bit inputs.",
    "3. Outputs: The DUT produces seven output signals: 'out_and', 'out_or', 'out_xor', 'out_nand', 'out_nor', 'out_xnor', and 'out_anotb'. Each of these outputs is the result of a specific logic operation on the inputs 'a' and 'b'.",
    "4. Logic Operations: The outputs correspond to the following logic operations: (1) AND, (2) OR, (3) XOR, (4) NAND, (5) NOR, (6) XNOR, (7) AND-NOT.",
    "5. Testbench Requirements: The testbench must provide all possible combinations of inputs 'a' and 'b' (00, 01, 10, 11) and check the corresponding outputs against expected results.",
    "6. Expected Results: The expected output values need to be calculated based on the specified logic operations for each possible input combination."
  ]
}
DUT header:
module top_module (
	input a,
	input b,
	output out_and,
	output out_or,
	output out_xor,
	output out_nand,
	output out_nor,
	output out_xnor,
	output out_anotb
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set inputs a = 0 and b = 0. Hold for 1 clock cycle.",
  "scenario 2": "Set inputs a = 0 and b = 1. Hold for 1 clock cycle.",
  "scenario 3": "Set inputs a = 1 and b = 0. Hold for 1 clock cycle.",
  "scenario 4": "Set inputs a = 1 and b = 1. Hold for 1 clock cycle.",
  "scenario 5": "Transition inputs from a = 0, b = 0 to a = 0, b = 1 within 1 clock cycle, then hold for an additional clock cycle.",
  "scenario 6": "Transition inputs from a = 1, b = 0 to a = 1, b = 1 within 1 clock cycle, then hold for an additional clock cycle.",
  "scenario 7": "Transition inputs from a = 0, b = 1 to a = 1, b = 1 within 1 clock cycle, then hold for an additional clock cycle.",
  "scenario 8": "Transition inputs from a = 1, b = 0 to a = 0, b = 0 within 1 clock cycle, then hold for an additional clock cycle."
}

