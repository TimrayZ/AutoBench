############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out = %d", "scenario: 1b, in = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [99:0] in,
	output reg [99:0] out
);

Your other information:
RTL circuit problem description:
Given a 100-bit input vector [99:0], reverse its bit ordering.
RTL testbench specification:
{
  "important data": "Given a 100-bit input vector [99:0], reverse its bit ordering.",
  "technical specifications": [
    "1. DUT Header: The module is defined as 'top_module' with one 100-bit input 'in' and one 100-bit output 'out'.",
    "2. Input Requirements: The input signal 'in' is a 100-bit vector where the bits are indexed from 99 down to 0.",
    "3. Output Requirements: The output signal 'out' must be a 100-bit vector representing the bit-reversed order of the input signal 'in'. For example, if 'in' = 100'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, then 'out' must be '100'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.",
    "4. Functional Requirement: The DUT must correctly reverse the ordering of all bits from the input vector.",
    "5. Testbench Purpose: The testbench will apply test vectors to the input 'in' of the DUT, check the output 'out', and compare it with expected results to validate the functionality of the DUT."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply the input vector 'in' with all bits set to 0: 100'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 at clock cycle 0.",
  "scenario 2": "Apply the input vector 'in' with a pattern of alternating bits: 100'b10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010 at clock cycle 1.",
  "scenario 3": "Apply the input vector 'in' where the most significant bit is set and the rest are 0's: 100'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 at clock cycle 2.",
  "scenario 4": "Apply the input vector 'in' with only the least significant bit set: 100'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 at clock cycle 3.",
  "scenario 5": "Apply the input vector 'in' with a pattern of all bits set to 1: 100'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 at clock cycle 4.",
  "scenario 6": "Apply a random 100-bit input vector 'in': 100'b01111000011010100010101011101110011100001111001101010101001000001111011010100001100010001000000110000 at clock cycle 5.",
  "scenario 7": "Apply the input vector 'in' with a single bit in the middle set: 100'b00000000000000000000000000000000000000000000000000000000000000001111111110000000000000000000000000000000 at clock cycle 6.",
  "scenario 8": "Apply the input vector 'in' with a single bit at the start: 100'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 at clock cycle 7.",
  "scenario 9": "Apply the input vector 'in' with multiple clusters of 1's and 0's: 100'b00001111000011110000111100001111000011110000111100001111000011110000 at clock cycle 8.",
  "scenario 10": "Apply the input vector 'in' in an increasing binary fashion: 100'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 at clock cycle 9."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out = %d", "scenario: 1b, in = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
module tb_top_module;

  // Parameters
  reg [99:0] in;
  wire [99:0] out;

  // DUT Instantiation
  top_module DUT (
    .in(in),
    .out(out)
  );

  // File handle for exporting signals
  integer file;

  // Initialize simulation
  initial begin
    // Open the output file
    file = $fopen("TBout.txt", "w");

    // Scenario 1
    in = 100'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    #1; 
    $fdisplay(file, "scenario: 1, in = %b, out = %b", in, out);

    // Scenario 2
    in = 100'b10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010;
    #1; 
    $fdisplay(file, "scenario: 2, in = %b, out = %b", in, out);

    // Scenario 3
    in = 100'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    #1; 
    $fdisplay(file, "scenario: 3, in = %b, out = %b", in, out);

    // Scenario 4
    in = 100'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001;
    #1; 
    $fdisplay(file, "scenario: 4, in = %b, out = %b", in, out);

    // Scenario 5
    in = 100'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
    #1; 
    $fdisplay(file, "scenario: 5, in = %b, out = %b", in, out);

    // Scenario 6
    in = 100'b01111000011010100010101011101110011100001111001101010101001000001111011010100001100010001000000110000;
    #1; 
    $fdisplay(file, "scenario: 6, in = %b, out = %b", in, out);

    // Scenario 7
    in = 100'b00000000000000000000000000000000000000000000000000000000000000001111111110000000000000000000000000000000;
    #1; 
    $fdisplay(file, "scenario: 7, in = %b, out = %b", in, out);

    // Scenario 8
    in = 100'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    #1; 
    $fdisplay(file, "scenario: 8, in = %b, out = %b", in, out);

    // Scenario 9
    in = 100'b00001111000011110000111100001111000011110000111100001111000011110000;
    #1; 
    $fdisplay(file, "scenario: 9, in = %b, out = %b", in, out);

    // Scenario 10
    in = 100'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001;
    #1; 
    $fdisplay(file, "scenario: 10, in = %b, out = %b", in, out);
    
    // Close the file
    $fclose(file);

    // End simulation
    $finish;
  end

endmodule
```

