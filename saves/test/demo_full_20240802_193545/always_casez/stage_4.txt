############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, pos = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, pos = %d", "scenario: 1b, in = %d, pos = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [7:0] in,
	output reg [2:0] pos
);

Your other information:
RTL circuit problem description:
Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. DUT Specification: The DUT is a priority encoder that takes an 8-bit input vector and outputs the position of the first (least significant) bit that is set to high (1). If no bits are high, the output should be zero.",
    "2. DUT Header: module top_module ( input [7:0] in, output reg [2:0] pos );",
    "3. Input Range: The input 'in' is an 8-bit vector which can have values ranging from 8'b00000000 to 8'b11111111.",
    "4. Output Range: The output 'pos' is a 3-bit vector which can report values from 3'b000 (if input is 0) to 3'b111 (if the first high bit is at index 7).",
    "5. Functional Behavior: For an input of 8'b10010000, the output 'pos' should be 3'd4, as the first high bit is at position 4."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set input 'in' to 8'b00000000 and wait for 1 clock cycle. This tests the case when no bits are high.",
  "scenario 2": "Set input 'in' to 8'b00000001 and wait for 1 clock cycle. This tests the case when the least significant bit is high.",
  "scenario 3": "Set input 'in' to 8'b00000010 and wait for 1 clock cycle. This tests the case when the second least significant bit is high.",
  "scenario 4": "Set input 'in' to 8'b00000100 and wait for 1 clock cycle. This tests the case when the third least significant bit is high.",
  "scenario 5": "Set input 'in' to 8'b00001000 and wait for 1 clock cycle. This tests the case when the fourth least significant bit is high.",
  "scenario 6": "Set input 'in' to 8'b10000000 and wait for 1 clock cycle. This tests the case when the most significant bit is high.",
  "scenario 7": "Set input 'in' to 8'b01010101 and wait for 1 clock cycle. This tests the case with multiple bits high and checks the first occurrence.",
  "scenario 8": "Set input 'in' to 8'b11111111 and wait for 1 clock cycle. This tests the case when all bits are high.",
  "scenario 9": "Set input 'in' to 8'b00101000 and wait for 1 clock cycle. This tests the case with a non-consecutive set of bits high.",
  "scenario 10": "Set input 'in' to 8'b00001111 and wait for 1 clock cycle. This tests the case where multiple lower bits are high."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, pos = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, pos = %d", "scenario: 1b, in = %d, pos = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;
    reg [7:0] in;
    wire [2:0] pos;

    // Instantiate the DUT
    top_module DUT (
        .in(in),
        .pos(pos)
    );

    integer file;

    initial begin
        // Open the output file
        file = $fopen("TBout.txt", "w");

        // Scenario 1
        in = 8'b00000000; 
        #1;
        $fdisplay(file, "scenario: 1, in = %d, pos = %d", in, pos);
        
        // Scenario 2
        in = 8'b00000001; 
        #1;
        $fdisplay(file, "scenario: 2, in = %d, pos = %d", in, pos);
        
        // Scenario 3
        in = 8'b00000010; 
        #1;
        $fdisplay(file, "scenario: 3, in = %d, pos = %d", in, pos);
        
        // Scenario 4
        in = 8'b00000100; 
        #1;
        $fdisplay(file, "scenario: 4, in = %d, pos = %d", in, pos);
        
        // Scenario 5
        in = 8'b00001000; 
        #1;
        $fdisplay(file, "scenario: 5, in = %d, pos = %d", in, pos);
        
        // Scenario 6
        in = 8'b10000000; 
        #1;
        $fdisplay(file, "scenario: 6, in = %d, pos = %d", in, pos);
        
        // Scenario 7
        in = 8'b01010101; 
        #1;
        $fdisplay(file, "scenario: 7, in = %d, pos = %d", in, pos);
        
        // Scenario 8
        in = 8'b11111111; 
        #1;
        $fdisplay(file, "scenario: 8, in = %d, pos = %d", in, pos);
        
        // Scenario 9
        in = 8'b00101000; 
        #1;
        $fdisplay(file, "scenario: 9, in = %d, pos = %d", in, pos);
        
        // Scenario 10
        in = 8'b00001111; 
        #1;
        $fdisplay(file, "scenario: 10, in = %d, pos = %d", in, pos);

        // Close the output file
        $fclose(file);
        $finish;
    end
endmodule
```

