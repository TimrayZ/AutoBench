############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, scancode = %d, left = %d, down = %d, right = %d, up = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, scancode = %d, left = %d, down = %d, right = %d, up = %d", "scenario: 1b, scancode = %d, left = %d, down = %d, right = %d, up = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [15:0] scancode,
	output reg left,
	output reg down,
	output reg right,
	output reg up
);

Your other information:
RTL circuit problem description:
Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.
// Scancode[15:0] | Arrow key
// 16'he06b | left arrow
// 16'he072 | down arrow
// 16'he074 | right arrow
// 16'he075 | up arrow
// Anything else | none
// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.


RTL testbench specification:
{
  "important data": "Scancode[15:0] | Arrow key\n16'he06b | left arrow\n16'he072 | down arrow\n16'he074 | right arrow\n16'he075 | up arrow\nAnything else | none",
  "technical specifications": [
    "0: DUT Module Header: module top_module (input [15:0] scancode, output reg left, output reg down, output reg right, output reg up)",
    "1: Input Signal Specification: The DUT accepts a 16-bit input signal named 'scancode'.",
    "2: Output Signal Specification: The DUT provides four output signals: 'left', 'down', 'right', and 'up', each of type reg.",
    "3: Functional Requirements: The DUT should assert only one of the output signals corresponding to the scancode input based on the defined mapping for arrow keys.",
    "4: Output Logic: The output signals should be deasserted (0) when the scancode is not one of the specified values (16'he06b, 16'he072, 16'he074, 16'he075)."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set scancode to 16'hE06B (left arrow) and assert for 1 clock cycle.",
  "scenario 2": "Set scancode to 16'hE072 (down arrow) and assert for 1 clock cycle.",
  "scenario 3": "Set scancode to 16'hE074 (right arrow) and assert for 1 clock cycle.",
  "scenario 4": "Set scancode to 16'hE075 (up arrow) and assert for 1 clock cycle.",
  "scenario 5": "Set scancode to 16'hFFFF (invalid scancode) and assert for 1 clock cycle.",
  "scenario 6": "Set scancode to 16'h0000 (invalid scancode) and assert for 1 clock cycle.",
  "scenario 7": "Set scancode to 16'hE06B (left arrow), wait for 2 clock cycles, then set scancode to 16'hE072 (down arrow) and assert again for 1 clock cycle.",
  "scenario 8": "Set scancode to 16'hE074 (right arrow), wait for 2 clock cycles, then set scancode to 16'hE075 (up arrow) and assert again for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, scancode = %d, left = %d, down = %d, right = %d, up = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, scancode = %d, left = %d, down = %d, right = %d, up = %d", "scenario: 1b, scancode = %d, left = %d, down = %d, right = %d, up = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    reg [15:0] scancode;
    wire left, down, right, up;

    // Instantiate the Device Under Test (DUT)
    top_module dut (
        .scancode(scancode),
        .left(left),
        .down(down),
        .right(right),
        .up(up)
    );

    integer file;

    initial begin
        // Open output file
        file = $fopen("TBout.txt", "w");

        // Scenario 1: left arrow
        scancode = 16'hE06B; // left arrow
        #10; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 1, scancode = %d, left = %d, down = %d, right = %d, up = %d", scancode, left, down, right, up);

        // Scenario 2: down arrow
        scancode = 16'hE072; // down arrow
        #10; 
        $fdisplay(file, "scenario: 2, scancode = %d, left = %d, down = %d, right = %d, up = %d", scancode, left, down, right, up);

        // Scenario 3: right arrow
        scancode = 16'hE074; // right arrow
        #10; 
        $fdisplay(file, "scenario: 3, scancode = %d, left = %d, down = %d, right = %d, up = %d", scancode, left, down, right, up);

        // Scenario 4: up arrow
        scancode = 16'hE075; // up arrow
        #10; 
        $fdisplay(file, "scenario: 4, scancode = %d, left = %d, down = %d, right = %d, up = %d", scancode, left, down, right, up);

        // Scenario 5: invalid scancode
        scancode = 16'hFFFF; // invalid scancode
        #10; 
        $fdisplay(file, "scenario: 5, scancode = %d, left = %d, down = %d, right = %d, up = %d", scancode, left, down, right, up);

        // Scenario 6: invalid scancode
        scancode = 16'h0000; // invalid scancode
        #10; 
        $fdisplay(file, "scenario: 6, scancode = %d, left = %d, down = %d, right = %d, up = %d", scancode, left, down, right, up);

        // Scenario 7: left arrow then down arrow
        scancode = 16'hE06B; // left arrow
        #10; 
        $fdisplay(file, "scenario: 7a, scancode = %d, left = %d, down = %d, right = %d, up = %d", scancode, left, down, right, up);

        #20; // wait for 2 clock cycles
        scancode = 16'hE072; // down arrow
        #10; 
        $fdisplay(file, "scenario: 7b, scancode = %d, left = %d, down = %d, right = %d, up = %d", scancode, left, down, right, up);

        // Scenario 8: right arrow then up arrow
        scancode = 16'hE074; // right arrow
        #10; 
        $fdisplay(file, "scenario: 8a, scancode = %d, left = %d, down = %d, right = %d, up = %d", scancode, left, down, right, up);

        #20; // wait for 2 clock cycles
        scancode = 16'hE075; // up arrow
        #10; 
        $fdisplay(file, "scenario: 8b, scancode = %d, left = %d, down = %d, right = %d, up = %d", scancode, left, down, right, up);

        // Close the output file
        $fclose(file);
        
        // End simulation
        $finish;
    end
endmodule
```

