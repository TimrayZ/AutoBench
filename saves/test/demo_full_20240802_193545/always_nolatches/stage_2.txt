############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.
// Scancode[15:0] | Arrow key
// 16'he06b | left arrow
// 16'he072 | down arrow
// 16'he074 | right arrow
// 16'he075 | up arrow
// Anything else | none
// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.


RTL testbench specification:
{
  "important data": "Scancode[15:0] | Arrow key\n16'he06b | left arrow\n16'he072 | down arrow\n16'he074 | right arrow\n16'he075 | up arrow\nAnything else | none",
  "technical specifications": [
    "0: DUT Module Header: module top_module (input [15:0] scancode, output reg left, output reg down, output reg right, output reg up)",
    "1: Input Signal Specification: The DUT accepts a 16-bit input signal named 'scancode'.",
    "2: Output Signal Specification: The DUT provides four output signals: 'left', 'down', 'right', and 'up', each of type reg.",
    "3: Functional Requirements: The DUT should assert only one of the output signals corresponding to the scancode input based on the defined mapping for arrow keys.",
    "4: Output Logic: The output signals should be deasserted (0) when the scancode is not one of the specified values (16'he06b, 16'he072, 16'he074, 16'he075)."
  ]
}
DUT header:
module top_module (
	input [15:0] scancode,
	output reg left,
	output reg down,
	output reg right,
	output reg up
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set scancode to 16'hE06B (left arrow) and assert for 1 clock cycle.",
  "scenario 2": "Set scancode to 16'hE072 (down arrow) and assert for 1 clock cycle.",
  "scenario 3": "Set scancode to 16'hE074 (right arrow) and assert for 1 clock cycle.",
  "scenario 4": "Set scancode to 16'hE075 (up arrow) and assert for 1 clock cycle.",
  "scenario 5": "Set scancode to 16'hFFFF (invalid scancode) and assert for 1 clock cycle.",
  "scenario 6": "Set scancode to 16'h0000 (invalid scancode) and assert for 1 clock cycle.",
  "scenario 7": "Set scancode to 16'hE06B (left arrow), wait for 2 clock cycles, then set scancode to 16'hE072 (down arrow) and assert again for 1 clock cycle.",
  "scenario 8": "Set scancode to 16'hE074 (right arrow), wait for 2 clock cycles, then set scancode to 16'hE075 (up arrow) and assert again for 1 clock cycle."
}

