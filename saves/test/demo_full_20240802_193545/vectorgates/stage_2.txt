############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.
RTL testbench specification:
{
  "important data": "The DUT computes the bitwise-OR of two 3-bit inputs, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. The inverse of b is placed in bits [5:3] of out_not, and the inverse of a is placed in the lower half [2:0].",
  "technical specifications": [
    "1. Module Name: top_module",
    "2. Inputs: Two 3-bit inputs, a and b.",
    "3. Outputs: One 3-bit output (out_or_bitwise), one single bit output (out_or_logical), and one 6-bit output (out_not).",
    "4. Functionality: The module computes the following: \n   a. out_or_bitwise = a | b (bitwise OR of inputs a and b)\n   b. out_or_logical = (|a) | (|b) (logical OR of inputs a and b)\n   c. out_not[5:3] = ~b (inverse of input b)\n      out_not[2:0] = ~a (inverse of input a)",
    "5. The testbench must provide sets of inputs a and b, check the calculated outputs against expected results based on the defined functionality."
  ]
}
DUT header:
module top_module(
	input [2:0] a, 
	input [2:0] b, 
	output [2:0] out_or_bitwise,
	output out_or_logical,
	output [5:0] out_not
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set a = 3'b000 and b = 3'b000. Apply this input for 1 clock cycle.",
  "scenario 2": "Set a = 3'b101 and b = 3'b010. Apply this input for 1 clock cycle.",
  "scenario 3": "Set a = 3'b111 and b = 3'b000. Apply this input for 1 clock cycle.",
  "scenario 4": "Set a = 3'b011 and b = 3'b011. Apply this input for 1 clock cycle.",
  "scenario 5": "Set a = 3'b110 and b = 3'b111. Apply this input for 1 clock cycle.",
  "scenario 6": "Set a = 3'b001 and b = 3'b100. Apply this input for 1 clock cycle.",
  "scenario 7": "Set a = 3'b010 and b = 3'b101. Apply this input for 1 clock cycle.",
  "scenario 8": "Set a = 3'b111 and b = 3'b111. Apply this input for 1 clock cycle.",
  "scenario 9": "Set a = 3'b000 and b = 3'b111. Apply this input for 1 clock cycle.",
  "scenario 10": "Set a = 3'b110 and b = 3'b010. Apply this input for 1 clock cycle."
}

