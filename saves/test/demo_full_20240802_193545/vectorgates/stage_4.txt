############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d", "scenario: 1b, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	input [2:0] a, 
	input [2:0] b, 
	output [2:0] out_or_bitwise,
	output out_or_logical,
	output [5:0] out_not
);

Your other information:
RTL circuit problem description:
Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.
RTL testbench specification:
{
  "important data": "The DUT computes the bitwise-OR of two 3-bit inputs, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. The inverse of b is placed in bits [5:3] of out_not, and the inverse of a is placed in the lower half [2:0].",
  "technical specifications": [
    "1. Module Name: top_module",
    "2. Inputs: Two 3-bit inputs, a and b.",
    "3. Outputs: One 3-bit output (out_or_bitwise), one single bit output (out_or_logical), and one 6-bit output (out_not).",
    "4. Functionality: The module computes the following: \n   a. out_or_bitwise = a | b (bitwise OR of inputs a and b)\n   b. out_or_logical = (|a) | (|b) (logical OR of inputs a and b)\n   c. out_not[5:3] = ~b (inverse of input b)\n      out_not[2:0] = ~a (inverse of input a)",
    "5. The testbench must provide sets of inputs a and b, check the calculated outputs against expected results based on the defined functionality."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set a = 3'b000 and b = 3'b000. Apply this input for 1 clock cycle.",
  "scenario 2": "Set a = 3'b101 and b = 3'b010. Apply this input for 1 clock cycle.",
  "scenario 3": "Set a = 3'b111 and b = 3'b000. Apply this input for 1 clock cycle.",
  "scenario 4": "Set a = 3'b011 and b = 3'b011. Apply this input for 1 clock cycle.",
  "scenario 5": "Set a = 3'b110 and b = 3'b111. Apply this input for 1 clock cycle.",
  "scenario 6": "Set a = 3'b001 and b = 3'b100. Apply this input for 1 clock cycle.",
  "scenario 7": "Set a = 3'b010 and b = 3'b101. Apply this input for 1 clock cycle.",
  "scenario 8": "Set a = 3'b111 and b = 3'b111. Apply this input for 1 clock cycle.",
  "scenario 9": "Set a = 3'b000 and b = 3'b111. Apply this input for 1 clock cycle.",
  "scenario 10": "Set a = 3'b110 and b = 3'b010. Apply this input for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d", "scenario: 1b, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

  // Parameters
  reg [2:0] a;
  reg [2:0] b;
  wire [2:0] out_or_bitwise;
  wire out_or_logical;
  wire [5:0] out_not;

  // DUT instantiation
  top_module DUT (
    .a(a),
    .b(b),
    .out_or_bitwise(out_or_bitwise),
    .out_or_logical(out_or_logical),
    .out_not(out_not)
  );

  // File descriptor
  integer file;

  initial begin
    // Open file for writing
    file = $fopen("TBout.txt", "w");

    // Scenario 1
    a = 3'b000; b = 3'b000; #1;
    $fdisplay(file, "scenario: 1, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d", a, b, out_or_bitwise, out_or_logical, out_not);
    
    // Scenario 2
    a = 3'b101; b = 3'b010; #1;
    $fdisplay(file, "scenario: 2, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d", a, b, out_or_bitwise, out_or_logical, out_not);
    
    // Scenario 3
    a = 3'b111; b = 3'b000; #1;
    $fdisplay(file, "scenario: 3, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d", a, b, out_or_bitwise, out_or_logical, out_not);
    
    // Scenario 4
    a = 3'b011; b = 3'b011; #1;
    $fdisplay(file, "scenario: 4, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d", a, b, out_or_bitwise, out_or_logical, out_not);
    
    // Scenario 5
    a = 3'b110; b = 3'b111; #1;
    $fdisplay(file, "scenario: 5, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d", a, b, out_or_bitwise, out_or_logical, out_not);
    
    // Scenario 6
    a = 3'b001; b = 3'b100; #1;
    $fdisplay(file, "scenario: 6, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d", a, b, out_or_bitwise, out_or_logical, out_not);
    
    // Scenario 7
    a = 3'b010; b = 3'b101; #1;
    $fdisplay(file, "scenario: 7, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d", a, b, out_or_bitwise, out_or_logical, out_not);
    
    // Scenario 8
    a = 3'b111; b = 3'b111; #1;
    $fdisplay(file, "scenario: 8, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d", a, b, out_or_bitwise, out_or_logical, out_not);
    
    // Scenario 9
    a = 3'b000; b = 3'b111; #1;
    $fdisplay(file, "scenario: 9, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d", a, b, out_or_bitwise, out_or_logical, out_not);
    
    // Scenario 10
    a = 3'b110; b = 3'b010; #1;
    $fdisplay(file, "scenario: 10, a = %d, b = %d, out_or_bitwise = %d, out_or_logical = %d, out_not = %d", a, b, out_or_bitwise, out_or_logical, out_not);

    // Close file
    $fclose(file);
    $finish;
  end

endmodule
```

