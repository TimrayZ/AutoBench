############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "0: DUT is a finite state machine (FSM) designed to identify correctly received bytes in a serial communication protocol.",
    "1: DUT has one input clock signal (clk), one input signal for data (in), one active-high synchronous reset signal (reset), and one output signal (done) indicating successful receipt of a byte.",
    "2: The FSM needs to recognize a start bit (0), followed by 8 data bits, and conclude with a stop bit (1).",
    "3: The data is sent with the least significant bit first.",
    "4: The system must wait for a valid stop bit if it is not received after the expected 8 data bits.",
    "5: The output done signal should be asserted high when a complete byte is successfully received."
  ]
}
DUT header:
module top_module (
	input clk,
	input in,
	input reset,
	output done
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Assert reset signal high for 1 clock cycle to initialize the FSM, followed by releasing the reset signal. Wait for 2 clock cycles before sending the first data byte.",
  
  "scenario 2": "Send a data byte beginning with a start bit (0) at the 3rd clock cycle, followed by the least significant bit of the data (bit 0) at the 4th clock cycle, and continue sending the remaining bits (1 at 5, 1 at 6, 0 at 7, 1 at 8, 0 at 9, 1 at 10, and 1 at 11). Send the stop bit (1) at the 12th clock cycle.",
  
  "scenario 3": "Send a data byte starting with the start bit (0) at the 13th clock cycle, followed by its least significant bit (bit 0) at the 14th clock cycle, continuing with bits (1 at 15, 0 at 16, 1 at 17, 1 at 18, 0 at 19, 1 at 20, and 0 at 21). Send the stop bit (1) at the 22nd clock cycle.",
  
  "scenario 4": "Send a data byte starting with the start bit (0) at the 23rd clock cycle, followed by the least significant bit (bit 0) at the 24th clock cycle, and continue sending bits (0 at 25, 1 at 26, 1 at 27, 0 at 28, 1 at 29, 0 at 30, and 1 at 31). Send the stop bit (1) at the 32nd clock cycle.",
  
  "scenario 5": "Send a start bit (0) at the 33rd clock cycle, followed by a sequence of bits that ends before 8 data bits (0 at 34, 1 at 35, 0 at 36, and 1 at 37) without a stop bit. Wait for 10 clock cycles until a valid stop bit (1) is received, which is sent at the 48th clock cycle.",
  
  "scenario 6": "After the previous test, repeat the process by asserting the reset signal high for 1 clock cycle, releasing it, and then immediately sending new data starting with a start bit (0) at the 49th clock cycle, followed by the bits (1 at 50, 0 at 51, 1 at 52, 1 at 53, 0 at 54, 1 at 55, 0 at 56). Send the stop bit (1) at the 57th clock cycle."
}

