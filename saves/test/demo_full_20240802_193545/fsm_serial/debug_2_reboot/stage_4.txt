############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module (
	input clk,
	input in,
	input reset,
	output done
);

Your other information:
RTL circuit problem description:
In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Assert reset signal high for 1 clock cycle to initialize the FSM, followed by releasing the reset signal. Wait for 2 clock cycles before sending the first data byte.",
  
  "scenario 2": "Send a data byte beginning with a start bit (0) at the 3rd clock cycle, followed by the least significant bit of the data (bit 0) at the 4th clock cycle, and continue sending the remaining bits (1 at 5, 1 at 6, 0 at 7, 1 at 8, 0 at 9, 1 at 10, and 1 at 11). Send the stop bit (1) at the 12th clock cycle.",
  
  "scenario 3": "Send a data byte starting with the start bit (0) at the 13th clock cycle, followed by its least significant bit (bit 0) at the 14th clock cycle, continuing with bits (1 at 15, 0 at 16, 1 at 17, 1 at 18, 0 at 19, 1 at 20, and 0 at 21). Send the stop bit (1) at the 22nd clock cycle.",
  
  "scenario 4": "Send a data byte starting with the start bit (0) at the 23rd clock cycle, followed by the least significant bit (bit 0) at the 24th clock cycle, and continue sending bits (0 at 25, 1 at 26, 1 at 27, 0 at 28, 1 at 29, 0 at 30, and 1 at 31). Send the stop bit (1) at the 32nd clock cycle.",
  
  "scenario 5": "Send a start bit (0) at the 33rd clock cycle, followed by a sequence of bits that ends before 8 data bits (0 at 34, 1 at 35, 0 at 36, and 1 at 37) without a stop bit. Wait for 10 clock cycles until a valid stop bit (1) is received, which is sent at the 48th clock cycle.",
  
  "scenario 6": "After the previous test, repeat the process by asserting the reset signal high for 1 clock cycle, releasing it, and then immediately sending new data starting with a start bit (0) at the 49th clock cycle, followed by the bits (1 at 50, 0 at 51, 1 at 52, 1 at 53, 0 at 54, 1 at 55, 0 at 56). Send the stop bit (1) at the 57th clock cycle."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  in;
reg  reset;
wire  done;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.in(in),
	.reset(reset),
	.done(done)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  in;
reg  reset;
wire  done;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.in(in),
	.reset(reset),
	.done(done)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    reset = 1;
    #10; reset = 0;
    #20;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);

    // scenario 2
    scenario = 2;
    #10; in = 0; // start bit
    #10; in = 0; // bit 0
    #10; in = 1; // bit 1
    #10; in = 1; // bit 1
    #10; in = 0; // bit 0
    #10; in = 1; // bit 1
    #10; in = 0; // bit 0
    #10; in = 1; // bit 1
    #10; in = 1; // stop bit
    repeat(6) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);
    end

    // scenario 3
    scenario = 3;
    #10; in = 0; // start bit
    #10; in = 0; // bit 0
    #10; in = 1; // bit 1
    #10; in = 0; // bit 0
    #10; in = 1; // bit 1
    #10; in = 1; // bit 1
    #10; in = 0; // bit 0
    #10; in = 1; // bit 1
    #10; in = 1; // stop bit
    repeat(6) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);
    end

    // scenario 4
    scenario = 4;
    #10; in = 0; // start bit
    #10; in = 0; // bit 0
    #10; in = 1; // bit 1
    #10; in = 1; // bit 1
    #10; in = 0; // bit 0
    #10; in = 1; // bit 1
    #10; in = 0; // bit 0
    #10; in = 1; // bit 1
    #10; in = 1; // stop bit
    repeat(6) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);
    end

    // scenario 5
    scenario = 5;
    #10; in = 0; // start bit
    #10; in = 0; // bit 0
    #10; in = 1; // bit 1
    #10; in = 0; // bit 0
    #10; in = 1; // bit 1
    // Delay for waiting for a valid stop bit
    #10; #10; #10; #10; #10; #10; #10; #10; #10; #10; 
    #10; in = 1; // stop bit
    repeat(6) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);
    end
    
    // scenario 6
    scenario = 6;
    #10; reset = 1; 
    #10; reset = 0;
    #10; in = 0; // start bit
    #10; in = 1; // bit 1
    #10; in = 0; // bit 0
    #10; in = 1; // bit 1
    #10; in = 1; // bit 1
    #10; in = 0; // bit 0
    #10; in = 1; // bit 1
    #10; in = 1; // stop bit
    repeat(6) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);
    end

    $fclose(file);
    $finish;
end

endmodule
```

