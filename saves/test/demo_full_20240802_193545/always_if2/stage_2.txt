############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Fix any and all bugs in this code:

// module top_module (
//     input      cpu_overheated,
//     output reg shut_off_computer,
//     input      arrived,
//     input      gas_tank_empty,
//     output reg keep_driving  ); //

//     always @(*) begin
//         if (cpu_overheated)
//            shut_off_computer = 1;
//     end

//     always @(*) begin
//         if (~arrived)
//            keep_driving = ~gas_tank_empty;
//     end

// endmodule

RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a module named 'top_module' that has 4 input signals: 'cpu_overheated', 'arrived', and 'gas_tank_empty'. It has 2 output signals: 'shut_off_computer' and 'keep_driving'.",
    "2. The output 'shut_off_computer' should be set to 1 when 'cpu_overheated' is true (1).",
    "3. The output 'keep_driving' should be set to the negation of 'gas_tank_empty' when 'arrived' is false (0).",
    "4. The module makes use of always blocks triggered by any change in the input signals.",
    "5. The expected behavior of the DUT must be validated against various test cases including all possible combinations of input signal values."
  ]
}
DUT header:
module top_module (
	input cpu_overheated,
	output reg shut_off_computer,
	input arrived,
	input gas_tank_empty,
	output reg keep_driving
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set 'cpu_overheated' to 1 (true), 'arrived' to 0 (false), and 'gas_tank_empty' to 0 (false) for 1 clock cycle. Then check outputs.",
  "scenario 2": "Set 'cpu_overheated' to 0 (false), 'arrived' to 1 (true), and 'gas_tank_empty' to 1 (true) for 1 clock cycle. Then check outputs.",
  "scenario 3": "Set 'cpu_overheated' to 0 (false), 'arrived' to 0 (false), and 'gas_tank_empty' to 0 (false) for 1 clock cycle. Then check outputs.",
  "scenario 4": "Set 'cpu_overheated' to 1 (true), 'arrived' to 1 (true), and 'gas_tank_empty' to 0 (false) for 1 clock cycle. Then check outputs.",
  "scenario 5": "Set 'cpu_overheated' to 0 (false), 'arrived' to 0 (false), and 'gas_tank_empty' to 1 (true) for 1 clock cycle. Then check outputs.",
  "scenario 6": "Set 'cpu_overheated' to 1 (true), 'arrived' to 0 (false), and 'gas_tank_empty' to 1 (true) for 1 clock cycle. Then check outputs.",
  "scenario 7": "Set 'cpu_overheated' to 0 (false), 'arrived' to 1 (true), and 'gas_tank_empty' to 1 (true) for 1 clock cycle. Then check outputs.",
  "scenario 8": "Set 'cpu_overheated' to 1 (true), 'arrived' to 1 (true), and 'gas_tank_empty' to 1 (true) for 1 clock cycle. Then check outputs.",
  "scenario 9": "Set 'cpu_overheated' to 1 (true), 'arrived' to 0 (false), and 'gas_tank_empty' to 0 (false) for 2 clock cycles, changing 'arrived' to 1 (true) in between the cycles. Then check outputs."
}

