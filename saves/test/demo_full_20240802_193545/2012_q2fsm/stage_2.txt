############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Consider the state machine shown below:

// A (0) --1--> B
// A (0) --0--> A
// B (0) --1--> C
// B (0) --0--> D
// C (0) --1--> E
// C (0) --0--> D
// D (0) --1--> F
// D (0) --0--> A
// E (1) --1--> E
// E (1) --0--> D
// F (1) --1--> C
// F (1) --0--> D

// Reset resets into state A and is synchronous active-high. 

// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.
RTL testbench specification:
{
  "important data": "// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high.",
  "technical specifications": [
    "0: The DUT is a finite state machine (FSM) that has 6 states: A, B, C, D, E, and F.",
    "1: The input signals to the DUT are clk (clock), reset (active high), and w (input signal) which can be either 0 or 1.",
    "2: The output signal from the DUT is z which represents some output based on the states.",
    "3: The DUT should transition between states according to the defined state transition rules in the problem description.",
    "4: The DUT resets to state A on a high reset signal.",
    "5: The testbench should verify the output z for each state transition based on the input w and the current state."
  ]
}
DUT header:
module top_module (
	input clk,
	input reset,
	input w,
	output z
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Initialize the system by asserting reset for 1 clock cycle and then de-assert it. Wait for 1 clock cycle to observe the initial state at output z.",
  "scenario 2": "Drive input w with 0 for 2 clock cycles in state A, then observe output z.",
  "scenario 3": "Drive input w with 1 for 1 clock cycle in state A, then observe output z and transition to state B based on the input.",
  "scenario 4": "In state B, drive input w with 0 for 1 clock cycle, then observe output z and transition to state D.",
  "scenario 5": "In state B, drive input w with 1 for 1 clock cycle, then observe output z and transition to state C.",
  "scenario 6": "In state C, drive input w with 0 for 1 clock cycle, then observe output z and transition to state D.",
  "scenario 7": "In state C, drive input w with 1 for 1 clock cycle, then observe output z and transition to state E.",
  "scenario 8": "In state D, drive input w with 0 for 1 clock cycle, then observe output z and transition back to state A.",
  "scenario 9": "In state D, drive input w with 1 for 1 clock cycle, then observe output z and transition to state F.",
  "scenario 10": "In state E, drive input w with 0 for 1 clock cycle, then observe output z and transition to state D.",
  "scenario 11": "In state E, drive input w with 1 for 1 clock cycle, then observe output z and remain in state E.",
  "scenario 12": "In state F, drive input w with 0 for 1 clock cycle, then observe output z and transition back to state D.",
  "scenario 13": "In state F, drive input w with 1 for 1 clock cycle, then observe output z and transition to state C."
}

