############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
We want to create a timer with one input that:

// (1) is started when a particular input pattern (1101) is detected,
// (2) shifts in 4 more bits to determine the duration to delay,
// (3) waits for the counters to finish counting, and
// (4) notifies the user and waits for the user to acknowledge the timer.

// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.

// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. 

// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).

// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. 

RTL header:
module top_module(
	input wire clk,
	input wire reset,
	input wire data,
    output wire [3:0] count,
    output reg counting,
    output reg done,
    input wire ack );

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module(
    input wire clk,
    input wire reset,
    input wire data,
    output reg [3:0] count,
    output reg counting,
    output reg done,
    input wire ack
);

    reg [3:0] delay;
    reg [3:0] current_count;
    reg [2:0] state;
    
    localparam IDLE      = 3'b000;
    localparam DETECT    = 3'b001;
    localparam SHIFT     = 3'b010;
    localparam COUNT     = 3'b011;
    localparam DONE      = 3'b100;
    
    reg [3:0] bit_counter;
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            counting <= 0;
            done <= 0;
            count <= 4'bxxxx; // Don't care
            current_count <= 0;
            bit_counter <= 0;
        end else begin
            case (state)
                IDLE: begin
                    counting <= 0;
                    done <= 0;
                    count <= 4'bxxxx; // Don't care
                    if (data == 1 && bit_counter == 0) begin
                        bit_counter <= bit_counter + 1;
                    end else if (data == 1 && bit_counter == 1) begin
                        bit_counter <= bit_counter + 1;
                    end else if (data == 0 && bit_counter == 1) begin
                        bit_counter <= bit_counter + 1;
                    end else if (data == 1 && bit_counter == 2) begin
                        bit_counter <= bit_counter + 1;
                    end else if (data == 0 && bit_counter == 3) begin
                        bit_counter <= 0;
                        state <= SHIFT;
                    end
                end
                
                SHIFT: begin
                    if (bit_counter < 4) begin
                        delay[3 - bit_counter] <= data; // Shift in delay bits
                        bit_counter <= bit_counter + 1;
                    end else begin
                        current_count <= (delay + 4'b0001) * 1000 - 1; // Delay calculation
                        counting <= 1;
                        state <= COUNT;
                        bit_counter <= 0;
                    end
                end
                
                COUNT: begin
                    if (current_count > 0) begin
                        current_count <= current_count - 1;
                        count <= current_count[12:10]; // Output the current delay in bits
                    end else begin
                        counting <= 0;
                        done <= 1;
                        count <= 4'b0000; // Output 0 at the end of count
                        state <= DONE;
                    end
                end
                
                DONE: begin
                    if (ack) begin
                        done <= 0;
                        state <= IDLE;
                    end
                end
                
                default: state <= IDLE;
            endcase
        end
    end
endmodule
```

