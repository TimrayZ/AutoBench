############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input wire clk,
	input wire reset,
	input wire data,
    output wire [3:0] count,
    output reg counting,
    output reg done,
    input wire ack );

Your other information:
RTL circuit problem description:
We want to create a timer with one input that:

// (1) is started when a particular input pattern (1101) is detected,
// (2) shifts in 4 more bits to determine the duration to delay,
// (3) waits for the counters to finish counting, and
// (4) notifies the user and waits for the user to acknowledge the timer.

// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.

// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. 

// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).

// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. 

IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Apply reset (reset = 1) for 1 clock cycle on rising edge of clk to initialize the DUT.",
  "scenario 2": "Release reset (reset = 0) on the next clock cycle and begin sending the data input. Immediately after reset, send '1101' followed by 4 bits for delay (e.g., '0101' for a delay of 5) over 5 clock cycles.",
  "scenario 3": "After sending the delay bits, maintain data = 0 for 1000 clock cycles to observe the counting process while capturing the count output.",
  "scenario 4": "Wait for an additional 4000 clock cycles to confirm that the counting continues decrementing the count output as expected.",
  "scenario 5": "Toggle the ack signal (ack = 1) for 1 clock cycle once the done signal is asserted to test the reset behavior of the DUT.",
  "scenario 6": "After asserting ack, apply reset (reset = 1) for 1 clock cycle and release reset (reset = 0) to check if the DUT returns to the initial searching state.",
  "scenario 7": "Send another input sequence of '1101' followed by a different 4-bit delay value (e.g., '0011' for a delay of 3) while observing that the DUT does not respond until ready.",
  "scenario 8": "Test that the DUT correctly ignores additional data inputs while counting from the previously set delay after it has started counting."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
reg  data;
wire [3:0] count;
wire  counting;
wire  done;
reg  ack;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.data(data),
	.count(count),
	.counting(counting),
	.done(done),
	.ack(ack)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, count = %d, counting = %d, done = %d, ack = %d", scenario, clk, reset, data, count, counting, done, ack);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, count = %d, counting = %d, done = %d, ack = %d", scenario, clk, reset, data, count, counting, done, ack);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
reg  data;
wire [3:0] count;
wire  counting;
wire  done;
reg  ack;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.data(data),
	.count(count),
	.counting(counting),
	.done(done),
	.ack(ack)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // Scenario 1
    scenario = 1;
    reset = 1;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, count = %d, counting = %d, done = %d, ack = %d", scenario, clk, reset, data, count, counting, done, ack);
    reset = 0;
    #10;

    // Scenario 2
    scenario = 2;
    data = 1; // '1'
    #10; 
    data = 1; // '1'
    #10; 
    data = 0; // '0'
    #10; 
    data = 1; // '1'
    #10; 
    data = 0; // '0' to start sending delay, '0101' for delay of 5
    #10; 
    data = 1; // '1'
    #10; 
    data = 0; // '0'
    #10; 
    data = 1; // '1'
    #10; 
    data = 1; // '1'
    #10; 
    data = 0; // now maintain data = 0
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, count = %d, counting = %d, done = %d, ack = %d", scenario, clk, reset, data, count, counting, done, ack);

    // Scenario 3
    scenario = 3;
    repeat(1000) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, count = %d, counting = %d, done = %d, ack = %d", scenario, clk, reset, data, count, counting, done, ack);
    end

    // Scenario 4
    scenario = 4;
    repeat(4000) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, count = %d, counting = %d, done = %d, ack = %d", scenario, clk, reset, data, count, counting, done, ack);
    end

    // Scenario 5
    scenario = 5;
    ack = 1; 
    #10; 
    ack = 0; 
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, count = %d, counting = %d, done = %d, ack = %d", scenario, clk, reset, data, count, counting, done, ack);

    // Scenario 6
    scenario = 6;
    reset = 1; 
    #10;
    reset = 0; 
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, count = %d, counting = %d, done = %d, ack = %d", scenario, clk, reset, data, count, counting, done, ack);

    // Scenario 7
    scenario = 7;
    data = 1; // '1'
    #10; 
    data = 1; // '1'
    #10; 
    data = 0; // '0'
    #10; 
    data = 1; // '1'
    #10; 
    data = 0; // '0' to start sending new delay, '0011' for delay of 3
    #10; 
    data = 1; // '1'
    #10; 
    data = 1; // '1'
    #10; 
    data = 0; // '0'
    #10; 
    data = 1; // '1'
    #10; 
    data = 0; // now maintain data = 0
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, count = %d, counting = %d, done = %d, ack = %d", scenario, clk, reset, data, count, counting, done, ack);

    // Scenario 8
    scenario = 8;
    repeat(6000) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, count = %d, counting = %d, done = %d, ack = %d", scenario, clk, reset, data, count, counting, done, ack);
    end

    $fclose(file);
    $finish;
end

endmodule
```

