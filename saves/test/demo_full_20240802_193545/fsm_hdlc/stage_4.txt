############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module (
	input clk,
	input reset,
	input in,
	output disc,
	output flag,
	output err);

Your other information:
RTL circuit problem description:
Synchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a "flag" that indicate frame boundaries. To avoid the data stream from accidentally containing "flags", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:

// (1) 0111110: Signal a bit needs to be discarded (disc).
// (2) 01111110: Flag the beginning/end of a frame (flag).
// (3) 01111111...: Error (7 or more 1s) (err).

// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Reset the DUT by asserting reset high for 1 clock cycle (clk cycle 0). Release the reset (set reset low) at clock cycle 1. Then, apply the input sequence 0, 1, 1, 1, 1, 1, 0 (for clock cycles 2 to 8) to check if the disc output is asserted correctly after detecting 0111110.",
  "scenario 2": "After the previous test, keep applying the input sequence 0, 1, 1, 1, 1, 1, 1, 0 (for clock cycles 9 to 16) to check if the flag output is asserted correctly at the end of the sequence of 01111110.",
  "scenario 3": "Reset the DUT again by asserting reset high for 1 clock cycle (clk cycle 17). Release the reset (set reset low) at clock cycle 18. Apply a continuous sequence of 1s for 8 clock cycles (1, 1, 1, 1, 1, 1, 1, 1) during clock cycles 19 to 26 to check if the err output is asserted correctly due to the detection of 7 consecutive 1s.",
  "scenario 4": "After the error test, apply the input sequence 0, 1, 1, 1, 1, 1, 0 (for clock cycles 27 to 33) immediately to check if the disc signal is asserted after detecting the 0111110 pattern, ensuring the FSM recovers correctly post-error.",
  "scenario 5": "Perform a longer sequence test by applying 0, 1, 1, 1, 1, 1, 1, 0 followed by 0, 0, 0, 1, 1, 1, 1, 1, 0 (for clock cycles 34 to 51) to check various transitions and to affirm that the system behaves correctly across multiple patterns, ensuring no erroneous outputs are produced."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
reg  in;
wire  disc;
wire  flag;
wire  err;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.in(in),
	.disc(disc),
	.flag(flag),
	.err(err)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, disc = %d, flag = %d, err = %d", scenario, clk, reset, in, disc, flag, err);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, disc = %d, flag = %d, err = %d", scenario, clk, reset, in, disc, flag, err);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
reg  in;
wire  disc;
wire  flag;
wire  err;

integer file, scenario;

// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.in(in),
	.disc(disc),
	.flag(flag),
	.err(err)
);

// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end

// Scenario Based Test
initial begin

    // Scenario 1
    scenario = 1;
    reset = 1; in = 0; #10;
    reset = 0; #10;
    in = 0; #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, disc = %d, flag = %d, err = %d", scenario, clk, reset, in, disc, flag, err);
    in = 1; repeat(6) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, disc = %d, flag = %d, err = %d", scenario, clk, reset, in, disc, flag, err);
    end

    // Scenario 2
    scenario = 2;
    in = 1; #10;
    in = 1; #10;
    in = 1; #10;
    in = 1; #10;
    in = 0; #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, disc = %d, flag = %d, err = %d", scenario, clk, reset, in, disc, flag, err);

    // Scenario 3
    scenario = 3;
    reset = 1; #10;
    reset = 0; #10;
    in = 1; repeat(8) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, disc = %d, flag = %d, err = %d", scenario, clk, reset, in, disc, flag, err);
    end

    // Scenario 4
    scenario = 4;
    in = 0; #10;
    in = 1; repeat(5) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, disc = %d, flag = %d, err = %d", scenario, clk, reset, in, disc, flag, err);
    end

    // Scenario 5
    scenario = 5;
    in = 0; #10;
    in = 1; repeat(6) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, disc = %d, flag = %d, err = %d", scenario, clk, reset, in, disc, flag, err);
    end
    in = 0; #10;
    in = 0; #10;
    in = 1; repeat(5) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, disc = %d, flag = %d, err = %d", scenario, clk, reset, in, disc, flag, err);
    end

    $fclose(file);
    $finish;
end

endmodule
```

