############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w
// ; b -> x; b -> y; c -> z.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1: The DUT module is named 'top_module'.",
    "2: The DUT has 3 input signals: 'a', 'b', and 'c'.",
    "3: The DUT has 4 output signals: 'w', 'x', 'y', and 'z'.",
    "4: The functionality of the DUT is defined as: 'w' is connected to 'a', 'x' and 'y' are connected to 'b', and 'z' is connected to 'c'.",
    "5: The expected behavior of the DUT can be summarized as follows: output w should be equal to input a, output x should be equal to input b, output y should be equal to input b, and output z should be equal to input c."
  ]
}
DUT header:
module top_module (
	input a,
	input b,
	input c,
	output w,
	output x,
	output y,
	output z  );


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set inputs a = 0, b = 0, c = 0 for 1 clock cycle. This test case validates the DUT behavior with all inputs low.",
  "scenario 2": "Set inputs a = 1, b = 0, c = 0 for 1 clock cycle. This case checks the DUT behavior when only input a is high.",
  "scenario 3": "Set inputs a = 0, b = 1, c = 0 for 1 clock cycle. This checks the DUT behavior when only input b is high.",
  "scenario 4": "Set inputs a = 0, b = 0, c = 1 for 1 clock cycle. This checks the DUT behavior when only input c is high.",
  "scenario 5": "Set inputs a = 1, b = 1, c = 0 for 1 clock cycle. This case evaluates the DUT behavior when inputs a and b are high.",
  "scenario 6": "Set inputs a = 1, b = 0, c = 1 for 1 clock cycle. This scenario tests the DUT behavior when inputs a and c are high.",
  "scenario 7": "Set inputs a = 0, b = 1, c = 1 for 1 clock cycle. This case will analyze the DUT behavior when inputs b and c are high.",
  "scenario 8": "Set inputs a = 1, b = 1, c = 1 for 1 clock cycle. This test evaluates the DUT behavior with all inputs high.",
  "scenario 9": "Set inputs a = 0, b = 1, c = 0, then after 1 clock cycle change to a = 1, b = 1, c = 0 for 1 clock cycle. This checks if the DUT correctly responds to dynamic input changes.",
  "scenario 10": "Set inputs a = 1, b = 1, c = 1, then after 1 clock cycle change to a = 0, b = 0, c = 0 for 1 clock cycle. This checks DUT response to another dynamic change."
}

