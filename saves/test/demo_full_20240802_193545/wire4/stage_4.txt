############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", "scenario: 1b, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input a,
	input b,
	input c,
	output w,
	output x,
	output y,
	output z  );

Your other information:
RTL circuit problem description:
Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w
// ; b -> x; b -> y; c -> z.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1: The DUT module is named 'top_module'.",
    "2: The DUT has 3 input signals: 'a', 'b', and 'c'.",
    "3: The DUT has 4 output signals: 'w', 'x', 'y', and 'z'.",
    "4: The functionality of the DUT is defined as: 'w' is connected to 'a', 'x' and 'y' are connected to 'b', and 'z' is connected to 'c'.",
    "5: The expected behavior of the DUT can be summarized as follows: output w should be equal to input a, output x should be equal to input b, output y should be equal to input b, and output z should be equal to input c."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set inputs a = 0, b = 0, c = 0 for 1 clock cycle. This test case validates the DUT behavior with all inputs low.",
  "scenario 2": "Set inputs a = 1, b = 0, c = 0 for 1 clock cycle. This case checks the DUT behavior when only input a is high.",
  "scenario 3": "Set inputs a = 0, b = 1, c = 0 for 1 clock cycle. This checks the DUT behavior when only input b is high.",
  "scenario 4": "Set inputs a = 0, b = 0, c = 1 for 1 clock cycle. This checks the DUT behavior when only input c is high.",
  "scenario 5": "Set inputs a = 1, b = 1, c = 0 for 1 clock cycle. This case evaluates the DUT behavior when inputs a and b are high.",
  "scenario 6": "Set inputs a = 1, b = 0, c = 1 for 1 clock cycle. This scenario tests the DUT behavior when inputs a and c are high.",
  "scenario 7": "Set inputs a = 0, b = 1, c = 1 for 1 clock cycle. This case will analyze the DUT behavior when inputs b and c are high.",
  "scenario 8": "Set inputs a = 1, b = 1, c = 1 for 1 clock cycle. This test evaluates the DUT behavior with all inputs high.",
  "scenario 9": "Set inputs a = 0, b = 1, c = 0, then after 1 clock cycle change to a = 1, b = 1, c = 0 for 1 clock cycle. This checks if the DUT correctly responds to dynamic input changes.",
  "scenario 10": "Set inputs a = 1, b = 1, c = 1, then after 1 clock cycle change to a = 0, b = 0, c = 0 for 1 clock cycle. This checks DUT response to another dynamic change."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", "scenario: 1b, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Declare input signals
    reg a;
    reg b;
    reg c;

    // Declare output signals
    wire w;
    wire x;
    wire y;
    wire z;

    // Instantiate the DUT
    top_module uut (
        .a(a),
        .b(b),
        .c(c),
        .w(w),
        .x(x),
        .y(y),
        .z(z)
    );

    // File descriptor for output
    integer file;

    initial begin
        // Open the output file
        file = $fopen("TBout.txt", "w");

        // Test scenario 1
        a = 0; b = 0; c = 0;
        #1; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 1, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", a, b, c, w, x, y, z);

        // Test scenario 2
        a = 1; b = 0; c = 0;
        #1;
        $fdisplay(file, "scenario: 2, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", a, b, c, w, x, y, z);

        // Test scenario 3
        a = 0; b = 1; c = 0;
        #1;
        $fdisplay(file, "scenario: 3, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", a, b, c, w, x, y, z);

        // Test scenario 4
        a = 0; b = 0; c = 1;
        #1;
        $fdisplay(file, "scenario: 4, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", a, b, c, w, x, y, z);

        // Test scenario 5
        a = 1; b = 1; c = 0;
        #1;
        $fdisplay(file, "scenario: 5, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", a, b, c, w, x, y, z);

        // Test scenario 6
        a = 1; b = 0; c = 1;
        #1;
        $fdisplay(file, "scenario: 6, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", a, b, c, w, x, y, z);

        // Test scenario 7
        a = 0; b = 1; c = 1;
        #1;
        $fdisplay(file, "scenario: 7, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", a, b, c, w, x, y, z);

        // Test scenario 8
        a = 1; b = 1; c = 1;
        #1;
        $fdisplay(file, "scenario: 8, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", a, b, c, w, x, y, z);

        // Test scenario 9
        a = 0; b = 1; c = 0;
        #1;
        $fdisplay(file, "scenario: 9a, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", a, b, c, w, x, y, z);
        a = 1; b = 1; c = 0;
        #1;
        $fdisplay(file, "scenario: 9b, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", a, b, c, w, x, y, z);

        // Test scenario 10
        a = 1; b = 1; c = 1;
        #1;
        $fdisplay(file, "scenario: 10a, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", a, b, c, w, x, y, z);
        a = 0; b = 0; c = 0;
        #1;
        $fdisplay(file, "scenario: 10b, a = %d, b = %d, c = %d, w = %d, x = %d, y = %d, z = %d", a, b, c, w, x, y, z);

        // Close the output file
        $fclose(file);
    end

endmodule
```

