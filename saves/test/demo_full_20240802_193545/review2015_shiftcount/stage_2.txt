############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Build a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).
RTL testbench specification:
{
  "important data": "Build a four-bit shift register that acts as a down counter. It shifts data in most-significant-bit first when shift_ena is 1, and decrements the value in the register when count_ena is 1. The two control signals are never asserted together, so their combined behavior is irrelevant.",
  "technical specifications": [
    "1: DUT Module Header: module top_module(input clk, input shift_ena, input count_ena, input data, output reg [3:0] q);",
    "2: The DUT is a 4-bit shift register.",
    "3: The output 'q' is a 4-bit register that holds the current state of the shift register and down counter.",
    "4: When shift_ena is asserted (1), the data is shifted into the register from the most significant bit (MSB).",
    "5: When count_ena is asserted (1), the value in the register is decremented by 1.",
    "6: The DUT does not have defined behavior when both shift_ena and count_ena are asserted.",
    "7: Timing considerations include clock edge sensitivity for the shift and count operations."
  ]
}
DUT header:
module top_module(
	input clk,
	input shift_ena,
	input count_ena,
	input data,
	output reg [3:0] q);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Initialize the DUT with clk = 0, shift_ena = 0, count_ena = 0, data = 4'b0000. Apply a clock pulse (clk goes from 0 to 1) and wait for two clock cycles without asserting any control signals. This serves as the baseline test to check initial conditions.",
  "scenario 2": "Set shift_ena = 1 and data = 4'b1010. Apply a clock pulse (clk goes from 0 to 1) to shift the data into the register. Continue applying clock pulses for 3 cycles while keeping shift_ena = 1 and count_ena = 0 to observe the shifting behavior.",
  "scenario 3": "Set count_ena = 1 and assert the clock (clk goes from 0 to 1) while keeping shift_ena = 0. Continue applying clock pulses for 4 cycles to decrement the value in the register while observing the output.",
  "scenario 4": "Simultaneously assert shift_ena = 1 and count_ena = 1 to observe the behavior of the DUT when both control inputs are high; apply a clock pulse (clk goes from 0 to 1) and check output for 1 cycle.",
  "scenario 5": "Set count_ena = 1 and initialize the register with a known value (like 4'b0011) by enabling the shift operation first for 1 cycle (shift_ena = 1, then set count_ena = 1). Apply clock pulses for 3 cycles to see the decrement behavior from a known state.",
  "scenario 6": "Change the data to a different 4-bit value (like 4'b1111) while shift_ena = 1 and count_ena = 0, then apply a clock pulse. Observe the register contents after shifting the new data in for 2 clock cycles.",
  "scenario 7": "Toggle the clk signal (go from 0 to 1, then 1 to 0, and back to 1) without changing shift_ena or count_ena to verify the register holds its value across clock edges when inactive."
}

