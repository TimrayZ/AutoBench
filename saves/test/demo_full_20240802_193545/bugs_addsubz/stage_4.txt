############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d", "scenario: 1b, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input do_sub,
	input [7:0] a,
	input [7:0] b,
	output reg [7:0] out,
	output reg result_is_zero
);

Your other information:
RTL circuit problem description:
The following adder-subtractor with zero flag doesn't work. Fix the bug(s).

// synthesis verilog_input_version verilog_2001
// module top_module ( 
//     input do_sub,
//     input [7:0] a,
//     input [7:0] b,
//     output reg [7:0] out,
//     output reg result_is_zero
// );//

//     always @(*) begin
//         case (do_sub)
//           0: out = a+b;
//           1: out = a-b;
//         endcase

//         if (~out)
//             result_is_zero = 1;
//     end

// endmodule
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a combinational circuit that operates as an adder or subtractor based on the 'do_sub' control input.",
    "2. Inputs: 'do_sub' (control signal, 1-bit), 'a' (8-bit input), 'b' (8-bit input).",
    "3. Outputs: 'out' (8-bit result of addition or subtraction), 'result_is_zero' (1-bit indicating if the 'out' is zero).",
    "4. The output 'out' is computed as follows: if 'do_sub' is 0, then 'out' = a + b; if 'do_sub' is 1, then 'out' = a - b.",
    "5. The 'result_is_zero' output should be asserted (1) if 'out' is equal to zero, else (0).",
    "6. The current implementation has a bug in the assignment of 'result_is_zero'. It should ideally be checked after calculating 'out'.",
    "7. The testbench will simulate various cases for different values of inputs 'a' and 'b' with both control states (do_sub = 0 and do_sub = 1) to validate the functionality of the DUT."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set do_sub = 0, a = 8'h01, b = 8'h01. Wait for 1 clock cycle.",
  "scenario 2": "Set do_sub = 0, a = 8'hFF, b = 8'h01. Wait for 1 clock cycle.",
  "scenario 3": "Set do_sub = 0, a = 8'h00, b = 8'h00. Wait for 1 clock cycle.",
  "scenario 4": "Set do_sub = 1, a = 8'h02, b = 8'h01. Wait for 1 clock cycle.",
  "scenario 5": "Set do_sub = 1, a = 8'h01, b = 8'hFF. Wait for 1 clock cycle.",
  "scenario 6": "Set do_sub = 1, a = 8'h00, b = 8'h00. Wait for 1 clock cycle.",
  "scenario 7": "Set do_sub = 0, a = 8'h7F, b = 8'h80. Wait for 1 clock cycle.",
  "scenario 8": "Set do_sub = 1, a = 8'h80, b = 8'h7F. Wait for 1 clock cycle.",
  "scenario 9": "Set do_sub = 0, a = 8'hAA, b = 8'h55. Wait for 1 clock cycle.",
  "scenario 10": "Set do_sub = 1, a = 8'h55, b = 8'hAA. Wait for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d", "scenario: 1b, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Inputs
    reg do_sub;
    reg [7:0] a;
    reg [7:0] b;

    // Outputs
    wire [7:0] out;
    wire result_is_zero;

    // Instantiate the DUT
    top_module DUT (
        .do_sub(do_sub),
        .a(a),
        .b(b),
        .out(out),
        .result_is_zero(result_is_zero)
    );

    // File for output signals
    integer file;

    initial begin
        // Open the file
        file = $fopen("TBout.txt", "w");

        // Scenario 1
        do_sub = 0; a = 8'h01; b = 8'h01;
        #1; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 1, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d", do_sub, a, b, out, result_is_zero);

        // Scenario 2
        do_sub = 0; a = 8'hFF; b = 8'h01;
        #1; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 2, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d", do_sub, a, b, out, result_is_zero);

        // Scenario 3
        do_sub = 0; a = 8'h00; b = 8'h00;
        #1; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 3, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d", do_sub, a, b, out, result_is_zero);

        // Scenario 4
        do_sub = 1; a = 8'h02; b = 8'h01;
        #1; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 4, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d", do_sub, a, b, out, result_is_zero);

        // Scenario 5
        do_sub = 1; a = 8'h01; b = 8'hFF;
        #1; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 5, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d", do_sub, a, b, out, result_is_zero);

        // Scenario 6
        do_sub = 1; a = 8'h00; b = 8'h00;
        #1; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 6, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d", do_sub, a, b, out, result_is_zero);

        // Scenario 7
        do_sub = 0; a = 8'h7F; b = 8'h80;
        #1; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 7, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d", do_sub, a, b, out, result_is_zero);

        // Scenario 8
        do_sub = 1; a = 8'h80; b = 8'h7F;
        #1; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 8, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d", do_sub, a, b, out, result_is_zero);

        // Scenario 9
        do_sub = 0; a = 8'hAA; b = 8'h55;
        #1; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 9, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d", do_sub, a, b, out, result_is_zero);

        // Scenario 10
        do_sub = 1; a = 8'h55; b = 8'hAA;
        #1; // Wait for signals to stabilize
        $fdisplay(file, "scenario: 10, do_sub = %d, a = %d, b = %d, out = %d, result_is_zero = %d", do_sub, a, b, out, result_is_zero);

        // Close the file
        $fclose(file);
        $finish; // End simulation
    end

endmodule
```

