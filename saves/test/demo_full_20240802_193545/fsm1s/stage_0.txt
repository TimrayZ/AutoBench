############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
This is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.

// B (out=1) --in=0--> A
// B (out=1) --in=1--> B
// A (out=0) --in=0--> B
// A (out=0) --in=1--> A
RTL header:
module top_module (
	input clk,
	input in,
	input reset,
	output out
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
    input clk,
    input in,
    input reset,
    output reg out
);

    // State encoding
    typedef enum logic [1:0] {
        B = 1'b0,
        A = 1'b1
    } state_t;

    state_t current_state, next_state;

    // State transition
    always_ff @(posedge clk) begin
        if (reset) begin
            current_state <= B; // Reset to state B
        end else begin
            current_state <= next_state; // Move to next state
        end
    end

    // Next state logic
    always_comb begin
        case (current_state)
            B: begin
                out = 1; // Output 1 in state B
                if (in == 0) begin
                    next_state = A; // Transition to A if in=0
                end else begin
                    next_state = B; // Stay in B if in=1
                end
            end

            A: begin
                out = 0; // Output 0 in state A
                if (in == 0) begin
                    next_state = B; // Transition to B if in=0
                end else begin
                    next_state = A; // Stay in A if in=1
                end
            end

            default: begin
                next_state = B; // Default state
                out = 1;        // Default output
            end
        endcase
    end
endmodule
```

