############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, zero = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, zero = %d", "scenario: 1b, zero = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	output zero);

Your other information:
RTL circuit problem description:
Build a circuit that always outputs a LOW.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is defined as a Verilog module named 'top_module'.",
    "2. The module has a single output port named 'zero'.",
    "3. The expected behavior of the DUT is to always output a LOW signal.",
    "4. The testbench must generate test cases that will check the output 'zero' of the DUT to confirm it is LOW regardless of any other input signals.",
    "5. The testbench should include a section to instantiate the DUT, drive the necessary inputs (if any), and monitor the outputs.",
    "6. The pass criterion for the DUT is that the output 'zero' must constantly be LOW (0) during all test scenarios."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Initialize the testbench. Wait for 1 clock cycle. Check the output 'zero'.",
  "scenario 2": "Apply no changes to the inputs (if any) and wait for 10 clock cycles. Check the output 'zero' repeatedly each cycle.",
  "scenario 3": "Toggle any other input signals (if applicable) at clock cycle 2 and then wait for 10 clock cycles. Monitor the output 'zero' during this period.",
  "scenario 4": "Reset any inputs (if applicable) at clock cycle 5 and hold for 5 clock cycles. Check the output 'zero' during this time.",
  "scenario 5": "Apply a high-frequency input signal (if applicable) starting at clock cycle 3, toggling every clock cycle for 10 cycles, and check the output 'zero' each cycle.",
  "scenario 6": "Introduce noise on the inputs (if applicable) at clock cycle 6 and maintain it for 5 clock cycles. Monitor the output 'zero' continuously."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, zero = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, zero = %d", "scenario: 1b, zero = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns/1ps

module tb_top_module;

  // Output of DUT
  wire zero;

  // Instantiate the DUT
  top_module uut (
    .zero(zero)
  );

  // File handling
  integer file;
  
  initial begin
    // Open the output file
    file = $fopen("TBout.txt", "w");
    if (file == 0) begin
      $display("Error opening file TBout.txt");
      $finish;
    end

    // Scenario 1
    $display("Starting Scenario 1");
    #1; // Wait for 1 time unit
    $fdisplay(file, "scenario: 1, zero = %d", zero);
    
    // Scenario 2
    $display("Starting Scenario 2");
    #10; // Wait for 10 time units
    for (integer i = 0; i < 10; i++) begin
      #1; // Small delay to ensure stability
      $fdisplay(file, "scenario: 2, zero = %d", zero);
    end

    // Scenario 3 - Toggling inputs (not applicable in this DUT example)
    // For the purpose of this testbench, we assume no input signals are present.
    
    // Scenario 4 - Reset (not applicable in this DUT example)
    
    // Scenario 5 - High-frequency input (not applicable in this DUT example)
    
    // Scenario 6 - Noise on inputs (not applicable in this DUT example)
    
    // Close the file
    $fclose(file);
    $finish;
  end

endmodule
```

