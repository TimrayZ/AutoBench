############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module (
	input clk,
	input areset,
	input bump_left,
	input bump_right,
	input ground,
	output walk_left,
	output walk_right,
	output aaah
);

Your other information:
RTL circuit problem description:
The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. 
// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say "aaah!". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.
// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Apply areset to reset the DUT. Set areset to 1 at clock cycle 1 and then to 0 at clock cycle 2. Check the initial state to ensure the Lemming is in walk_left state.",
  
  "scenario 2": "After the reset, keep ground = 1 and incrementally apply bump_left = 1 at clock cycle 3, then set bump_left back to 0 at clock cycle 4. Observe the behavior of the walking direction.",
  
  "scenario 3": "At clock cycle 5, set bump_right = 1 while keeping ground = 1. Set bump_right back to 0 at clock cycle 6. Monitor the output signals for the direction change.",
  
  "scenario 4": "At clock cycle 7, set ground = 0 to simulate falling. Keep bump_left = 0 and bump_right = 0. Observe the aaah signal changes while the Lemming is falling.",
  
  "scenario 5": "At clock cycle 8, set ground back to 1 while keeping bump_left = 0 and bump_right = 0. Observe if the Lemming resumes walking in the previous direction before the fall.",
  
  "scenario 6": "Simulate receiving bumps while falling: Set ground = 0 at clock cycle 9, then bump_left = 1 at clock cycle 10, and bump_right = 1 at clock cycle 11. Set ground back to 1 at clock cycle 12. Observe the outputs.",
  
  "scenario 7": "Keep ground = 1, apply bump_left = 1 at clock cycle 13, then bump_right = 1 at clock cycle 14. Set both bumps back to 0 at clock cycle 15. Evaluate the behavior of the output signals.",
  
  "scenario 8": "Hold ground = 1 and apply the bumps simultaneously at clock cycle 16 (bump_left = 1, bump_right = 1). Then, reset both bumps to 0 at clock cycle 17. Observe how the Lemming reacts to both bumps."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  areset;
reg  bump_left;
reg  bump_right;
reg  ground;
wire  walk_left;
wire  walk_right;
wire  aaah;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.areset(areset),
	.bump_left(bump_left),
	.bump_right(bump_right),
	.ground(ground),
	.walk_left(walk_left),
	.walk_right(walk_right),
	.aaah(aaah)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, ground = %d, walk_left = %d, walk_right = %d, aaah = %d", scenario, clk, areset, bump_left, bump_right, ground, walk_left, walk_right, aaah);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, ground = %d, walk_left = %d, walk_right = %d, aaah = %d", scenario, clk, areset, bump_left, bump_right, ground, walk_left, walk_right, aaah);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  areset;
reg  bump_left;
reg  bump_right;
reg  ground;
wire  walk_left;
wire  walk_right;
wire  aaah;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.areset(areset),
	.bump_left(bump_left),
	.bump_right(bump_right),
	.ground(ground),
	.walk_left(walk_left),
	.walk_right(walk_right),
	.aaah(aaah)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // Scenario 1
    scenario = 1;
    areset = 1;
    #10;
    areset = 0;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, ground = %d, walk_left = %d, walk_right = %d, aaah = %d", scenario, clk, areset, bump_left, bump_right, ground, walk_left, walk_right, aaah);
        #10;
    end

    // Scenario 2
    scenario = 2;
    ground = 1;
    bump_left = 1;
    #10;
    bump_left = 0;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, ground = %d, walk_left = %d, walk_right = %d, aaah = %d", scenario, clk, areset, bump_left, bump_right, ground, walk_left, walk_right, aaah);
        #10;
    end

    // Scenario 3
    scenario = 3;
    bump_right = 1;
    #10;
    bump_right = 0;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, ground = %d, walk_left = %d, walk_right = %d, aaah = %d", scenario, clk, areset, bump_left, bump_right, ground, walk_left, walk_right, aaah);
        #10;
    end

    // Scenario 4
    scenario = 4;
    ground = 0;
    bump_left = 0;
    bump_right = 0;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, ground = %d, walk_left = %d, walk_right = %d, aaah = %d", scenario, clk, areset, bump_left, bump_right, ground, walk_left, walk_right, aaah);
        #10;
    end

    // Scenario 5
    scenario = 5;
    ground = 1;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, ground = %d, walk_left = %d, walk_right = %d, aaah = %d", scenario, clk, areset, bump_left, bump_right, ground, walk_left, walk_right, aaah);
        #10;
    end

    // Scenario 6
    scenario = 6;
    ground = 0;
    #10;
    bump_left = 1;
    #10;
    bump_right = 1;
    #10;
    ground = 1;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, ground = %d, walk_left = %d, walk_right = %d, aaah = %d", scenario, clk, areset, bump_left, bump_right, ground, walk_left, walk_right, aaah);
        #10;
    end

    // Scenario 7
    scenario = 7;
    ground = 1;
    bump_left = 1;
    #10;
    bump_right = 1;
    #10;
    bump_left = 0;
    bump_right = 0;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, ground = %d, walk_left = %d, walk_right = %d, aaah = %d", scenario, clk, areset, bump_left, bump_right, ground, walk_left, walk_right, aaah);
        #10;
    end

    // Scenario 8
    scenario = 8;
    bump_left = 1;
    bump_right = 1;
    #10;
    bump_left = 0;
    bump_right = 0;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, areset = %d, bump_left = %d, bump_right = %d, ground = %d, walk_left = %d, walk_right = %d, aaah = %d", scenario, clk, areset, bump_left, bump_right, ground, walk_left, walk_right, aaah);
        #10;
    end

    $fclose(file);
    $finish;
end

endmodule
```

