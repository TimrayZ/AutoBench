############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. 
// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say "aaah!". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.
// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT implements a Moore state machine for modeling the behavior of Lemmings in a 2D world.",
    "2. Inputs: clk (clock signal), areset (asynchronous reset), bump_left (indicates bump from the left), bump_right (indicates bump from the right), ground (indicates the presence of ground).",
    "3. Outputs: walk_left (indicates the Lemming is walking left), walk_right (indicates the Lemming is walking right), aaah (indicates the Lemming is falling).",
    "4. The initial state upon areset will be walk_left.",
    "5. When bump_left is 1, the Lemming will switch to walk_right state, and when bump_right is 1, it will switch to walk_left state.",
    "6. The direction will not change when ground=0 but will revert to the state before falling when ground=1.",
    "7. The transition logic must incorporate the priority of inputs and the current state effectively to account for the behavior as described."
  ]
}
DUT header:
module top_module (
	input clk,
	input areset,
	input bump_left,
	input bump_right,
	input ground,
	output walk_left,
	output walk_right,
	output aaah
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Apply areset to reset the DUT. Set areset to 1 at clock cycle 1 and then to 0 at clock cycle 2. Check the initial state to ensure the Lemming is in walk_left state.",
  
  "scenario 2": "After the reset, keep ground = 1 and incrementally apply bump_left = 1 at clock cycle 3, then set bump_left back to 0 at clock cycle 4. Observe the behavior of the walking direction.",
  
  "scenario 3": "At clock cycle 5, set bump_right = 1 while keeping ground = 1. Set bump_right back to 0 at clock cycle 6. Monitor the output signals for the direction change.",
  
  "scenario 4": "At clock cycle 7, set ground = 0 to simulate falling. Keep bump_left = 0 and bump_right = 0. Observe the aaah signal changes while the Lemming is falling.",
  
  "scenario 5": "At clock cycle 8, set ground back to 1 while keeping bump_left = 0 and bump_right = 0. Observe if the Lemming resumes walking in the previous direction before the fall.",
  
  "scenario 6": "Simulate receiving bumps while falling: Set ground = 0 at clock cycle 9, then bump_left = 1 at clock cycle 10, and bump_right = 1 at clock cycle 11. Set ground back to 1 at clock cycle 12. Observe the outputs.",
  
  "scenario 7": "Keep ground = 1, apply bump_left = 1 at clock cycle 13, then bump_right = 1 at clock cycle 14. Set both bumps back to 0 at clock cycle 15. Evaluate the behavior of the output signals.",
  
  "scenario 8": "Hold ground = 1 and apply the bumps simultaneously at clock cycle 16 (bump_left = 1, bump_right = 1). Then, reset both bumps to 0 at clock cycle 17. Observe how the Lemming reacts to both bumps."
}

