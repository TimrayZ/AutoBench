############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. 
// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say "aaah!". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.
// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.
RTL header:
module top_module (
	input clk,
	input areset,
	input bump_left,
	input bump_right,
	input ground,
	output walk_left,
	output walk_right,
	output aaah
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
    input clk,
    input areset,
    input bump_left,
    input bump_right,
    input ground,
    output reg walk_left,
    output reg walk_right,
    output reg aaah
);

// State encoding
typedef enum reg [1:0] {
    WALK_LEFT = 2'b00,
    WALK_RIGHT = 2'b01,
    FALLING = 2'b10
} state_t;

state_t current_state, next_state;

// Sequential block for state transitions
always @(posedge clk or posedge areset) begin
    if (areset) begin
        current_state <= WALK_LEFT; // Start with walking left
    end else begin
        current_state <= next_state;
    end
end

// Combinational block for next state logic and outputs
always @* begin
    // Default outputs
    walk_left = 0;
    walk_right = 0;
    aaah = 0;
    
    case (current_state)
        WALK_LEFT: begin
            walk_left = 1;
            aaah = 0; // Not falling
            if (!ground) begin
                next_state = FALLING; // Start falling
            end else if (bump_right) begin
                next_state = WALK_RIGHT; // Bumped on the right, switch to walking right
            end else if (bump_left) begin
                next_state = WALK_LEFT; // Bumped on the left, still walking left
            end else begin
                next_state = WALK_LEFT; // Continue walking left
            end
        end
        
        WALK_RIGHT: begin
            walk_right = 1;
            aaah = 0; // Not falling
            if (!ground) begin
                next_state = FALLING; // Start falling
            end else if (bump_left) begin
                next_state = WALK_LEFT; // Bumped on the left, switch to walking left
            end else if (bump_right) begin
                next_state = WALK_RIGHT; // Bumped on the right, still walking right
            end else begin
                next_state = WALK_RIGHT; // Continue walking right
            end
        end

        FALLING: begin
            aaah = 1; // Say "aaah!" while falling
            walk_left = 0;
            walk_right = 0;
            if (ground) begin
                // If ground reappears, continue in the same direction
                if (current_state == WALK_LEFT) begin
                    next_state = WALK_LEFT; // Resume walking left
                end else begin
                    next_state = WALK_RIGHT; // Resume walking right
                end
            end else begin
                next_state = FALLING; // Continue falling
            end
        end
        
        default: begin
            next_state = WALK_LEFT; // Default state
        end
    endcase
end

endmodule
```

