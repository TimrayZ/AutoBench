############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Implement the circuit described by the Karnaugh map below.

//        ab
// cd   00 01 11 10
//  00 | 0 | 1 | 0 | 1 |
//  01 | 1 | 0 | 1 | 0 |
//  11 | 0 | 1 | 0 | 1 |
//  10 | 1 | 0 | 1 | 0 |
RTL testbench specification:
{
  "important data": "Karnaugh map given leads to the Boolean expression: out = (b'cd') + (abc') + (ab'c) + (a'b d) + (ab'cd')",
  "technical specifications": [
    "1. DUT module name is 'top_module'.",
    "2. Inputs to the DUT: 'a', 'b', 'c', 'd' (all single-bit signals).",
    "3. Output from the DUT: 'out' (single-bit register).",
    "4. Expected truth table derived from the Karnaugh map for the given input combinations.",
    "5. The testbench must apply each combination of inputs (a, b, c, d) and verify the corresponding expected output.",
    "6. Testing should cover all combinations of inputs (total of 16 cases: 2^4).",
    "7. The expected output 'out' must be compared against the DUT's output for each input case.",
    "8. Report pass/fail status for each test case."
  ]
}
DUT header:
module top_module (
	input a, 
	input b,
	input c,
	input d,
	output reg out
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Apply inputs a=0, b=0, c=0, d=0. Wait for 1 clock cycle.",
  "scenario 2": "Apply inputs a=0, b=0, c=0, d=1. Wait for 1 clock cycle.",
  "scenario 3": "Apply inputs a=0, b=0, c=1, d=0. Wait for 1 clock cycle.",
  "scenario 4": "Apply inputs a=0, b=0, c=1, d=1. Wait for 1 clock cycle.",
  "scenario 5": "Apply inputs a=0, b=1, c=0, d=0. Wait for 1 clock cycle.",
  "scenario 6": "Apply inputs a=0, b=1, c=0, d=1. Wait for 1 clock cycle.",
  "scenario 7": "Apply inputs a=0, b=1, c=1, d=0. Wait for 1 clock cycle.",
  "scenario 8": "Apply inputs a=0, b=1, c=1, d=1. Wait for 1 clock cycle.",
  "scenario 9": "Apply inputs a=1, b=0, c=0, d=0. Wait for 1 clock cycle.",
  "scenario 10": "Apply inputs a=1, b=0, c=0, d=1. Wait for 1 clock cycle.",
  "scenario 11": "Apply inputs a=1, b=0, c=1, d=0. Wait for 1 clock cycle.",
  "scenario 12": "Apply inputs a=1, b=0, c=1, d=1. Wait for 1 clock cycle.",
  "scenario 13": "Apply inputs a=1, b=1, c=0, d=0. Wait for 1 clock cycle.",
  "scenario 14": "Apply inputs a=1, b=1, c=0, d=1. Wait for 1 clock cycle.",
  "scenario 15": "Apply inputs a=1, b=1, c=1, d=0. Wait for 1 clock cycle.",
  "scenario 16": "Apply inputs a=1, b=1, c=1, d=1. Wait for 1 clock cycle."
}

