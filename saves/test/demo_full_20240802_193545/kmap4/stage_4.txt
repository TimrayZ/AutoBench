############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, out = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input a, 
	input b,
	input c,
	input d,
	output reg out
);

Your other information:
RTL circuit problem description:
Implement the circuit described by the Karnaugh map below.

//        ab
// cd   00 01 11 10
//  00 | 0 | 1 | 0 | 1 |
//  01 | 1 | 0 | 1 | 0 |
//  11 | 0 | 1 | 0 | 1 |
//  10 | 1 | 0 | 1 | 0 |
RTL testbench specification:
{
  "important data": "Karnaugh map given leads to the Boolean expression: out = (b'cd') + (abc') + (ab'c) + (a'b d) + (ab'cd')",
  "technical specifications": [
    "1. DUT module name is 'top_module'.",
    "2. Inputs to the DUT: 'a', 'b', 'c', 'd' (all single-bit signals).",
    "3. Output from the DUT: 'out' (single-bit register).",
    "4. Expected truth table derived from the Karnaugh map for the given input combinations.",
    "5. The testbench must apply each combination of inputs (a, b, c, d) and verify the corresponding expected output.",
    "6. Testing should cover all combinations of inputs (total of 16 cases: 2^4).",
    "7. The expected output 'out' must be compared against the DUT's output for each input case.",
    "8. Report pass/fail status for each test case."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply inputs a=0, b=0, c=0, d=0. Wait for 1 clock cycle.",
  "scenario 2": "Apply inputs a=0, b=0, c=0, d=1. Wait for 1 clock cycle.",
  "scenario 3": "Apply inputs a=0, b=0, c=1, d=0. Wait for 1 clock cycle.",
  "scenario 4": "Apply inputs a=0, b=0, c=1, d=1. Wait for 1 clock cycle.",
  "scenario 5": "Apply inputs a=0, b=1, c=0, d=0. Wait for 1 clock cycle.",
  "scenario 6": "Apply inputs a=0, b=1, c=0, d=1. Wait for 1 clock cycle.",
  "scenario 7": "Apply inputs a=0, b=1, c=1, d=0. Wait for 1 clock cycle.",
  "scenario 8": "Apply inputs a=0, b=1, c=1, d=1. Wait for 1 clock cycle.",
  "scenario 9": "Apply inputs a=1, b=0, c=0, d=0. Wait for 1 clock cycle.",
  "scenario 10": "Apply inputs a=1, b=0, c=0, d=1. Wait for 1 clock cycle.",
  "scenario 11": "Apply inputs a=1, b=0, c=1, d=0. Wait for 1 clock cycle.",
  "scenario 12": "Apply inputs a=1, b=0, c=1, d=1. Wait for 1 clock cycle.",
  "scenario 13": "Apply inputs a=1, b=1, c=0, d=0. Wait for 1 clock cycle.",
  "scenario 14": "Apply inputs a=1, b=1, c=0, d=1. Wait for 1 clock cycle.",
  "scenario 15": "Apply inputs a=1, b=1, c=1, d=0. Wait for 1 clock cycle.",
  "scenario 16": "Apply inputs a=1, b=1, c=1, d=1. Wait for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, out = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;
  // Inputs
  reg a;
  reg b;
  reg c;
  reg d;
  
  // Output
  wire out;

  // Instantiate the DUT
  top_module DUT (
    .a(a),
    .b(b),
    .c(c),
    .d(d),
    .out(out)
  );

  // File descriptor for output
  integer fd;

  initial begin
    fd = $fopen("TBout.txt", "w");
    
    // Scenario 1
    a = 0; b = 0; c = 0; d = 0;
    #1; 
    $fdisplay(fd, "scenario: 1, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 2
    a = 0; b = 0; c = 0; d = 1;
    #1; 
    $fdisplay(fd, "scenario: 2, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 3
    a = 0; b = 0; c = 1; d = 0;
    #1; 
    $fdisplay(fd, "scenario: 3, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 4
    a = 0; b = 0; c = 1; d = 1;
    #1; 
    $fdisplay(fd, "scenario: 4, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 5
    a = 0; b = 1; c = 0; d = 0;
    #1; 
    $fdisplay(fd, "scenario: 5, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 6
    a = 0; b = 1; c = 0; d = 1;
    #1; 
    $fdisplay(fd, "scenario: 6, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 7
    a = 0; b = 1; c = 1; d = 0;
    #1; 
    $fdisplay(fd, "scenario: 7, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 8
    a = 0; b = 1; c = 1; d = 1;
    #1; 
    $fdisplay(fd, "scenario: 8, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 9
    a = 1; b = 0; c = 0; d = 0;
    #1; 
    $fdisplay(fd, "scenario: 9, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 10
    a = 1; b = 0; c = 0; d = 1;
    #1; 
    $fdisplay(fd, "scenario: 10, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 11
    a = 1; b = 0; c = 1; d = 0;
    #1; 
    $fdisplay(fd, "scenario: 11, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 12
    a = 1; b = 0; c = 1; d = 1;
    #1; 
    $fdisplay(fd, "scenario: 12, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 13
    a = 1; b = 1; c = 0; d = 0;
    #1; 
    $fdisplay(fd, "scenario: 13, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 14
    a = 1; b = 1; c = 0; d = 1;
    #1; 
    $fdisplay(fd, "scenario: 14, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 15
    a = 1; b = 1; c = 1; d = 0;
    #1; 
    $fdisplay(fd, "scenario: 15, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Scenario 16
    a = 1; b = 1; c = 1; d = 1;
    #1; 
    $fdisplay(fd, "scenario: 16, a = %d, b = %d, c = %d, d = %d, out = %d", a, b, c, d, out);
    
    // Close the file
    $fclose(fd);
    $finish;
  end
endmodule
```

