############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
We want to create a timer that:
// (1) is started when a particular pattern (1101) is detected,
// (2) shifts in 4 more bits to determine the duration to delay,
// (3) waits for the counters to finish counting, and
// (4) notifies the user and waits for the user to acknowledge the timer.
// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.
// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a finite-state machine that detects a specific pattern (1101) in incoming serial data.",
    "2. The DUT asserts the shift_ena output for exactly 4 clock cycles once the pattern 1101 is detected.",
    "3. After shifting, the DUT sets the counting output to indicate it is waiting for counters to finish counting.",
    "4. The DUT remains in a waiting state until the input done_counting signal goes high, indicating the counting is complete.",
    "5. Upon done_counting being high, the DUT asserts the done output to notify the user that the timer has timed out.",
    "6. The DUT then waits for the input ack signal to be high before resetting and searching for the next occurrence of the pattern 1101.",
    "7. The DUT includes an active high synchronous reset for initialization and resetting the state machine."
  ]
}
DUT header:
module top_module(
	input clk,
	input reset,
	input data,
    output reg shift_ena,
    output reg counting,
    input done_counting,
    output reg done,
    input ack );


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Reset the DUT by asserting reset signal high for 1 clock cycle, then deassert it to initialize the state machine.",
  "scenario 2": "Send a series of data bits: 0000, 0000, 0000, 1101 (pattern starts) to the DUT. This should span 4 clock cycles.",
  "scenario 3": "Continue sending data bits: 0000, 0000, 0 to ensure the DUT is monitoring for the pattern to reset its search.",
  "scenario 4": "Send 4 more bits indicating the delay duration after detecting 1101. The delay bits could be 0101, filling 4 clock cycles with valid data after the pattern.",
  "scenario 5": "After the delay bits, assert done_counting high for 1 clock cycle to indicate that counting is complete.",
  "scenario 6": "Send a high signal for ack after done_counting is asserted high, taking place 1 clock cycle later.",
  "scenario 7": "Following the ack signal, send additional sequences of data that do not include the pattern (i.e., 0000, 0000, 0000), testing the DUT's ability to ignore false positives.",
  "scenario 8": "Repeat the process by sending the pattern 1101 again after sufficient gap (e.g., 2 clock cycles of 0000 data), confirming the DUT resumes operation correctly.",
  "scenario 9": "Use reset again while the DUT is in the 'done' state to check proper state transition and ensure DUT can restart detection."
}

