############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
We want to create a timer that:
// (1) is started when a particular pattern (1101) is detected,
// (2) shifts in 4 more bits to determine the duration to delay,
// (3) waits for the counters to finish counting, and
// (4) notifies the user and waits for the user to acknowledge the timer.
// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.
// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.
RTL header:
module top_module(
	input clk,
	input reset,
	input data,
    output reg shift_ena,
    output reg counting,
    input done_counting,
    output reg done,
    input ack );

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module(
    input clk,
    input reset,
    input data,
    output reg shift_ena,
    output reg counting,
    input done_counting,
    output reg done,
    input ack
);

    // State encoding
    typedef enum logic [2:0] {
        IDLE        = 3'b000,
        DETECT      = 3'b001,
        SHIFT       = 3'b010,
        COUNTING    = 3'b011,
        NOTIFY      = 3'b100
    } state_t;

    state_t current_state, next_state;
    reg [2:0] shift_count;

    // State transition logic
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
            shift_ena <= 0;
            counting <= 0;
            done <= 0;
            shift_count <= 0;
        end else begin
            current_state <= next_state;
        end
    end

    // Next state logic
    always_comb begin
        next_state = current_state; // Default to hold state
        shift_ena = 0;
        counting = 0;
        done = 0;

        case (current_state)
            IDLE: begin
                // Looking for the pattern 1101
                if (data == 1) begin
                    // If data comes in as 1, transition to DETECT state
                    next_state = DETECT;
                end
            end
            
            DETECT: begin
                // Shift in bits to check for the pattern
                if (data == 1) begin
                    // Early ones
                end else if (data == 0) begin
                    // After 110 we expect a 1
                    next_state = (shift_count == 3) ? SHIFT : DETECT;
                end
            end
            
            SHIFT: begin
                // Assert shift_ena for 4 clock cycles
                shift_ena = 1;
                shift_count = shift_count + 1;

                if (shift_count == 4) begin
                    next_state = COUNTING;
                    shift_count = 0; // Reset for next use
                end
            end
            
            COUNTING: begin
                // Wait for done_counting signal
                counting = 1;
                if (done_counting) begin
                    next_state = NOTIFY;
                end
            end
            
            NOTIFY: begin
                // Notify the user (done signal)
                done = 1;
                if (ack) begin
                    // Return to IDLE state on acknowledgment
                    next_state = IDLE;
                end
            end
        endcase
    end

endmodule
```

