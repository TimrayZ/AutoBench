############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input reset,
	input data,
    output reg shift_ena,
    output reg counting,
    input done_counting,
    output reg done,
    input ack );

Your other information:
RTL circuit problem description:
We want to create a timer that:
// (1) is started when a particular pattern (1101) is detected,
// (2) shifts in 4 more bits to determine the duration to delay,
// (3) waits for the counters to finish counting, and
// (4) notifies the user and waits for the user to acknowledge the timer.
// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.
// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Reset the DUT by asserting reset signal high for 1 clock cycle, then deassert it to initialize the state machine.",
  "scenario 2": "Send a series of data bits: 0000, 0000, 0000, 1101 (pattern starts) to the DUT. This should span 4 clock cycles.",
  "scenario 3": "Continue sending data bits: 0000, 0000, 0 to ensure the DUT is monitoring for the pattern to reset its search.",
  "scenario 4": "Send 4 more bits indicating the delay duration after detecting 1101. The delay bits could be 0101, filling 4 clock cycles with valid data after the pattern.",
  "scenario 5": "After the delay bits, assert done_counting high for 1 clock cycle to indicate that counting is complete.",
  "scenario 6": "Send a high signal for ack after done_counting is asserted high, taking place 1 clock cycle later.",
  "scenario 7": "Following the ack signal, send additional sequences of data that do not include the pattern (i.e., 0000, 0000, 0000), testing the DUT's ability to ignore false positives.",
  "scenario 8": "Repeat the process by sending the pattern 1101 again after sufficient gap (e.g., 2 clock cycles of 0000 data), confirming the DUT resumes operation correctly.",
  "scenario 9": "Use reset again while the DUT is in the 'done' state to check proper state transition and ensure DUT can restart detection."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
reg  data;
wire  shift_ena;
wire  counting;
reg  done_counting;
wire  done;
reg  ack;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.data(data),
	.shift_ena(shift_ena),
	.counting(counting),
	.done_counting(done_counting),
	.done(done),
	.ack(ack)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, shift_ena = %d, counting = %d, done_counting = %d, done = %d, ack = %d", scenario, clk, reset, data, shift_ena, counting, done_counting, done, ack);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, shift_ena = %d, counting = %d, done_counting = %d, done = %d, ack = %d", scenario, clk, reset, data, shift_ena, counting, done_counting, done, ack);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
reg  data;
wire  shift_ena;
wire  counting;
reg  done_counting;
wire  done;
reg  ack;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.data(data),
	.shift_ena(shift_ena),
	.counting(counting),
	.done_counting(done_counting),
	.done(done),
	.ack(ack)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // Scenario 1: Reset the DUT
    scenario = 1;
    reset = 1; 
    #10;
    reset = 0;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, shift_ena = %d, counting = %d, done_counting = %d, done = %d, ack = %d", scenario, clk, reset, data, shift_ena, counting, done_counting, done, ack);
        #10;
    end

    // Scenario 2: Send data bits 0000, 0000, 0000, 1101
    scenario = 2;
    data = 0;
    repeat(3) begin
        repeat(4) begin
            $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, shift_ena = %d, counting = %d, done_counting = %d, done = %d, ack = %d", scenario, clk, reset, data, shift_ena, counting, done_counting, done, ack);
            #10;
        end
    end
    data = 1; #10; data = 1; #10; data = 0; #10; data = 1; #10;

    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, shift_ena = %d, counting = %d, done_counting = %d, done = %d, ack = %d", scenario, clk, reset, data, shift_ena, counting, done_counting, done, ack);
        #10;
    end

    // Scenario 3: Continue sending data bits: 0000, 0000, 0
    scenario = 3;
    data = 0;
    repeat(3) begin
        repeat(4) begin
            $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, shift_ena = %d, counting = %d, done_counting = %d, done = %d, ack = %d", scenario, clk, reset, data, shift_ena, counting, done_counting, done, ack);
            #10;
        end
    end

    // Scenario 4: Send delay bits 0101
    scenario = 4;
    data = 0; #10; data = 1; #10; data = 0; #10; data = 1; #10;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, shift_ena = %d, counting = %d, done_counting = %d, done = %d, ack = %d", scenario, clk, reset, data, shift_ena, counting, done_counting, done, ack);
        #10;
    end

    // Scenario 5: Assert done_counting signal
    scenario = 5;
    done_counting = 1; 
    #10; 
    done_counting = 0; 
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, shift_ena = %d, counting = %d, done_counting = %d, done = %d, ack = %d", scenario, clk, reset, data, shift_ena, counting, done_counting, done, ack);
        #10;
    end

    // Scenario 6: Send ack high
    scenario = 6;
    ack = 0; #10; ack = 1; #10;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, shift_ena = %d, counting = %d, done_counting = %d, done = %d, ack = %d", scenario, clk, reset, data, shift_ena, counting, done_counting, done, ack);
        #10;
    end

    // Scenario 7: Send additional data that do not include the pattern
    scenario = 7;
    data = 0;
    repeat(3) begin
        repeat(4) begin
            $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, shift_ena = %d, counting = %d, done_counting = %d, done = %d, ack = %d", scenario, clk, reset, data, shift_ena, counting, done_counting, done, ack);
            #10;
        end
    end

    // Scenario 8: Repeat process with pattern 1101 after gap
    scenario = 8;
    data = 0; #10; #10; 
    repeat(3) begin
        data = 0; repeat(4) begin
            $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, shift_ena = %d, counting = %d, done_counting = %d, done = %d, ack = %d", scenario, clk, reset, data, shift_ena, counting, done_counting, done, ack);
            #10;
        end
    end
    data = 1; #10; data = 1; #10; data = 0; #10; data = 1; #10;

    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, shift_ena = %d, counting = %d, done_counting = %d, done = %d, ack = %d", scenario, clk, reset, data, shift_ena, counting, done_counting, done, ack);
        #10;
    end

    // Scenario 9: Reset while in 'done' state
    scenario = 9;
    reset = 1; 
    #10;
    reset = 0;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, shift_ena = %d, counting = %d, done_counting = %d, done = %d, ack = %d", scenario, clk, reset, data, shift_ena, counting, done_counting, done, ack);
        #10;
    end

    $fclose(file);
    $finish;
end

endmodule
```

