############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input load,
	input [255:0] data,
	output reg [255:0] q);

Your other information:
RTL circuit problem description:
The "game" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:
// (1) 0-1 neighbour: Cell becomes 0.
// (2) 2 neighbours: Cell state does not change.
// (3) 3 neighbours: Cell becomes 1.
// (4) 4+ neighbours: Cell becomes 0.
// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. 
// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.
// (2) q: The 16x16 current state of the game, updated every clock cycle.
// The game state should advance by one timestep every clock cycle.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Apply a load signal high for one clock cycle with an initial configuration where all cells are dead (256'd0). Ensure that the output q remains unchanged after this initial load.",
  "scenario 2": "Load the grid with a checkerboard pattern (alternating 1's and 0's) by setting the load signal high for one clock cycle. Check q after one clock cycle for proper loading.",
  "scenario 3": "Load the grid with a row of live cells in the middle of the grid (e.g., rows 7 and 8 have live cells: q[119:112] and q[135:128] set to 16'd0). After one clock cycle, check q to observe if it updates based on the configuration.",
  "scenario 4": "Load the grid with a single live cell in the center (q[127] = 1, all others = 0), keeping the load signal high for one clock cycle. After the clock cycle, check q for expected transition.",
  "scenario 5": "Load a configuration where the corners are alive, affecting edge cells (cells at positions 0, 15, 240, 255 are alive). Set the load signal high for one clock cycle. Observe changes in q to validate the circuit's handling of edge cases.",
  "scenario 6": "Apply a load signal high with a configuration that has isolated cells (e.g., q[0] = 1, all others = 0). Verify q after one clock cycle to ensure it results in all dead cells.",
  "scenario 7": "Use a configuration where five adjacent cells in both the upper and lower rows are alive, effectively testing an edge condition with wrap-around neighbours. Load data and keep the load signal high for one clock cycle. Check q afterwards.",
  "scenario 8": "After applying a few different configurations and observing results, run the simulation for several clock cycles (e.g., 10 clock cycles) on the last loaded state without loading new data. Ensure the state advances as expected with each clock cycle.",
  "scenario 9": "Load a random configuration of live and dead cells, applying the load signal high for one clock cycle. Then, toggle the load signal low and verify how q transitions in the subsequent clock cycles without additional loading.",
  "scenario 10": "Test a full grid of live cells (256'd1) by loading it with the load signal set high. Observe the output state of q after one clock cycle for transitions, specifically towards edge cases of cell interactions."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  load;
reg [255:0] data;
wire [255:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.load(load),
	.data(data),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg clk;
reg load;
reg [255:0] data;
wire [255:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
    .clk(clk),
    .load(load),
    .data(data),
    .q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // Scenario 1
    scenario = 1;
    load = 1; 
    data = 256'd0; 
    #10; 
    load = 0; 
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
        #10;
    end

    // Scenario 2
    scenario = 2;
    load = 1; 
    data = 256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    #10; 
    load = 0;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
        #10;
    end
    
    // Scenario 3
    scenario = 3;
    load = 1;
    data = 256'b0000000000000000000000000000000000000000000000111100000000000000;
    #10; 
    load = 0; 
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
        #10;
    end

    // Scenario 4
    scenario = 4;
    load = 1;
    data = 256'b0000000000000000000000000000000000000000000000000000000100000000;
    #10; 
    load = 0; 
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
        #10;
    end

    // Scenario 5
    scenario = 5;
    load = 1;
    data = 256'b1000000000000000000000000000000000000000000000000000000000000001;
    #10; 
    load = 0; 
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
        #10;
    end

    // Scenario 6
    scenario = 6;
    load = 1;
    data = 256'b0000000000000000000000000000000000000000000000000000000000000001;
    #10; 
    load = 0; 
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
        #10;
    end

    // Scenario 7
    scenario = 7;
    load = 1; 
    data = 256'b0000000000000000000000000111110000000000000000000000000000000000;
    #10; 
    load = 0; 
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
        #10;
    end

    // Scenario 8
    scenario = 8;
    load = 0;
    repeat(10) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
        #10;
    end

    // Scenario 9
    scenario = 9;
    load = 1; 
    data = 256'b1001100010010110100101001111100010001100001010001110010110101011;
    #10; 
    load = 0; 
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
        #10;
    end

    // Scenario 10
    scenario = 10;
    load = 1; 
    data = 256'd1;
    #10; 
    load = 0; 
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, data = %d, q = %d", scenario, clk, load, data, q);
        #10;
    end

    $fclose(file);
    $finish;
end

endmodule
```

