############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.


RTL header:
module top_module (
	input a,
	input b,
	input c,
	input d,
	output out_sop,
	output out_pos
);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module (
    input a,
    input b,
    input c,
    input d,
    output out_sop,
    output out_pos
);

    // Sum of Products (SOP) implementation for 2, 7, and 15
    assign out_sop = (a & ~b & ~c & d) | (a & b & c & d) | (~a & b & c & d);

    // Product of Sums (POS) implementation for NOT 0, 1, 4, 5, 6, 9, 10, 13, and 14
    assign out_pos = (~(a | ~b | ~c | ~d)) & (~(a | ~b | c | d)) & (~(a | b | ~c | d)) 
                    & (~(a | b | c | ~d)) & (~(a | ~b | c | ~d)) & (~(a | b | ~c | ~d));

endmodule
```

