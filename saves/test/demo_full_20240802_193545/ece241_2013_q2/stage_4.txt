############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input a,
	input b,
	input c,
	input d,
	output out_sop,
	output out_pos
);

Your other information:
RTL circuit problem description:
A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.


RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT has four input signals: a, b, c, d and two output signals: out_sop and out_pos.",
    "2. The output out_sop should produce a logic-1 when the input values correspond to the decimal values 2, 7, or 15, and a logic-0 for the inputs corresponding to 0, 1, 4, 5, 6, 9, 10, 13, or 14.",
    "3. The output out_pos should produce a logic-1 for the inputs that represent the conditions in product-of-sums form.",
    "4. The input combinations for 3, 8, 11, and 12 are never present in this system and should not be considered.",
    "5. The valid combinations for the inputs corresponding to the output out_sop are: 0010 (2), 0111 (7), 1111 (15).",
    "6. The valid combinations for the inputs corresponding to the output out_pos must be determined based on the conditions specified."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set inputs to a=0, b=0, c=1, d=0 (binary 0010) at clock cycle 0.",
  "scenario 2": "Set inputs to a=0, b=1, c=1, d=1 (binary 0111) at clock cycle 1.",
  "scenario 3": "Set inputs to a=1, b=1, c=1, d=1 (binary 1111) at clock cycle 2.",
  "scenario 4": "Set inputs to a=0, b=0, c=0, d=0 (binary 0000) at clock cycle 3.",
  "scenario 5": "Set inputs to a=0, b=0, c=1, d=1 (binary 0011) at clock cycle 4.",
  "scenario 6": "Set inputs to a=0, b=1, c=0, d=0 (binary 0100) at clock cycle 5.",
  "scenario 7": "Set inputs to a=0, b=1, c=0, d=1 (binary 0101) at clock cycle 6.",
  "scenario 8": "Set inputs to a=0, b=1, c=1, d=0 (binary 0110) at clock cycle 7.",
  "scenario 9": "Set inputs to a=1, b=0, c=0, d=0 (binary 1000) at clock cycle 8.",
  "scenario 10": "Set inputs to a=1, b=0, c=1, d=1 (binary 1011) at clock cycle 9.",
  "scenario 11": "Set inputs to a=1, b=1, c=0, d=1 (binary 1101) at clock cycle 10.",
  "scenario 12": "Set inputs to a=1, b=1, c=1, d=0 (binary 1110) at clock cycle 11."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

// Inputs
reg a;
reg b;
reg c;
reg d;

// Outputs
wire out_sop;
wire out_pos;

// Instantiate the DUT
top_module DUT (
    .a(a),
    .b(b),
    .c(c),
    .d(d),
    .out_sop(out_sop),
    .out_pos(out_pos)
);

// File handling
integer file;

initial begin
    // Open the output file
    file = $fopen("TBout.txt", "w");
    
    // Scenario 1
    a = 0; b = 0; c = 1; d = 0; #10;
    $fdisplay(file, "scenario: 1, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", a, b, c, d, out_sop, out_pos);
    
    // Scenario 2
    a = 0; b = 1; c = 1; d = 1; #10;
    $fdisplay(file, "scenario: 2, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", a, b, c, d, out_sop, out_pos);
    
    // Scenario 3
    a = 1; b = 1; c = 1; d = 1; #10;
    $fdisplay(file, "scenario: 3, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", a, b, c, d, out_sop, out_pos);
    
    // Scenario 4
    a = 0; b = 0; c = 0; d = 0; #10;
    $fdisplay(file, "scenario: 4, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", a, b, c, d, out_sop, out_pos);
    
    // Scenario 5
    a = 0; b = 0; c = 1; d = 1; #10;
    $fdisplay(file, "scenario: 5, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", a, b, c, d, out_sop, out_pos);
    
    // Scenario 6
    a = 0; b = 1; c = 0; d = 0; #10;
    $fdisplay(file, "scenario: 6, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", a, b, c, d, out_sop, out_pos);
    
    // Scenario 7
    a = 0; b = 1; c = 0; d = 1; #10;
    $fdisplay(file, "scenario: 7, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", a, b, c, d, out_sop, out_pos);
    
    // Scenario 8
    a = 0; b = 1; c = 1; d = 0; #10;
    $fdisplay(file, "scenario: 8, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", a, b, c, d, out_sop, out_pos);
    
    // Scenario 9
    a = 1; b = 0; c = 0; d = 0; #10;
    $fdisplay(file, "scenario: 9, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", a, b, c, d, out_sop, out_pos);
    
    // Scenario 10
    a = 1; b = 0; c = 1; d = 1; #10;
    $fdisplay(file, "scenario: 10, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", a, b, c, d, out_sop, out_pos);
    
    // Scenario 11
    a = 1; b = 1; c = 0; d = 1; #10;
    $fdisplay(file, "scenario: 11, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", a, b, c, d, out_sop, out_pos);
    
    // Scenario 12
    a = 1; b = 1; c = 1; d = 0; #10;
    $fdisplay(file, "scenario: 12, a = %d, b = %d, c = %d, d = %d, out_sop = %d, out_pos = %d", a, b, c, d, out_sop, out_pos);
    
    // Close the output file
    $fclose(file);
    
    // End simulation
    $finish;
end

endmodule
```

