############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.


RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT has four input signals: a, b, c, d and two output signals: out_sop and out_pos.",
    "2. The output out_sop should produce a logic-1 when the input values correspond to the decimal values 2, 7, or 15, and a logic-0 for the inputs corresponding to 0, 1, 4, 5, 6, 9, 10, 13, or 14.",
    "3. The output out_pos should produce a logic-1 for the inputs that represent the conditions in product-of-sums form.",
    "4. The input combinations for 3, 8, 11, and 12 are never present in this system and should not be considered.",
    "5. The valid combinations for the inputs corresponding to the output out_sop are: 0010 (2), 0111 (7), 1111 (15).",
    "6. The valid combinations for the inputs corresponding to the output out_pos must be determined based on the conditions specified."
  ]
}
DUT header:
module top_module (
	input a,
	input b,
	input c,
	input d,
	output out_sop,
	output out_pos
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Set inputs to a=0, b=0, c=1, d=0 (binary 0010) at clock cycle 0.",
  "scenario 2": "Set inputs to a=0, b=1, c=1, d=1 (binary 0111) at clock cycle 1.",
  "scenario 3": "Set inputs to a=1, b=1, c=1, d=1 (binary 1111) at clock cycle 2.",
  "scenario 4": "Set inputs to a=0, b=0, c=0, d=0 (binary 0000) at clock cycle 3.",
  "scenario 5": "Set inputs to a=0, b=0, c=1, d=1 (binary 0011) at clock cycle 4.",
  "scenario 6": "Set inputs to a=0, b=1, c=0, d=0 (binary 0100) at clock cycle 5.",
  "scenario 7": "Set inputs to a=0, b=1, c=0, d=1 (binary 0101) at clock cycle 6.",
  "scenario 8": "Set inputs to a=0, b=1, c=1, d=0 (binary 0110) at clock cycle 7.",
  "scenario 9": "Set inputs to a=1, b=0, c=0, d=0 (binary 1000) at clock cycle 8.",
  "scenario 10": "Set inputs to a=1, b=0, c=1, d=1 (binary 1011) at clock cycle 9.",
  "scenario 11": "Set inputs to a=1, b=1, c=0, d=1 (binary 1101) at clock cycle 10.",
  "scenario 12": "Set inputs to a=1, b=1, c=1, d=0 (binary 1110) at clock cycle 11."
}

