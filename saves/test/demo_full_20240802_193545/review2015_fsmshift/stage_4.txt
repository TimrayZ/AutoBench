############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input reset,
	output shift_ena);

Your other information:
RTL circuit problem description:
This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Assert reset high at clock cycle 0. Wait for 4 clock cycles while observing the shift_ena output. Release reset at clock cycle 4.",
  "scenario 2": "Verify behavior when reset is asserted again after the initial 4 cycles. Assert reset high at clock cycle 10 and release at clock cycle 14. Observe shift_ena during this period.",
  "scenario 3": "Perform a reset in the middle of the 4-cycle period. Assert reset high at clock cycle 6 and release at clock cycle 10. Observe shift_ena output from clock cycles 6 to 14.",
  "scenario 4": "Check the behavior when reset is asserted consecutively with a short delay. Assert reset high at clock cycle 18 and release at clock cycle 20. Note the shift_ena output between clock cycles 18 and 24.",
  "scenario 5": "Test the reset functionality by asserting reset, keeping it active for multiple clock cycles. Assert reset high at clock cycle 25 and hold it until clock cycle 30. Release reset at clock cycle 30 and observe shift_ena output for the next 4 clock cycles."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
wire  shift_ena;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.shift_ena(shift_ena)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, shift_ena = %d", scenario, clk, reset, shift_ena);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, shift_ena = %d", scenario, clk, reset, shift_ena);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
wire  shift_ena;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.shift_ena(shift_ena)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // Scenario 1
    scenario = 1;
    reset = 1; // Assert reset high
    #10; 
    repeat(4) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, shift_ena = %d", scenario, clk, reset, shift_ena);
        #10; 
    end
    reset = 0; // Release reset
    #10;

    // Scenario 2
    scenario = 2;
    reset = 1; // Assert reset high
    #10; 
    repeat(4) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, shift_ena = %d", scenario, clk, reset, shift_ena);
        #10; 
    end
    reset = 0; // Release reset
    #10;

    // Scenario 3
    scenario = 3;
    #10; 
    reset = 1; // Assert reset high
    #10; 
    repeat(4) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, shift_ena = %d", scenario, clk, reset, shift_ena);
        #10; 
    end
    reset = 0; // Release reset
    #10;

    // Scenario 4
    scenario = 4;
    reset = 1; // Assert reset high
    #10; 
    reset = 0; // Release reset
    #10;

    // Observe for 6 cycles
    repeat(6) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, shift_ena = %d", scenario, clk, reset, shift_ena);
        #10; 
    end

    // Scenario 5
    scenario = 5;
    reset = 1; // Assert reset high
    #10; 
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, shift_ena = %d", scenario, clk, reset, shift_ena);
        #10; 
    end
    reset = 0; // Release reset
    #10;

    repeat(4) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, shift_ena = %d", scenario, clk, reset, shift_ena);
        #10; 
    end

    $fclose(file);
    $finish;
end

endmodule
```

