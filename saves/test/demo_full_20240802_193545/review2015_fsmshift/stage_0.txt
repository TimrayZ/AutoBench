############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.
RTL header:
module top_module(
	input clk,
	input reset,
	output shift_ena);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module(
    input clk,
    input reset,
    output reg shift_ena
);
    reg [1:0] count;

    always @(posedge clk) begin
        if (reset) begin
            shift_ena <= 1'b1;      // Enable shift for the first cycle
            count <= 2'd1;          // Start counting
        end else if (count < 2'd4) begin
            count <= count + 1'b1;  // Increment count up to 4 cycles
            shift_ena <= 1'b1;      // Maintain shift enable
        end else begin
            shift_ena <= 1'b0;      // Disable shift after 4 cycles
        end
    end
endmodule
```

