############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. You are in the first stage. In this stage, please summarize the technical details of the DUT and give me a technical specification of the testbench generation task, so we can use it to design its corresponding testbench.
3. The core of testbench is the testcases. It usually include two parts logically: the input signals to the DUT and the expected result signals from DUT. The testbench will send the input signals to DUT and check if the result signals are the same as the expected result signals. If they are the same, this means the DUT is passed. Otherwise the DUT fails.
4. Your technical specification should include these sections:
- section 1: specification of the DUT, including the module header of the RTL code. If table or other detailed data is provided in the original problem description, DO repeat them in your response. They are very important!!!
5. your response should be in the form of JSON.
6. below is the information including the problem description and the DUT header:
RTL circuit problem description:
This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.
DUT header:
module top_module(
	input clk,
	input reset,
	output shift_ena);

your response must be in JSON form. example:
{
  "important data": "...", # type: string. If no table, state transition or other direct data, leave this with ""
  "technical specifications": ["...", "...", ...] # each element of the list is one specification string, the starting of the string is its index 
}



########## assistant ##########
{
  "important data": "The module is part of a finite state machine (FSM) controlling a shift register, specifically designed to enable the shift register for exactly 4 clock cycles upon detection of a proper bit pattern. The shift_enable (shift_ena) signal should be asserted for 4 cycles following a reset and should remain low thereafter until another reset occurs. Reset is active high and synchronous.",
  "technical specifications": [
    "1. The DUT's module header is: module top_module(input clk, input reset, output shift_ena);",
    "2. The shift_ena output must be high for exactly 4 clock cycles when the reset signal is asserted.",
    "3. The reset signal (reset) is active high and synchronous, meaning that the output behavior depends on the clk and the reset inputs.",
    "4. After 4 cycles of asserting shift_ena during reset, the output should remain low until the reset signal is asserted again.",
    "5. The testbench must verify that for multiple assertions of reset, shift_ena behaves consistently: it should go high for 4 cycles and then low indefinitely."
  ]
}

