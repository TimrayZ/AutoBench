############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d", "scenario: 1b, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	input [2:0] vec, 
	output [2:0] outv,
	output o2,
	output o1,
	output o0
);

Your other information:
RTL circuit problem description:
Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT (Device Under Test) is a circuit that accepts a 3-bit input vector (input 'vec') and produces a 3-bit output vector (output 'outv').",
    "2. The DUT splits the 3-bit input into three individual 1-bit output signals: 'o2', 'o1', and 'o0'.",
    "3. Output 'o2' corresponds to position 0 of the input vector, output 'o1' corresponds to position 1, and output 'o0' corresponds to position 2.",
    "4. The module header of the DUT is as follows: 'module top_module(input [2:0] vec, output [2:0] outv, output o2, output o1, output o0);'",
    "5. Test cases will need to validate the proper mapping from 'vec' to 'outv' and the individual outputs 'o2', 'o1', and 'o0'."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply the input vector '000' to 'vec' and wait for 1 clock cycle.",
  "scenario 2": "Apply the input vector '001' to 'vec' and wait for 1 clock cycle.",
  "scenario 3": "Apply the input vector '010' to 'vec' and wait for 1 clock cycle.",
  "scenario 4": "Apply the input vector '011' to 'vec' and wait for 1 clock cycle.",
  "scenario 5": "Apply the input vector '100' to 'vec' and wait for 1 clock cycle.",
  "scenario 6": "Apply the input vector '101' to 'vec' and wait for 1 clock cycle.",
  "scenario 7": "Apply the input vector '110' to 'vec' and wait for 1 clock cycle.",
  "scenario 8": "Apply the input vector '111' to 'vec' and wait for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d", "scenario: 1b, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    reg [2:0] vec;
    wire [2:0] outv;
    wire o2, o1, o0;

    // Instantiate the DUT
    top_module DUT (
        .vec(vec),
        .outv(outv),
        .o2(o2),
        .o1(o1),
        .o0(o0)
    );

    integer file;

    initial begin
        // Open the output file
        file = $fopen("TBout.txt", "w");
        
        // Scenario 1: Apply input vector '000'
        vec = 3'b000;
        #1; // Wait for a clock cycle
        $fdisplay(file, "scenario: 1, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d", vec, outv, o2, o1, o0);

        // Scenario 2: Apply input vector '001'
        vec = 3'b001;
        #1; // Wait for a clock cycle
        $fdisplay(file, "scenario: 2, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d", vec, outv, o2, o1, o0);

        // Scenario 3: Apply input vector '010'
        vec = 3'b010;
        #1; // Wait for a clock cycle
        $fdisplay(file, "scenario: 3, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d", vec, outv, o2, o1, o0);

        // Scenario 4: Apply input vector '011'
        vec = 3'b011;
        #1; // Wait for a clock cycle
        $fdisplay(file, "scenario: 4, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d", vec, outv, o2, o1, o0);

        // Scenario 5: Apply input vector '100'
        vec = 3'b100;
        #1; // Wait for a clock cycle
        $fdisplay(file, "scenario: 5, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d", vec, outv, o2, o1, o0);

        // Scenario 6: Apply input vector '101'
        vec = 3'b101;
        #1; // Wait for a clock cycle
        $fdisplay(file, "scenario: 6, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d", vec, outv, o2, o1, o0);

        // Scenario 7: Apply input vector '110'
        vec = 3'b110;
        #1; // Wait for a clock cycle
        $fdisplay(file, "scenario: 7, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d", vec, outv, o2, o1, o0);

        // Scenario 8: Apply input vector '111'
        vec = 3'b111;
        #1; // Wait for a clock cycle
        $fdisplay(file, "scenario: 8, vec = %d, outv = %d, o2 = %d, o1 = %d, o0 = %d", vec, outv, o2, o1, o0);

        // Close the output file
        $fclose(file);
        
        // End simulation
        $finish;
    end

endmodule
```

