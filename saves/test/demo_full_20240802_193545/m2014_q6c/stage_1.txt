############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. You are in the first stage. In this stage, please summarize the technical details of the DUT and give me a technical specification of the testbench generation task, so we can use it to design its corresponding testbench.
3. The core of testbench is the testcases. It usually include two parts logically: the input signals to the DUT and the expected result signals from DUT. The testbench will send the input signals to DUT and check if the result signals are the same as the expected result signals. If they are the same, this means the DUT is passed. Otherwise the DUT fails.
4. Your technical specification should include these sections:
- section 1: specification of the DUT, including the module header of the RTL code. If table or other detailed data is provided in the original problem description, DO repeat them in your response. They are very important!!!
5. your response should be in the form of JSON.
6. below is the information including the problem description and the DUT header:
RTL circuit problem description:
Consider the state machine shown below:

// A (0) --0--> B
// A (0) --1--> A
// B (0) --0--> C
// B (0) --1--> D
// C (0) --0--> E
// C (0) --1--> D
// D (0) --0--> F
// D (0) --1--> A
// E (1) --0--> E
// E (1) --1--> D
// F (1) --0--> C
// F (1) --1--> D

// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.

// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. 
DUT header:
module top_module (
	input [6:1] y,
	input w,
	output Y2,
	output Y4
);

your response must be in JSON form. example:
{
  "important data": "...", # type: string. If no table, state transition or other direct data, leave this with ""
  "technical specifications": ["...", "...", ...] # each element of the list is one specification string, the starting of the string is its index 
}



########## assistant ##########
{
  "important data": "State Transition Table:\n  - A (0) --0--> B \n  - A (0) --1--> A \n  - B (0) --0--> C \n  - B (0) --1--> D \n  - C (0) --0--> E \n  - C (0) --1--> D \n  - D (0) --0--> F \n  - D (0) --1--> A \n  - E (1) --0--> E \n  - E (1) --1--> D \n  - F (1) --0--> C \n  - F (1) --1--> D \n\nState Assignments: y[6:1] = 000001 (A), 000010 (B), 000100 (C), 001000 (D), 010000 (E), 100000 (F)",
  "technical specifications": [
    "0. Module Header: module top_module (input [6:1] y, input w, output Y2, output Y4)",
    "1. DUT function: The DUT should compute next-state signals Y2 and Y4 derived from the state transitions based on input signals y (current state) and w (input signal).",
    "2. Reset condition: The DUT should reset to state A (000001) upon initialization.",
    "3. Input conditions: The set of input conditions includes the one-hot encoded states and the input signal w (0 or 1).",
    "4. Expected output specifications: The DUT's output Y2 and Y4 must correspond to the next-state logic for their specific conditions derived from the given state transition table.",
    "5. Testbench requirements: The testbench should instantiate the DUT, apply various input combinations based on the defined state transitions and input signal w, and check if the outputs Y2 and Y4 match the expected results."
  ]
}

