############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input load,
	input [1:0] ena,
	input [99:0] data,
	output reg [99:0] q);

Your other information:
RTL circuit problem description:
Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. 
// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.
// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: 
//     (a) 2'b01 rotates right by one bit, 
//     (b) 2'b10 rotates left by one bit, 
//     (c) 2'b00 and 2'b11 do not rotate. 
// (3) q: The contents of the rotator.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "At time 0, assert load = 1 and provide data = 100'b101010101000000111110000000011110000111100001111000011110000111111000000000111111111000000000111111111; at time 1, deassert load = 0. Wait for 1 clock cycle.",
  
  "scenario 2": "At time 2, set ena = 2'b10 (left rotation) for 1 clock cycle. Then, at time 3, set ena = 2'b00 (no operation). Wait for 1 clock cycle.",
  
  "scenario 3": "At time 4, set ena = 2'b01 (right rotation) for 1 clock cycle. Then, at time 5, set ena = 2'b11 (no operation). Wait for 1 clock cycle.",
  
  "scenario 4": "At time 6, assert load = 1 again with data = 100'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001; at time 7, deassert load = 0. Wait for 1 clock cycle.",
  
  "scenario 5": "At time 8, set ena = 2'b10 (left rotation) for 1 clock cycle. Then after that at time 9, set ena = 2'b01 (right rotation) for 1 clock cycle. At time 10, revert ena back to 2'b00 (no operation). Wait for another clock cycle."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  load;
reg [1:0] ena;
reg [99:0] data;
wire [99:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.load(load),
	.ena(ena),
	.data(data),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, load, ena, data, q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, load, ena, data, q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  load;
reg [1:0] ena;
reg [99:0] data;
wire [99:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.load(load),
	.ena(ena),
	.data(data),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    load = 1;
    data = 100'b101010101000000111110000000011110000111100001111000011110000111111000000000111111111000000000111111111;
    repeat(1) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, load, ena, data, q);
    end
    load = 0;
    repeat(1) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, load, ena, data, q);
    end

    // scenario 2
    scenario = 2;
    ena = 2'b10; // left rotation
    repeat(1) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, load, ena, data, q);
    end
    ena = 2'b00; // no operation
    repeat(1) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, load, ena, data, q);
    end

    // scenario 3
    scenario = 3;
    ena = 2'b01; // right rotation
    repeat(1) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, load, ena, data, q);
    end
    ena = 2'b11; // no operation
    repeat(1) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, load, ena, data, q);
    end

    // scenario 4
    scenario = 4;
    load = 1;
    data = 100'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001;
    repeat(1) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, load, ena, data, q);
    end
    load = 0;
    repeat(1) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, load, ena, data, q);
    end

    // scenario 5
    scenario = 5;
    ena = 2'b10; // left rotation
    repeat(1) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, load, ena, data, q);
    end
    ena = 2'b01; // right rotation
    repeat(1) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, load, ena, data, q);
    end
    ena = 2'b00; // no operation
    repeat(1) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, load = %d, ena = %d, data = %d, q = %d", scenario, clk, load, ena, data, q);
    end

    $fclose(file);
    $finish;
end

endmodule
```

