############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. 
// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.
// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: 
//     (a) 2'b01 rotates right by one bit, 
//     (b) 2'b10 rotates left by one bit, 
//     (c) 2'b00 and 2'b11 do not rotate. 
// (3) q: The contents of the rotator.
RTL header:
module top_module(
	input clk,
	input load,
	input [1:0] ena,
	input [99:0] data,
	output reg [99:0] q);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module(
    input clk,
    input load,
    input [1:0] ena,
    input [99:0] data,
    output reg [99:0] q
);

always @(posedge clk) begin
    if (load) begin
        q <= data; // Load data into the register
    end else begin
        case (ena)
            2'b01: begin
                // Rotate right by one bit
                q <= {q[0], q[99:1]};
            end
            2'b10: begin
                // Rotate left by one bit
                q <= {q[98:0], q[99]};
            end
            2'b00: begin
                // Do not rotate (no operation)
                q <= q;
            end
            2'b11: begin
                // Do not rotate (no operation)
                q <= q;
            end
        endcase
    end
end

endmodule
```

