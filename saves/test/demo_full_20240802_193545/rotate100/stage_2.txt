############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. 
// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.
// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: 
//     (a) 2'b01 rotates right by one bit, 
//     (b) 2'b10 rotates left by one bit, 
//     (c) 2'b00 and 2'b11 do not rotate. 
// (3) q: The contents of the rotator.
RTL testbench specification:
{
  "important data": "(1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high. (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: (a) 2'b01 rotates right by one bit, (b) 2'b10 rotates left by one bit, (c) 2'b00 and 2'b11 do not rotate. (3) q: The contents of the rotator.",
  "technical specifications": [
    "1. DUT Specification: The module 'top_module' performs a 100-bit left/right rotation based on the input signals.",
    "2. Input Signals: clk (clock), load (active high), ena (2-bit enable signal), data (100-bit input data).",
    "3. Output Signal: q (100-bit output which holds the contents of the rotator).",
    "4. Functionality: When load is high, data is loaded into q. When ena is '01', q rotates right by one bit, when ena is '10', q rotates left by one bit, and when ena is '00' or '11', it does not rotate.",
    "5. Test cases: The testbench should include test cases to validate loading data, left rotation, right rotation, and ensure no operation occurs for ena values of '00' and '11'."
  ]
}
DUT header:
module top_module(
	input clk,
	input load,
	input [1:0] ena,
	input [99:0] data,
	output reg [99:0] q);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "At time 0, assert load = 1 and provide data = 100'b101010101000000111110000000011110000111100001111000011110000111111000000000111111111000000000111111111; at time 1, deassert load = 0. Wait for 1 clock cycle.",
  
  "scenario 2": "At time 2, set ena = 2'b10 (left rotation) for 1 clock cycle. Then, at time 3, set ena = 2'b00 (no operation). Wait for 1 clock cycle.",
  
  "scenario 3": "At time 4, set ena = 2'b01 (right rotation) for 1 clock cycle. Then, at time 5, set ena = 2'b11 (no operation). Wait for 1 clock cycle.",
  
  "scenario 4": "At time 6, assert load = 1 again with data = 100'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001; at time 7, deassert load = 0. Wait for 1 clock cycle.",
  
  "scenario 5": "At time 8, set ena = 2'b10 (left rotation) for 1 clock cycle. Then after that at time 9, set ena = 2'b01 (right rotation) for 1 clock cycle. At time 10, revert ena back to 2'b00 (no operation). Wait for another clock cycle."
}

