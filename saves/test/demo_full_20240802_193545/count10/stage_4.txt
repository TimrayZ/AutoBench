############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input reset,
	output reg [3:0] q);

Your other information:
RTL circuit problem description:
Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Initialize the clock signal 'clk' to 0 and the reset signal 'reset' to 0. After 5 clock cycles, set 'reset' to 1 for one clock cycle, then set 'reset' back to 0. This scenario tests the initial state and the behavior of the counter during the reset operation.",
  "scenario 2": "Set 'reset' to 0 and apply a clock signal with rising edges. Observe the behavior of 'q' as it increments from 0 to 9 over 10 clock cycles. This scenario checks the counting functionality of the DUT.",
  "scenario 3": "After counting to 9, maintain 'reset' as 0 and apply one more clock cycle. Then, at the next clock rising edge, set 'reset' to 1 for one clock cycle. This checks if 'q' resets to 0 when 'reset' is activated at the next clock edge after counting to 9.",
  "scenario 4": "After testing the reset functionality, set 'reset' to 0. Then, apply clock cycles to observe if 'q' correctly increments from 0 again after a reset without encountering any unexpected states. This reinforces the sequential nature of the counting.",
  "scenario 5": "Apply clock cycles continuously while toggling 'reset' high for one clock cycle every 5 cycles. This scenario tests the DUT's resilience to multiple resets during the counting process.",
  "scenario 6": "Hold 'reset' low and drive 'clk' high for several clock cycles (20 cycles), then set 'reset' high for one clock cycle and observe the reset behavior. This scenario verifies the DUT's response to an active reset during and after an extended period of normal operation."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
wire [3:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
wire [3:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end

// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    clk = 0; reset = 0;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
        #10;
    end
    reset = 1; // activate reset
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    #10; 
    reset = 0; // deactivate reset
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    #10;

    // scenario 2
    scenario = 2;
    reset = 0;
    repeat(10) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
        #10;
    end

    // scenario 3
    scenario = 3;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
        #10;
    end
    reset = 1; // activate reset
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    #10; 
    reset = 0; // deactivate reset
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    #10;

    // scenario 4
    scenario = 4;
    reset = 0;
    repeat(10) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
        #10;
    end

    // scenario 5
    scenario = 5;
    reset = 0;
    repeat(10) begin
        if (clk == 1) begin
            reset = 1; // activate reset every 5 clock cycles
            $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
            #10;
            reset = 0; 
        end
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
        #10;
    end

    // scenario 6
    scenario = 6;
    reset = 0;
    repeat(20) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
        #10;
    end
    reset = 1; // activate reset
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    #10; 
    reset = 0; // deactivate reset
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, q = %d", scenario, clk, reset, q);
    #10;

    $fclose(file);
    $finish;
end

endmodule
```

