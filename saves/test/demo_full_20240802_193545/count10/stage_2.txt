############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.
RTL testbench specification:
{
  "important data": "The decade counter should count from 0 through 9 and reset to 0 on the active high reset signal. The count should increment on the rising edge of the clock signal. This indicates the behaviour of the DUT in response to the clock and reset inputs, which is critical for the testbench design.",
  "technical specifications": [
    "1. The DUT module header is 'module top_module(input clk, input reset, output reg [3:0] q);'.",
    "2. The DUT has two inputs: 'clk' (clock signal) and 'reset' (active high synchronous reset signal).",
    "3. The DUT has one output: 'q' (4-bit register representing the current count value).",
    "4. The DUT should count from 0 to 9, then reset back to 0 when the count reaches 10.",
    "5. The DUT should implement synchronous reset functionality; when 'reset' is high at the rising edge of 'clk', 'q' should be set to 0.",
    "6. The counter increments on each rising edge of 'clk' if 'reset' is low."
  ]
}
DUT header:
module top_module(
	input clk,
	input reset,
	output reg [3:0] q);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Initialize the clock signal 'clk' to 0 and the reset signal 'reset' to 0. After 5 clock cycles, set 'reset' to 1 for one clock cycle, then set 'reset' back to 0. This scenario tests the initial state and the behavior of the counter during the reset operation.",
  "scenario 2": "Set 'reset' to 0 and apply a clock signal with rising edges. Observe the behavior of 'q' as it increments from 0 to 9 over 10 clock cycles. This scenario checks the counting functionality of the DUT.",
  "scenario 3": "After counting to 9, maintain 'reset' as 0 and apply one more clock cycle. Then, at the next clock rising edge, set 'reset' to 1 for one clock cycle. This checks if 'q' resets to 0 when 'reset' is activated at the next clock edge after counting to 9.",
  "scenario 4": "After testing the reset functionality, set 'reset' to 0. Then, apply clock cycles to observe if 'q' correctly increments from 0 again after a reset without encountering any unexpected states. This reinforces the sequential nature of the counting.",
  "scenario 5": "Apply clock cycles continuously while toggling 'reset' high for one clock cycle every 5 cycles. This scenario tests the DUT's resilience to multiple resets during the counting process.",
  "scenario 6": "Hold 'reset' low and drive 'clk' high for several clock cycles (20 cycles), then set 'reset' high for one clock cycle and observe the reset behavior. This scenario verifies the DUT's response to an active reset during and after an extended period of normal operation."
}

