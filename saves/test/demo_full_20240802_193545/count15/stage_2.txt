############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Build a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.
RTL testbench specification:
{
  "important data": "N/A",
  "technical specifications": [
    "1. The DUT is a 4-bit binary counter that counts from 0 to 15 inclusive, with a period of 16.",
    "2. The DUT has a synchronous reset input that is active high, which resets the counter to 0.",
    "3. The DUT has a clock input (clk) and produces a 4-bit output (q).",
    "4. Edge-triggered counting occurs on the rising edge of the clock signal when reset is low."
  ]
}
DUT header:
module top_module(
	input clk,
	input reset,
	output reg [3:0] q);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Apply a reset signal high (1) for 1 clock cycle at the start, then set reset low (0). This ensures the DUT starts in a known state.",
  "scenario 2": "After the reset is deactivated, toggle the clock signal and observe the output for 16 clock cycles. This should allow the DUT to count through its full range from 0 to 15.",
  "scenario 3": "Again set the reset signal high (1) for 1 clock cycle during the counting period after 5 clock cycles, then set it low (0) to test if it properly resets to 0.",
  "scenario 4": "Activate the reset signal high (1) immediately before the clock signal goes high at the 10th clock cycle, then bring it low (0) after the clock pulse to check that the counter resumes counting from 0.",
  "scenario 5": "Hold the reset signal low (0) and toggle the clock signal for 10 clock cycles, then set the reset signal high (1) for 1 clock cycle, and then low (0) again to observe the counter state after the reset.",
  "scenario 6": "Initiate a reset high (1) for 1 clock cycle, immediately followed by another reset high (1) for 1 clock cycle during a clock tick after 10 clock cycles, and then set reset low (0) to check if the counter starts from 0.",
  "scenario 7": "Sustain the reset signal low (0) while toggling the clock for 20 clock cycles to observe how the DUT behaves beyond its maximum count of 15."
}

