############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input reset,
	input [31:0] in,
	output reg [31:0] out);

Your other information:
RTL circuit problem description:
For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. "Capture" means that the output will remain 1 until the register is reset (active high synchronous reset).
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "At time 0, assert reset (reset = 1) for 1 clock cycle, then deassert reset (reset = 0). Ensure input in = 32'b00000000000000000000000000000000 during the reset period.",
  "scenario 2": "At time 2, set in = 32'b11111111111111111111111111111111. After 1 clock cycle, change in to 32'b11111111111111111111111111111110. Observe if the corresponding output bit transitions correctly.",
  "scenario 3": "At time 4, set in = 32'b11111111111111111111111111111100. At time 5, set in = 32'b11111111111111111111111111111000. Monitor the output for the captured bits at each transition.",
  "scenario 4": "At time 6, set in = 32'b11111111111111111111111111111101. At time 7, set in = 32'b11111111111111111111111111111111. Validate that the output does not change for bits that were captured.",
  "scenario 5": "At time 10, assert reset (reset = 1) for 1 clock cycle, then deassert it again (reset = 0). Use in = 32'b00000000000000000000000000000000 during the reset cycle to check that the output resets correctly.",
  "scenario 6": "At time 12, set in = 32'b10101010101010101010101010101010. At time 13, change in to 32'b10101010101010101010101010101000. Ensure that output captures the transition appropriately.",
  "scenario 7": "At time 14, set in = 32'b01010101010101010101010101010101. At time 15, change in to 32'b01010101010101010101010101010000. Check for the proper output capture for the transition.",
  "scenario 8": "At time 16, set in = 32'b00000000000000000000000000000001. At time 17, change in to 32'b00000000000000000000000000000000. Ensure output captures the transition at this clock.",
  "scenario 9": "At time 18, set in = 32'b11111111111111111111111111111111. Keep it stable for 2 clock cycles and observe to confirm no output captures occur.",
  "scenario 10": "At time 20, clear the output by asserting reset (reset = 1) for 1 clock cycle, then deassert reset (reset = 0). Input in = 32'b11111111111111111111111111111111 during this period."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
reg [31:0] in;
wire [31:0] out;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.in(in),
	.out(out)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, out = %d", scenario, clk, reset, in, out);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, out = %d", scenario, clk, reset, in, out);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
reg [31:0] in;
wire [31:0] out;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.in(in),
	.out(out)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // Scenario 1
    scenario = 1;
    reset = 1; in = 32'b00000000000000000000000000000000;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, out = %d", scenario, clk, reset, in, out);
        #10;
    end
    reset = 0; 
    #10;

    // Scenario 2
    scenario = 2;
    in = 32'b11111111111111111111111111111111;
    #10;
    in = 32'b11111111111111111111111111111110;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, out = %d", scenario, clk, reset, in, out);
        #10;
    end

    // Scenario 3
    scenario = 3;
    in = 32'b11111111111111111111111111111100;
    #10;
    in = 32'b11111111111111111111111111111000;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, out = %d", scenario, clk, reset, in, out);
        #10;
    end

    // Scenario 4
    scenario = 4;
    in = 32'b11111111111111111111111111111101;
    #10;
    in = 32'b11111111111111111111111111111111;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, out = %d", scenario, clk, reset, in, out);
        #10;
    end

    // Scenario 5
    scenario = 5;
    reset = 1; in = 32'b00000000000000000000000000000000;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, out = %d", scenario, clk, reset, in, out);
        #10;
    end
    reset = 0; 
    #10;

    // Scenario 6
    scenario = 6;
    in = 32'b10101010101010101010101010101010;
    #10;
    in = 32'b10101010101010101010101010101000;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, out = %d", scenario, clk, reset, in, out);
        #10;
    end

    // Scenario 7
    scenario = 7;
    in = 32'b01010101010101010101010101010101;
    #10;
    in = 32'b01010101010101010101010101010000;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, out = %d", scenario, clk, reset, in, out);
        #10;
    end

    // Scenario 8
    scenario = 8;
    in = 32'b00000000000000000000000000000001;
    #10;
    in = 32'b00000000000000000000000000000000;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, out = %d", scenario, clk, reset, in, out);
        #10;
    end

    // Scenario 9
    scenario = 9;
    in = 32'b11111111111111111111111111111111;
    repeat(2) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, out = %d", scenario, clk, reset, in, out);
        #10;
    end 

    // Scenario 10
    scenario = 10;
    reset = 1; in = 32'b11111111111111111111111111111111;
    repeat(1) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, in = %d, out = %d", scenario, clk, reset, in, out);
        #10;
    end
    reset = 0; 
    #10;

    $fclose(file);
    $finish;
end

endmodule
```

