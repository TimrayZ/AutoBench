############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, x = %d, y = %d, z = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, x = %d, y = %d, z = %d", "scenario: 1b, x = %d, y = %d, z = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	input x,
	input y,
	output z);

Your other information:
RTL circuit problem description:
Implement the boolean function z = (x^y) & x.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT implements the boolean function z = (x^y) & x.",
    "2. The module header specifies that there are two input signals: 'x' and 'y', both are of type wire or reg, and one output signal: 'z', which is also of type wire.",
    "3. The inputs 'x' and 'y' can be either 0 or 1, and 'z' will be the result of the boolean operation defined.",
    "4. The testbench must provide all possible combinations of inputs x and y (00, 01, 10, 11) to verify the correctness of the DUT.",
    "5. The expected output 'z' must be calculated based on the input values to verify if the DUT produces the correct results."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set x = 0 and y = 0 for one clock cycle. After one clock cycle, check the output z.",
  "scenario 2": "Set x = 0 and y = 1 for one clock cycle. After one clock cycle, check the output z.",
  "scenario 3": "Set x = 1 and y = 0 for one clock cycle. After one clock cycle, check the output z.",
  "scenario 4": "Set x = 1 and y = 1 for one clock cycle. After one clock cycle, check the output z."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, x = %d, y = %d, z = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, x = %d, y = %d, z = %d", "scenario: 1b, x = %d, y = %d, z = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Define inputs and output
    reg x;
    reg y;
    wire z;

    // Instantiate the DUT
    top_module DUT (
        .x(x),
        .y(y),
        .z(z)
    );

    // File descriptor
    integer file;

    initial begin
        // Open the output file
        file = $fopen("TBout.txt", "w");

        // Scenario 1: x = 0, y = 0
        x = 0; 
        y = 0;
        #1; // Wait for one clock cycle
        $fdisplay(file, "scenario: 1, x = %d, y = %d, z = %d", x, y, z);

        // Scenario 2: x = 0, y = 1
        x = 0; 
        y = 1;
        #1; // Wait for one clock cycle
        $fdisplay(file, "scenario: 2, x = %d, y = %d, z = %d", x, y, z);

        // Scenario 3: x = 1, y = 0
        x = 1; 
        y = 0;
        #1; // Wait for one clock cycle
        $fdisplay(file, "scenario: 3, x = %d, y = %d, z = %d", x, y, z);

        // Scenario 4: x = 1, y = 1
        x = 1; 
        y = 1;
        #1; // Wait for one clock cycle
        $fdisplay(file, "scenario: 4, x = %d, y = %d, z = %d", x, y, z);

        // Close the output file
        $fclose(file);

        // End simulation
        $finish;
    end
endmodule
```

