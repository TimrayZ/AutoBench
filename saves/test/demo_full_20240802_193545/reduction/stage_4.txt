############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, parity = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, parity = %d", "scenario: 1b, in = %d, parity = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [7:0] in,
	output parity
);

Your other information:
RTL circuit problem description:
Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use "even" parity, where the parity bit is just the XOR of all 8 data bits.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a module named 'top_module' that takes an 8-bit input 'in' and produces a 1-bit output 'parity'.",
    "2. The parity bit is calculated using even parity, which is the XOR of all 8 bits of the input.",
    "3. The expected output 'parity' will be '0' if the number of '1's in the input is even, and '1' if the number of '1's is odd.",
    "4. The input signal 'in' is a vector of size 8 (i.e., [7:0])."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply input 'in' = 8'b00000000 at clock cycle 0. Wait for 1 clock cycle.",
  "scenario 2": "Apply input 'in' = 8'b00000001 at clock cycle 1. Wait for 1 clock cycle.",
  "scenario 3": "Apply input 'in' = 8'b11111111 at clock cycle 2. Wait for 1 clock cycle.",
  "scenario 4": "Apply input 'in' = 8'b10101010 at clock cycle 3. Wait for 1 clock cycle.",
  "scenario 5": "Apply input 'in' = 8'b01010101 at clock cycle 4. Wait for 1 clock cycle.",
  "scenario 6": "Apply input 'in' = 8'b11001100 at clock cycle 5. Wait for 1 clock cycle.",
  "scenario 7": "Apply input 'in' = 8'b00110011 at clock cycle 6. Wait for 1 clock cycle.",
  "scenario 8": "Apply input 'in' = 8'b00001111 at clock cycle 7. Wait for 1 clock cycle.",
  "scenario 9": "Apply input 'in' = 8'b11110000 at clock cycle 8. Wait for 1 clock cycle.",
  "scenario 10": "Apply input 'in' = 8'b10111100 at clock cycle 9. Wait for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, parity = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, parity = %d", "scenario: 1b, in = %d, parity = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Inputs
    reg [7:0] in;

    // Outputs
    wire parity;

    // Instantiate the DUT (Device Under Test)
    top_module dut (
        .in(in),
        .parity(parity)
    );

    // File descriptor for output
    integer fd;

    initial begin
        // Open the output file
        fd = $fopen("TBout.txt", "w");

        // Scenario 1
        in = 8'b00000000; // Apply input
        #1; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 1, in = %d, parity = %d", in, parity);

        // Scenario 2
        in = 8'b00000001; // Apply input
        #1; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 2, in = %d, parity = %d", in, parity);

        // Scenario 3
        in = 8'b11111111; // Apply input
        #1; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 3, in = %d, parity = %d", in, parity);

        // Scenario 4
        in = 8'b10101010; // Apply input
        #1; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 4, in = %d, parity = %d", in, parity);

        // Scenario 5
        in = 8'b01010101; // Apply input
        #1; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 5, in = %d, parity = %d", in, parity);

        // Scenario 6
        in = 8'b11001100; // Apply input
        #1; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 6, in = %d, parity = %d", in, parity);

        // Scenario 7
        in = 8'b00110011; // Apply input
        #1; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 7, in = %d, parity = %d", in, parity);

        // Scenario 8
        in = 8'b00001111; // Apply input
        #1; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 8, in = %d, parity = %d", in, parity);

        // Scenario 9
        in = 8'b11110000; // Apply input
        #1; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 9, in = %d, parity = %d", in, parity);

        // Scenario 10
        in = 8'b10111100; // Apply input
        #1; // Wait for 1 clock cycle
        $fdisplay(fd, "scenario: 10, in = %d, parity = %d", in, parity);

        // Close the file
        $fclose(fd);
        $finish; // End the simulation
    end

endmodule
```

