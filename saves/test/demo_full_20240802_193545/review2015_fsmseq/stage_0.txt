############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
Please generate the verilog RTL code according to the following description and header information:
problem description:
Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.
RTL header:
module top_module(
	input clk,
	input reset,
	input data,
	output start_shifting);

please only reply verilog codes. reply_format:
```verilog
your_code_here...
```


########## assistant ##########
```verilog
module top_module(
    input clk,
    input reset,
    input data,
    output reg start_shifting);

    // State encoding
    parameter S0 = 3'b000,  
              S1 = 3'b001,  
              S2 = 3'b010,  
              S3 = 3'b011,  
              S4 = 3'b100;  

    reg [2:0] state, next_state;

    // State transition
    always @(posedge clk) begin
        if (reset) begin
            state <= S0; 
            start_shifting <= 0;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            S0: begin
                if (data) 
                    next_state = S1; 
                else 
                    next_state = S0; 
            end
            S1: begin
                if (data) 
                    next_state = S2; 
                else 
                    next_state = S0; 
            end
            S2: begin
                if (data) 
                    next_state = S3; 
                else 
                    next_state = S0; 
            end
            S3: begin
                if (data) 
                    next_state = S4; 
                else 
                    next_state = S0; 
            end
            S4: begin
                next_state = S4; // Remain in this state forever on finding the sequence
            end
            default: next_state = S0;
        endcase
    end

    // Output logic
    always @(posedge clk) begin
        if (reset) 
            start_shifting <= 0;
        else if (state == S4) 
            start_shifting <= 1;
    end

endmodule
```

