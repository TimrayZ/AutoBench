############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. You are in the first stage. In this stage, please summarize the technical details of the DUT and give me a technical specification of the testbench generation task, so we can use it to design its corresponding testbench.
3. The core of testbench is the testcases. It usually include two parts logically: the input signals to the DUT and the expected result signals from DUT. The testbench will send the input signals to DUT and check if the result signals are the same as the expected result signals. If they are the same, this means the DUT is passed. Otherwise the DUT fails.
4. Your technical specification should include these sections:
- section 1: specification of the DUT, including the module header of the RTL code. If table or other detailed data is provided in the original problem description, DO repeat them in your response. They are very important!!!
5. your response should be in the form of JSON.
6. below is the information including the problem description and the DUT header:
RTL circuit problem description:
Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.
DUT header:
module top_module(
	input clk,
	input reset,
	input data,
	output start_shifting);

your response must be in JSON form. example:
{
  "important data": "...", # type: string. If no table, state transition or other direct data, leave this with ""
  "technical specifications": ["...", "...", ...] # each element of the list is one specification string, the starting of the string is its index 
}



########## assistant ##########
{
  "important data": "The finite-state machine will search for the sequence 1101 in the input bit stream. When the sequence is found, it sets start_shifting to 1 until reset is activated. Reset is high and synchronous.",
  "technical specifications": [
    "1. DUT module header: module top_module(input clk, input reset, input data, output start_shifting);",
    "2. The DUT should correctly identify the sequence 1101 from the input data.",
    "3. The start_shifting output should be set to 1 when the sequence 1101 is detected.",
    "4. The DUT must maintain start_shifting as 1 until a synchronous reset signal is received.",
    "5. The reset signal should have a priority over the data input and should reset all states in the finite-state machine.",
    "6. The testbench should generate a sequence of input data that contains both the sequence 1101 and other unrelated bits to test both positive and negative scenarios.",
    "7. The testbench should verify that the output start_shifting is correctly set to 1 when the sequence is detected and reset to 0 upon receiving the reset signal."
  ]
}

