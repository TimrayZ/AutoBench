############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input reset,
	input data,
	output start_shifting);

Your other information:
RTL circuit problem description:
Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Initialize reset high for 2 clock cycles, then set reset low and apply a sequence of data bits that does not contain '1101' (e.g., 0000) for 4 clock cycles.",
  "scenario 2": "After scenario 1, set reset high for 1 clock cycle and then low again. Apply the data bits '0001101' over 5 clock cycles to test positive detection followed by a non-detection.",
  "scenario 3": "Set reset high for 2 clock cycles, then set reset low. Apply the data bits '00110101' over 8 clock cycles, testing both the occurrence of the sequence and unrelated bits that do not form '1101'.",
  "scenario 4": "Set reset high for 1 clock cycle, then set it low. Inject the sequence '11010000' over 5 clock cycles, ensuring detection occurs and check continuous input after the detected sequence.",
  "scenario 5": "Set reset high for 2 clock cycles, then low. Feed the sequence '11100101' over 7 clock cycles, which includes '1101' but is separated by non-matching bits and check appropriate handling.",
  "scenario 6": "Hold reset high for 1 clock cycle, then low. Input the sequence '000000000' for 5 clock cycles, ensuring that thereâ€™s no misinterpretation of input bits.",
  "scenario 7": "Start with reset high for 1 clock cycle, then low. Sequentially provide the bitstream '1101' for 1 clock cycle, followed by random bits for the next 4 cycles to assess whether the reset affects the output correctly.",
  "scenario 8": "Assert reset high for 1 clock cycle, bring it low, and then provide a continuous stream of the bit sequence '11110110101' over 11 clock cycles, ensuring stability and correctness in output after a sequence is detected."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
reg  data;
wire  start_shifting;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.data(data),
	.start_shifting(start_shifting)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg  reset;
reg  data;
wire  start_shifting;

integer file, scenario;

// DUT instantiation
top_module DUT (
	.clk(clk),
	.reset(reset),
	.data(data),
	.start_shifting(start_shifting)
);

// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end

// Scenario Based Test
initial begin

    // Scenario 1
    scenario = 1;
    reset = 1;
    repeat(2) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    end
    reset = 0;
    data = 0;
    repeat(4) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    end

    // Scenario 2
    scenario = 2;
    reset = 1;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    reset = 0;
    data = 0;
    #10;
    data = 0; #10; // setting up next bits
    data = 0; #10; 
    data = 1; #10; 
    data = 0; #10;
    repeat(1) begin
        #10; 
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    end

    // Scenario 3
    scenario = 3;
    reset = 1;
    repeat(2) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    end
    reset = 0;
    data = 0; #10; 
    data = 0; #10; 
    data = 1; #10; 
    data = 1; #10; 
    data = 0; #10; 
    data = 1; #10; 
    data = 0; #10; 
    repeat(2) begin
        #10; 
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    end

    // Scenario 4
    scenario = 4;
    reset = 1;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    reset = 0;
    data = 1; #10; 
    data = 1; #10; 
    data = 0; #10; 
    data = 1; #10; 
    data = 0; #10; 
    repeat(2) begin
        #10; 
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    end

    // Scenario 5
    scenario = 5;
    reset = 1;
    repeat(2) begin
        #10;
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    end
    reset = 0;
    data = 1; #10; 
    data = 1; #10; 
    data = 1; #10; 
    data = 0; #10; 
    data = 1; #10; 
    data = 0; #10; 
    repeat(2) begin
        #10; 
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    end

    // Scenario 6
    scenario = 6;
    reset = 1;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    reset = 0;
    data = 0; #10; 
    data = 0; #10; 
    data = 0; #10; 
    data = 0; #10; 
    data = 0; #10; 
    repeat(2) begin
        #10; 
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    end

    // Scenario 7
    scenario = 7;
    reset = 1;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    reset = 0;
    data = 1; #10; 
    repeat(3) begin
        #10; 
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
        data = {$random}%2; // random bit
    end

    // Scenario 8
    scenario = 8;
    reset = 1;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    reset = 0;
    data = 1; #10; 
    data = 1; #10; 
    data = 1; #10; 
    data = 1; #10; 
    data = 0; #10; 
    data = 1; #10; 
    data = 0; #10; 
    data = 1; #10; 
    data = 0; #10; 
    data = 1; #10; 
    repeat(3) begin
        #10; 
        $fdisplay(file, "[check]scenario: %d, clk = %d, reset = %d, data = %d, start_shifting = %d", scenario, clk, reset, data, start_shifting);
    end

    $fclose(file);
    $finish;
end

endmodule
```

