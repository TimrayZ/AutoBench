############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.

// time            clock           a               p               q               
// 0ns             0               0               x               x               
// 5ns             0               0               x               x               
// 10ns            0               0               x               x               
// 15ns            0               0               x               x               
// 20ns            0               0               x               x               
// 25ns            1               0               0               x               
// 30ns            1               0               0               x               
// 35ns            1               0               0               x               
// 40ns            1               0               0               x               
// 45ns            1               0               0               x               
// 50ns            1               0               0               x               
// 55ns            0               0               0               0               
// 60ns            0               0               0               0               
// 65ns            0               0               0               0               
// 70ns            0               1               0               0               
// 75ns            0               0               0               0               
// 80ns            0               1               0               0               
// 85ns            1               0               0               0               
// 90ns            1               1               1               0               
// 95ns            1               0               0               0               
// 100ns           1               1               1               0               
// 105ns           1               0               0               0               
// 110ns           1               1               1               0               
// 115ns           0               0               1               1               
// 120ns           0               1               1               1               
// 125ns           0               0               1               1               
// 130ns           0               1               1               1               
// 135ns           0               0               1               1               
// 140ns           0               0               1               1               
// 145ns           1               0               0               1               
// 150ns           1               0               0               1               
// 155ns           1               0               0               1               
// 160ns           1               0               0               1               
// 165ns           1               1               1               1               
// 170ns           1               0               0               1               
// 175ns           0               1               0               0               
// 180ns           0               0               0               0               
// 185ns           0               1               0               0               
// 190ns           0               0               0               0       
RTL testbench specification:
{
  "important data": "A sequential circuit with inputs clock and a, and outputs p and q. The circuit's behavior is observed through given timing waveforms.",
  "technical specifications": [
    "1. DUT module header: module top_module (input clock, input a, output reg p, output reg q).",
    "2. The testbench must initialize the clock and generate the specified input signals for 'a'.",
    "3. The testbench should track and compare the outputs 'p' and 'q' against expected values derived from the simulation waveforms provided.",
    "4. The testbench must account for the timing of the clock, updating inputs and recording outputs at correct time intervals according to the specified waveform behavior.",
    "5. Each test case in the testbench should start with a known state, toggle the clock, apply input signals, and check the DUT outputs after each relevant clock edge."
  ]
}
DUT header:
module top_module (
	input clock,
	input a, 
	output reg p,
	output reg q
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Initialize inputs: clock = 0, a = 0. Wait for 5ns.",
  "scenario 2": "Toggle clock to 1, apply a = 0. Wait for 5ns.",
  "scenario 3": "Maintain clock at 1, apply a = 0. Wait for 5ns.",
  "scenario 4": "Maintain clock at 1, apply a = 0. Wait for 5ns.",
  "scenario 5": "Maintain clock at 1, apply a = 0. Wait for 5ns.",
  "scenario 6": "Maintain clock at 1, apply a = 0. Wait for 5ns.",
  "scenario 7": "Toggle clock to 0, apply a = 0. Wait for 5ns.",
  "scenario 8": "Maintain clock at 0, apply a = 0. Wait for 5ns.",
  "scenario 9": "Maintain clock at 0, apply a = 1. Wait for 5ns.",
  "scenario 10": "Toggle clock to 1, apply a = 0. Wait for 5ns.",
  "scenario 11": "Toggle clock to 1, apply a = 1. Wait for 5ns.",
  "scenario 12": "Maintain clock at 1, apply a = 0. Wait for 5ns.",
  "scenario 13": "Maintain clock at 1, apply a = 1. Wait for 5ns.",
  "scenario 14": "Toggle clock to 0, apply a = 0. Wait for 5ns.",
  "scenario 15": "Maintain clock at 0, apply a = 1. Wait for 5ns.",
  "scenario 16": "Maintain clock at 0, apply a = 0. Wait for 5ns.",
  "scenario 17": "Toggle clock to 1, apply a = 1. Wait for 5ns.",
  "scenario 18": "Maintain clock at 1, apply a = 1. Wait for 5ns.",
  "scenario 19": "Toggle clock to 0, apply a = 0. Wait for 5ns.",
  "scenario 20": "Toggle clock to 1, apply a = 0. Wait for 5ns.",
  "scenario 21": "Toggle clock to 0, maintain a = 0. Wait for 5ns.",
  "scenario 22": "Toggle clock to 0, apply a = 1. Wait for 5ns.",
  "scenario 23": "Toggle clock to 1, maintain a = 0. Wait for 5ns.",
  "scenario 24": "Toggle clock to 0, maintain a = 0. Wait for 5ns.",
  "scenario 25": "Maintain clock at 1, apply a = 1. Wait for 5ns.",
  "scenario 26": "Toggle clock to 0, maintain a = 1. Wait for 5ns."
}

