############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, out = %d", "scenario: 1b, a = %d, b = %d, c = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module(
	input a, 
	input b,
	input c,
	output out
);

Your other information:
RTL circuit problem description:
Implement the circuit described by the Karnaugh map below.
//        a
// bc   0 1 
//  00 | 0 | 1 |
//  01 | 1 | 1 | 
//  11 | 1 | 1 | 
//  10 | 1 | 1 | 

RTL testbench specification:
{
  "important data": "The Karnaugh map represents the boolean function for three inputs a, b, and c, where the output 'out' is true (1) for the combinations of inputs as follows: (b=0, c=1) -> 1, (b=1, c=0) -> 1, (b=1, c=1) -> 1, (b=0, c=0) -> 0.",
  "technical specifications": [
    "1. DUT inputs: three single-bit inputs a, b, c.",
    "2. DUT output: one single-bit output out.",
    "3. The output out should be 1 for the following combinations of inputs: (a=0, b=0, c=1), (a=0, b=1, c=0), (a=1, b=0, c=1), (a=1, b=1, c=0), (a=1, b=1, c=1).",
    "4. The output out should be 0 for the input combination (a=0, b=0, c=0).",
    "5. The testbench should iterate over all possible combinations of inputs (2^3 = 8 combinations).",
    "6. For each combination of inputs, the testbench should compare the DUT output with the expected output derived from the Karnaugh map."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Set inputs to (a=0, b=0, c=0) at clock cycle 0 and apply for 1 clock cycle.",
  "scenario 2": "Set inputs to (a=0, b=0, c=1) at clock cycle 1 and apply for 1 clock cycle.",
  "scenario 3": "Set inputs to (a=0, b=1, c=0) at clock cycle 2 and apply for 1 clock cycle.",
  "scenario 4": "Set inputs to (a=0, b=1, c=1) at clock cycle 3 and apply for 1 clock cycle.",
  "scenario 5": "Set inputs to (a=1, b=0, c=0) at clock cycle 4 and apply for 1 clock cycle.",
  "scenario 6": "Set inputs to (a=1, b=0, c=1) at clock cycle 5 and apply for 1 clock cycle.",
  "scenario 7": "Set inputs to (a=1, b=1, c=0) at clock cycle 6 and apply for 1 clock cycle.",
  "scenario 8": "Set inputs to (a=1, b=1, c=1) at clock cycle 7 and apply for 1 clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, out = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, out = %d", "scenario: 1b, a = %d, b = %d, c = %d, out = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

  // Inputs
  reg a;
  reg b;
  reg c;

  // Outputs
  wire out;

  // Instantiate the Device Under Test (DUT)
  top_module DUT (
    .a(a),
    .b(b),
    .c(c),
    .out(out)
  );

  // File for exporting signals
  integer file;
  
  initial begin
    // Open the file to write
    file = $fopen("TBout.txt", "w");
    
    // Scenario 1
    a = 0; b = 0; c = 0; // Inputs for scenario 1
    #1; // Wait for 1 time unit
    $fdisplay(file, "scenario: 1, a = %d, b = %d, c = %d, out = %d", a, b, c, out);
    
    // Scenario 2
    a = 0; b = 0; c = 1; // Inputs for scenario 2
    #1; 
    $fdisplay(file, "scenario: 2, a = %d, b = %d, c = %d, out = %d", a, b, c, out);
    
    // Scenario 3
    a = 0; b = 1; c = 0; // Inputs for scenario 3
    #1; 
    $fdisplay(file, "scenario: 3, a = %d, b = %d, c = %d, out = %d", a, b, c, out);
    
    // Scenario 4
    a = 0; b = 1; c = 1; // Inputs for scenario 4
    #1; 
    $fdisplay(file, "scenario: 4, a = %d, b = %d, c = %d, out = %d", a, b, c, out);
    
    // Scenario 5
    a = 1; b = 0; c = 0; // Inputs for scenario 5
    #1; 
    $fdisplay(file, "scenario: 5, a = %d, b = %d, c = %d, out = %d", a, b, c, out);
    
    // Scenario 6
    a = 1; b = 0; c = 1; // Inputs for scenario 6
    #1; 
    $fdisplay(file, "scenario: 6, a = %d, b = %d, c = %d, out = %d", a, b, c, out);
    
    // Scenario 7
    a = 1; b = 1; c = 0; // Inputs for scenario 7
    #1; 
    $fdisplay(file, "scenario: 7, a = %d, b = %d, c = %d, out = %d", a, b, c, out);
    
    // Scenario 8
    a = 1; b = 1; c = 1; // Inputs for scenario 8
    #1; 
    $fdisplay(file, "scenario: 8, a = %d, b = %d, c = %d, out = %d", a, b, c, out);
    
    // Close the file
    $fclose(file);
    
    // Finish simulation
    $finish;
  end

endmodule
```

