############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "0: The DUT is designed to simulate the behavior of a dual-edge triggered flip-flop using a single-clock edge-triggered mechanism.",
    "1: The DUT takes two inputs: 'clk' (the clock signal) and 'd' (the data input).",
    "2: The DUT produces one output: 'q' (the output of the flip-flop), which is of type reg.",
    "3: The DUT's operation should be such that on each rising edge and falling edge of the 'clk' signal, the output 'q' should capture the input 'd'.",
    "4: The testbench will need to validate that 'q' correctly reflects 'd' at both the rising and falling edges of 'clk'.",
    "5: The testbench will apply a sequence of test cases to cover various scenarios including stability, edge transitions, and potential race conditions."
  ]
}
DUT header:
module top_module(
	input clk,
	input d,
	output reg q);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Initialize the DUT with 'clk' signal set to 0 and 'd' signal set to 0. Wait for 10 clock cycles.",
  "scenario 2": "Set 'd' to 1 and toggle 'clk' between 0 and 1 every clock cycle for 20 clock cycles, capturing the transitions of 'd' at both edges.",
  "scenario 3": "Set 'd' to 0 and apply a clock period of 2 time units, increment the clock by 1 time unit at each cycle for 10 cycles.",
  "scenario 4": "Set 'd' to 1, hold it steady for 5 clock cycles, then toggle 'd' to 0 on the next rising edge of the clock, observing the transitions at both edges.",
  "scenario 5": "Introduce a race condition by changing 'd' multiple times in the same clock period, starting 'd' at 0 then changing it to 1 at 1 time unit, and then back to 0 at 2 time units, followed by clock toggling.",
  "scenario 6": "Set 'clk' to toggle every clock cycle, start with 'd' at 1 for the first 3 cycles, then switch it to 0 for the next 3 cycles; this will validate the DUT's behavior over consecutive cycles.",
  "scenario 7": "Apply a random sequence of 'd' values (0 or 1) at every clock edge, ensuring that the signal changes are effective at both the rising and falling edges of 'clk' over a span of 15 clock cycles."
}

