############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input [7:0] in,
	output reg [7:0] anyedge);

Your other information:
RTL circuit problem description:
For each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Set the input 'in' to 8'b00000000 at clk cycle 0. Change 'in' to 8'b00000001 at clk cycle 1. Keep 'in' constant at 8'b00000001 for subsequent clock cycles. This tests the detection of a 0 to 1 transition.",
  "scenario 2": "Set 'in' to 8'b11111111 at clk cycle 0. Change 'in' to 8'b11111110 at clk cycle 1, and then revert 'in' back to 8'b11111111 at clk cycle 2. This tests the system's ability to ignore a 1 to 0 transition.",
  "scenario 3": "Set 'in' to 8'b00000010 at clk cycle 0. Change 'in' to 8'b00000110 at clk cycle 1. Hold 'in' steady at 8'b00000110 for the next clock cycle. This checks that multiple bits can transition at once.",
  "scenario 4": "Initialize 'in' to 8'b00000000 at clk cycle 0. At clk cycle 3, transition 'in' to 8'b00000011. Hold 'in' constant for three clock cycles, then revert to 8'b00000000. This tests the detection after several cycles.",
  "scenario 5": "Set 'in' to 8'b10101010 at clk cycle 0. At clk cycle 1, change 'in' to 8'b10101011. At clk cycle 2, transition 'in' to 8'b10111011. Hold 'in' constant for two clock cycles. This tests multiple transitions.",
  "scenario 6": "Initialize 'in' to 8'b00000001 at clk cycle 0. At clk cycle 1, change 'in' to 8'b00000000, then back to 8'b00000001 at clk cycle 2. This tests the ability to handle transitions back to the original state.",
  "scenario 7": "Set 'in' to 8'b11110000 at clk cycle 0. Transition 'in' to 8'b11111000 at clk cycle 1 and back to 8'b11100000 at clk cycle 2. Hold 'in' for the next two clock cycles. This examines the detection of back-and-forth transitions."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg [7:0] in;
wire [7:0] anyedge;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.in(in),
	.anyedge(anyedge)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, anyedge = %d", scenario, clk, in, anyedge);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, anyedge = %d", scenario, clk, in, anyedge);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg [7:0] in;
wire [7:0] anyedge;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.in(in),
	.anyedge(anyedge)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    in = 8'b00000000;
    #10;
    in = 8'b00000001;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, anyedge = %d", scenario, clk, in, anyedge);
        #10;
    end

    // scenario 2
    scenario = 2;
    in = 8'b11111111;
    #10;
    in = 8'b11111110;
    #10;
    in = 8'b11111111;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, anyedge = %d", scenario, clk, in, anyedge);
        #10;
    end

    // scenario 3
    scenario = 3;
    in = 8'b00000010;
    #10;
    in = 8'b00000110;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, anyedge = %d", scenario, clk, in, anyedge);
        #10;
    end

    // scenario 4
    scenario = 4;
    in = 8'b00000000;
    #10;
    #10;
    #10;
    in = 8'b00000011;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, anyedge = %d", scenario, clk, in, anyedge);
        #10;
    end
    in = 8'b00000000;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, anyedge = %d", scenario, clk, in, anyedge);
        #10;
    end

    // scenario 5
    scenario = 5;
    in = 8'b10101010;
    #10;
    in = 8'b10101011;
    #10;
    in = 8'b10111011;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, anyedge = %d", scenario, clk, in, anyedge);
        #10;
    end

    // scenario 6
    scenario = 6;
    in = 8'b00000001;
    #10;
    in = 8'b00000000;
    #10;
    in = 8'b00000001';
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, anyedge = %d", scenario, clk, in, anyedge);
        #10;
    end

    // scenario 7
    scenario = 7;
    in = 8'b11110000;
    #10;
    in = 8'b11111000;
    #10;
    in = 8'b11100000;
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, anyedge = %d", scenario, clk, in, anyedge);
        #10;
    end

    $fclose(file);
    $finish;
end

endmodule
```

