############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, sum = %d, cout = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, sum = %d, cout = %d", "scenario: 1b, a = %d, b = %d, sum = %d, cout = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input a,
	input b,
	output sum,
	output cout
);

Your other information:
RTL circuit problem description:
Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1: The DUT is a half adder that takes two input bits, a and b.",
    "2: The DUT produces two outputs: sum and cout (carry-out).",
    "3: The sum output should be the logical XOR of the inputs a and b.",
    "4: The carry-out output (cout) should be the logical AND of the inputs a and b.",
    "5: The testbench must verify the functionality of the half adder for all possible combinations of input values (00, 01, 10, 11).",
    "6: For each combination of inputs, the expected outputs (sum and cout) must be compared against the actual outputs produced by the DUT."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply inputs a = 0 and b = 0 at time 0 clock cycles. Wait for 1 clock cycle before proceeding to the next scenario.",
  "scenario 2": "Apply inputs a = 0 and b = 1 at time 1 clock cycle. Wait for 1 clock cycle before proceeding to the next scenario.",
  "scenario 3": "Apply inputs a = 1 and b = 0 at time 2 clock cycles. Wait for 1 clock cycle before proceeding to the next scenario.",
  "scenario 4": "Apply inputs a = 1 and b = 1 at time 3 clock cycles. Wait for 1 clock cycle before ending the test."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, sum = %d, cout = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, sum = %d, cout = %d", "scenario: 1b, a = %d, b = %d, sum = %d, cout = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_half_adder;

  // Inputs
  reg a;
  reg b;

  // Outputs
  wire sum;
  wire cout;

  // Instantiate the DUT (Device Under Test)
  top_module dut (
    .a(a),
    .b(b),
    .sum(sum),
    .cout(cout)
  );

  // File descriptor
  integer file;

  initial begin
    // Open the output file
    file = $fopen("TBout.txt", "w");

    // Test scenario 1: a = 0, b = 0
    a = 0;
    b = 0;
    #1; // Wait for stable signals
    $fdisplay(file, "scenario: 1, a = %d, b = %d, sum = %d, cout = %d", a, b, sum, cout);
    #1; // Wait for next scenario

    // Test scenario 2: a = 0, b = 1
    a = 0;
    b = 1;
    #1; // Wait for stable signals
    $fdisplay(file, "scenario: 2, a = %d, b = %d, sum = %d, cout = %d", a, b, sum, cout);
    #1; // Wait for next scenario

    // Test scenario 3: a = 1, b = 0
    a = 1;
    b = 0;
    #1; // Wait for stable signals
    $fdisplay(file, "scenario: 3, a = %d, b = %d, sum = %d, cout = %d", a, b, sum, cout);
    #1; // Wait for next scenario

    // Test scenario 4: a = 1, b = 1
    a = 1;
    b = 1;
    #1; // Wait for stable signals
    $fdisplay(file, "scenario: 4, a = %d, b = %d, sum = %d, cout = %d", a, b, sum, cout);
    
    // Close the output file
    $fclose(file);
    
    // End the simulation
    $finish;
  end

endmodule
```

