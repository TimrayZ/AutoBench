############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1: The DUT is a half adder that takes two input bits, a and b.",
    "2: The DUT produces two outputs: sum and cout (carry-out).",
    "3: The sum output should be the logical XOR of the inputs a and b.",
    "4: The carry-out output (cout) should be the logical AND of the inputs a and b.",
    "5: The testbench must verify the functionality of the half adder for all possible combinations of input values (00, 01, 10, 11).",
    "6: For each combination of inputs, the expected outputs (sum and cout) must be compared against the actual outputs produced by the DUT."
  ]
}
DUT header:
module top_module (
	input a,
	input b,
	output sum,
	output cout
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Apply inputs a = 0 and b = 0 at time 0 clock cycles. Wait for 1 clock cycle before proceeding to the next scenario.",
  "scenario 2": "Apply inputs a = 0 and b = 1 at time 1 clock cycle. Wait for 1 clock cycle before proceeding to the next scenario.",
  "scenario 3": "Apply inputs a = 1 and b = 0 at time 2 clock cycles. Wait for 1 clock cycle before proceeding to the next scenario.",
  "scenario 4": "Apply inputs a = 1 and b = 1 at time 3 clock cycles. Wait for 1 clock cycle before ending the test."
}

