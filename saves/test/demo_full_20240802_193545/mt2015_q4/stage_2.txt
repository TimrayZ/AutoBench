############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Module A implements the boolean function z = (x^y) & x.

// Module B can be described by the following simulation waveform: 

// time            x               y               z               
// 0ns             0               0               1               
// 5ns             0               0               1               
// 10ns            0               0               1               
// 15ns            0               0               1               
// 20ns            0               0               1               
// 25ns            1               0               0               
// 30ns            1               0               0               
// 35ns            0               1               0               
// 40ns            0               1               0               
// 45ns            1               1               1               
// 50ns            1               1               1               
// 55ns            0               0               1               
// 60ns            0               1               0               
// 65ns            0               1               0               
// 70ns            1               1               1               
// 75ns            0               1               0               
// 80ns            0               1               0               
// 85ns            0               1               0               
// 90ns            1               0               0               


// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.

// Implement this circuit in Verilog.
RTL testbench specification:
{
  "important data": "The boolean function implemented is z = (x^y) & x. The simulation waveform provided indicates the expected output 'z' based on the input values 'x' and 'y' at various time intervals.",
  "technical specifications": [
    "1. DUT Module Header: module top_module(input x, input y, output z);",
    "2. The behavior of the DUT should be verified against the provided simulation waveform, ensuring that the output 'z' matches the expected results based on the input values 'x' and 'y'.",
    "3. Include test cases that cover all combinations of inputs (x, y) to ensure comprehensive verification of the DUT.",
    "4. The testbench should apply the input signals at the specified time intervals as indicated in the problem description.",
    "5. The expected results for the outputs 'z' should be defined based on the truth table derived from the boolean function z = (x^y) & x."
  ]
}
DUT header:
module top_module(
	input x,
	input y,
	output z);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Apply inputs x = 0 and y = 0 at time 0ns, hold for 5ns.",
  "scenario 2": "Apply inputs x = 0 and y = 0 at time 5ns, hold for 15ns.",
  "scenario 3": "Apply inputs x = 0 and y = 0 at time 20ns, hold for 5ns.",
  "scenario 4": "Apply inputs x = 1 and y = 0 at time 25ns, hold for 10ns.",
  "scenario 5": "Apply inputs x = 0 and y = 1 at time 35ns, hold for 10ns.",
  "scenario 6": "Apply inputs x = 1 and y = 1 at time 45ns, hold for 5ns.",
  "scenario 7": "Apply inputs x = 0 and y = 0 at time 55ns, hold for 5ns.",
  "scenario 8": "Apply inputs x = 0 and y = 1 at time 60ns, hold for 10ns.",
  "scenario 9": "Apply inputs x = 1 and y = 1 at time 70ns, hold for 5ns.",
  "scenario 10": "Apply inputs x = 0 and y = 1 at time 75ns, hold for 15ns.",
  "scenario 11": "Apply inputs x = 1 and y = 0 at time 90ns, hold for 5ns."
}

