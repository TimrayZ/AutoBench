############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module (
	input clk,
	input [7:0] in,
	input reset,
	output done
);

Your other information:
RTL circuit problem description:
The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Reset the DUT by asserting 'reset' high for one clock cycle. Then deassert 'reset' and wait for 1 clock cycle before sending any input bytes.",
  "scenario 2": "Send a series of bytes with 'in[3]=0' for the first 5 clock cycles to ensure these bytes are discarded.",
  "scenario 3": "Send a byte with 'in[3]=1' at clock cycle 6 to signal the start of a message, followed by two arbitrary bytes at clock cycles 7 and 8.",
  "scenario 4": "After receiving the first message, wait for 2 clock cycles and send another byte with 'in[3]=1' at clock cycle 10 followed by two arbitrary bytes at clock cycles 11 and 12.",
  "scenario 5": "Send a series of bytes with 'in[3]=0' for 4 clock cycles, then send another byte with 'in[3]=1' at clock cycle 16, followed by two arbitrary bytes at clock cycles 17 and 18.",
  "scenario 6": "Reset the DUT again by asserting 'reset' high for one clock cycle, then deassert 'reset' and wait for 1 clock cycle before continuing with new input bytes.",
  "scenario 7": "Send a single byte with 'in[3]=1' at clock cycle 21, then delay sending the next bytes for 3 clock cycles to check the behavior of the DUT when the input is interrupted.",
  "scenario 8": "Send random bytes with 'in[3]=0' for 3 clock cycles, then at clock cycle 25 send another byte with 'in[3]=1' followed by two arbitrary bytes at clock cycles 26 and 27.",
  "scenario 9": "Send an entire sequence where all three bytes contain 'in[3]=1' at clock cycles 30, 31, and 32 to verify how the DUT handles unexpected start signals.",
  "scenario 10": "Send a byte with 'in[3]=0' after receiving a complete message, followed by a byte with 'in[3]=1' at clock cycle 35 to check the DUT's readiness to receive the next message."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg [7:0] in;
reg  reset;
wire  done;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.in(in),
	.reset(reset),
	.done(done)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg [7:0] in;
reg  reset;
wire  done;

integer file, scenario;
// DUT instantiation
top_module DUT (
    .clk(clk),
    .in(in),
    .reset(reset),
    .done(done)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    reset = 1;
    #10;
    reset = 0;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);

    // scenario 2
    scenario = 2;
    in = 8'b00000000; // in[3]=0
    repeat(5) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);
        #10;
    end

    // scenario 3
    scenario = 3;
    in = 8'b00001000; // in[3]=1
    #10;
    in = 8'b00000001; // arbitrary byte
    #10;
    in = 8'b00000010; // arbitrary byte
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);

    // scenario 4
    scenario = 4;
    #20; // wait for 2 clock cycles
    in = 8'b00001000; // in[3]=1
    #10;
    in = 8'b00000011; // arbitrary byte
    #10;
    in = 8'b00000100; // arbitrary byte
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);

    // scenario 5
    scenario = 5;
    in = 8'b00000000; // in[3]=0
    repeat(4) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);
        #10;
    end
    in = 8'b00001000; // in[3]=1
    #10;
    in = 8'b00000101; // arbitrary byte
    #10;
    in = 8'b00000110; // arbitrary byte
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);

    // scenario 6
    scenario = 6;
    reset = 1;
    #10;
    reset = 0;
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);

    // scenario 7
    scenario = 7;
    in = 8'b00001000; // in[3]=1
    #10;
    in = 8'b00000000; // delay in sending the next bytes
    #30;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);

    // scenario 8
    scenario = 8;
    in = 8'b00000000; // in[3]=0
    repeat(3) begin
        $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);
        #10;
    end
    in = 8'b00001000; // in[3]=1
    #10;
    in = 8'b00000111; // arbitrary byte
    #10;
    in = 8'b00001001; // arbitrary byte
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);

    // scenario 9
    scenario = 9;
    in = 8'b00001000; // in[3]=1
    #10;
    in = 8'b00001000; // in[3]=1
    #10;
    in = 8'b00001000; // in[3]=1
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);

    // scenario 10
    scenario = 10;
    in = 8'b00000000; // in[3]=0
    #10;
    in = 8'b00001000; // in[3]=1
    #10;
    $fdisplay(file, "[check]scenario: %d, clk = %d, in = %d, reset = %d, done = %d", scenario, clk, in, reset, done);

    $fclose(file);
    $finish;
end

endmodule
```

