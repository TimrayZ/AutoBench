############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.
RTL testbench specification:
{
  "important data": "The PS/2 mouse protocol sends messages that are three bytes long. The first byte of each message has in[3]=1, which indicates the start of a message. The DUT processes a continuous byte stream and must signal 'done' after successfully receiving three bytes.",
  "technical specifications": [
    "1. The DUT (Device Under Test) is a finite state machine that finds message boundaries in the PS/2 mouse protocol byte stream.",
    "2. The DUT has the following input ports: 'clk' (clock signal), 'in' (an 8-bit input byte), and 'reset' (active high synchronous reset).",
    "3. The DUT has one output port: 'done', which indicates that a complete message of three bytes has been received.",
    "4. The DUT must discard bytes until a byte is received with in[3] = 1, marking the start of a message.",
    "5. The DUT must signal 'done' immediately after the third byte of a message has been received.",
    "6. The reset signal should reset the state machine synchronously, ensuring proper initialization."
  ]
}
DUT header:
module top_module (
	input clk,
	input [7:0] in,
	input reset,
	output done
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Reset the DUT by asserting 'reset' high for one clock cycle. Then deassert 'reset' and wait for 1 clock cycle before sending any input bytes.",
  "scenario 2": "Send a series of bytes with 'in[3]=0' for the first 5 clock cycles to ensure these bytes are discarded.",
  "scenario 3": "Send a byte with 'in[3]=1' at clock cycle 6 to signal the start of a message, followed by two arbitrary bytes at clock cycles 7 and 8.",
  "scenario 4": "After receiving the first message, wait for 2 clock cycles and send another byte with 'in[3]=1' at clock cycle 10 followed by two arbitrary bytes at clock cycles 11 and 12.",
  "scenario 5": "Send a series of bytes with 'in[3]=0' for 4 clock cycles, then send another byte with 'in[3]=1' at clock cycle 16, followed by two arbitrary bytes at clock cycles 17 and 18.",
  "scenario 6": "Reset the DUT again by asserting 'reset' high for one clock cycle, then deassert 'reset' and wait for 1 clock cycle before continuing with new input bytes.",
  "scenario 7": "Send a single byte with 'in[3]=1' at clock cycle 21, then delay sending the next bytes for 3 clock cycles to check the behavior of the DUT when the input is interrupted.",
  "scenario 8": "Send random bytes with 'in[3]=0' for 3 clock cycles, then at clock cycle 25 send another byte with 'in[3]=1' followed by two arbitrary bytes at clock cycles 26 and 27.",
  "scenario 9": "Send an entire sequence where all three bytes contain 'in[3]=1' at clock cycles 30, 31, and 32 to verify how the DUT handles unexpected start signals.",
  "scenario 10": "Send a byte with 'in[3]=0' after receiving a complete message, followed by a byte with 'in[3]=1' at clock cycle 35 to check the DUT's readiness to receive the next message."
}

