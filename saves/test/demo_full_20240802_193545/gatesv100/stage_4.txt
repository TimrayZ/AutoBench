############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out_both = %d, out_any = %d, out_different = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out_both = %d, out_any = %d, out_different = %d", "scenario: 1b, in = %d, out_both = %d, out_any = %d, out_different = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [99:0] in,
	output [98:0] out_both,
	output [99:1] out_any,
	output [99:0] out_different
);

Your other information:
RTL circuit problem description:
You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: 
// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. 
// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. 
// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].

RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The DUT is a module named 'top_module' that processes a 100-bit input vector 'in' with a size of [99:0].",
    "2. The DUT has three output vectors: 'out_both' of size [98:0], 'out_any' of size [99:1], and 'out_different' of size [99:0].",
    "3. The 'out_both' output indicates whether both the corresponding input bit and its neighbour to the left are '1'. It does not compute for 'in[99]'.",
    "4. The 'out_any' output indicates whether either the corresponding input bit or its neighbour to the right is '1'. It does not compute for 'in[0]'.",
    "5. The 'out_different' output indicates whether the corresponding input bit is different from its neighbour to the left, treating the input vector as wrapping around; thus, 'in[0]' is compared to 'in[99]'."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply a 100-bit input vector with all bits set to '0'. This should involve a single clock cycle as the initial state.",
  "scenario 2": "Apply a 100-bit input vector where the first 50 bits are '1' and the last 50 bits are '0'. This should be performed over a single clock cycle.",
  "scenario 3": "Apply a 100-bit input vector with alternating bits, i.e., '10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010'. Conduct this change in a single clock cycle.",
  "scenario 4": "Apply a 100-bit input vector where bits 0 to 98 are '1's and bit 99 is '0'. This should happen over a single clock cycle.",
  "scenario 5": "Apply a 100-bit input vector where all bits are set to '1'. This should take place in one clock cycle.",
  "scenario 6": "Apply a 100-bit input vector that starts with '1' at bit 0 and then alternates between '0' and '1' (e.g., '10010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101'). This should be applied over a single clock cycle.",
  "scenario 7": "Apply a 100-bit input vector where the last bit (bit 99) is '1' and all preceding bits (0 to 98) are '0'. This should occur in one clock cycle.",
  "scenario 8": "Apply a 100-bit input vector with a random selection of bits (for instance, '0111001100110101001000001110011010011001101101110010101011000001100101010101...'). This should be applied over one clock cycle."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, in = %d, out_both = %d, out_any = %d, out_different = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, in = %d, out_both = %d, out_any = %d, out_different = %d", "scenario: 1b, in = %d, out_both = %d, out_any = %d, out_different = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Testbench signals
    reg [99:0] in;
    wire [98:0] out_both;
    wire [99:1] out_any;
    wire [99:0] out_different;

    // Instantiate the DUT
    top_module dut (
        .in(in),
        .out_both(out_both),
        .out_any(out_any),
        .out_different(out_different)
    );

    // File handling
    integer file;
    
    initial begin
        file = $fopen("TBout.txt", "w");

        // Scenario 1
        in = 100'b0; 
        #1;
        $fdisplay(file, "scenario: 1, in = %b, out_both = %b, out_any = %b, out_different = %b", in, out_both, out_any, out_different);

        // Scenario 2
        in = 100'b11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000; 
        #1;
        $fdisplay(file, "scenario: 2, in = %b, out_both = %b, out_any = %b, out_different = %b", in, out_both, out_any, out_different);

        // Scenario 3
        in = 100'b10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010; 
        #1;
        $fdisplay(file, "scenario: 3, in = %b, out_both = %b, out_any = %b, out_different = %b", in, out_both, out_any, out_different);

        // Scenario 4
        in = 100'b11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000; 
        #1;
        $fdisplay(file, "scenario: 4, in = %b, out_both = %b, out_any = %b, out_different = %b", in, out_both, out_any, out_different);

        // Scenario 5
        in = 100'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111; 
        #1;
        $fdisplay(file, "scenario: 5, in = %b, out_both = %b, out_any = %b, out_different = %b", in, out_both, out_any, out_different);

        // Scenario 6
        in = 100'b10010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101; 
        #1;
        $fdisplay(file, "scenario: 6, in = %b, out_both = %b, out_any = %b, out_different = %b", in, out_both, out_any, out_different);

        // Scenario 7
        in = 100'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001; 
        #1;
        $fdisplay(file, "scenario: 7, in = %b, out_both = %b, out_any = %b, out_different = %b", in, out_both, out_any, out_different);

        // Scenario 8
        in = 100'b0111001100110101001000001110011010011001101101110010101011000001100101010101; 
        #1;
        $fdisplay(file, "scenario: 8, in = %b, out_both = %b, out_any = %b, out_different = %b", in, out_both, out_any, out_different);

        // Close file
        $fclose(file);
    end

endmodule
```

