############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to complete a given verilog testbench code. This testbench is for a verilog RTL module code (we call it as "DUT", device under test). This circuit is a sequential circuit. The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. test scenarios which determines values and sequential information of test vectors
- 1.4. the testbench structure
- 1.5. the instruction of writing our testbench

DUT header:
module top_module(
	input clk,
	input [7:0] d,
	input reset,
	output reg [7:0] q);

Your other information:
RTL circuit problem description:
Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.
IMPORTANT - test scenario (Please determine the values of input signals according to these test scenarios.):
{
  "scenario 1": "Apply a high reset signal (reset = 1) while clk = 0. Wait for 1 clock cycle (clk goes low to high), then release reset (reset = 0) at the next negative edge of clk.",
  "scenario 2": "Set d = 8'b00000001 (d = 1) and apply a negative edge transition of clk after 1 clock cycle of reset = 0, to observe the behavior of the flip-flops.",
  "scenario 3": "Set d = 8'b11111111 (d = 255) and apply a negative edge transition of clk. Wait for 1 clock cycle and then set d = 8'b10101010 (d = 170) and apply another negative edge of clk.",
  "scenario 4": "Apply a high reset signal (reset = 1) while clk = 0, wait 1 clock cycle, then release reset (reset = 0) and set d = 8'b00000000 (d = 0). Apply a negative edge of clk after 1 clock cycle.",
  "scenario 5": "Set d = 8'b01010101 (d = 85) and apply a negative edge transition of clk. After 1 clock cycle, maintain the same d value and apply another negative edge of clk.",
  "scenario 6": "Keep reset low (reset = 0) and set d = 8'b11110000 (d = 240). After 1 clock cycle, set reset = 1 for 1 clock cycle and then back to reset = 0. Wait for the next negative edge of clk.",
  "scenario 7": "Set d = 8'b00001111 (d = 15) and apply a negative edge of clk. Change d to 8'b00110011 (d = 51) while maintaining reset = 0, and apply another negative edge of clk after 2 clock cycles."
}
below is the given testbench codes:
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg [7:0] d;
reg  reset;
wire [7:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.d(d),
	.reset(reset),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // write your scenario checking codes here, according to scenario information

    $fclose(file);
    $finish;
end

endmodule


The testbench does not need to check the DUT's output but only export the signals of DUT. Please export the signals of DUT to a file named "TBout.txt" at the end of each scenario. The template is given below:
$fdisplay(file, "[check]scenario: %d, clk = %d, d = %d, reset = %d, q = %d", scenario, clk, d, reset, q);
The variables are already declared. The clock signal is already prepared. This output will be used to check the correctness of the DUT's output later.
please only use "#10" as the delay when you need. If you need longer delay, you can use multiple "#10", such as "#10; #10; #10;". Avoid meaningless long delay in your code.
If you need a loop in a scenario to check multiple time points, use "repeat" loop. for exmaple:
```
// scenario x
scenario = x;
signal_1 = 1;
repeat(5) begin
    $fdisplay(file, "[check]scenario: %d, clk = %d, d = %d, reset = %d, q = %d", scenario, clk, d, reset, q);
    #10;
end
```
Please determine the input signal's exact values according to given test scenarios. 
Note: please complete the last initial code part (marked in the given testbench template). You should give me the completed full code. The testbench template above is to help you generate the code. You must use %d when exporting values.
please generate the full testbench code. please only reply verilog codes, no other words. 



########## assistant ##########
```verilog
`timescale 1ns / 1ps
module testbench;
reg  clk;
reg [7:0] d;
reg  reset;
wire [7:0] q;

integer file, scenario;
// DUT instantiation
top_module DUT (
	.clk(clk),
	.d(d),
	.reset(reset),
	.q(q)
);
// Clock generation
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end

initial begin
    file = $fopen("TBout.txt", "w");
end
// Scenario Based Test
initial begin

    // scenario 1
    scenario = 1;
    reset = 1;
    #10; // while clk = 0
    reset = 0;
    #10; // clk goes low to high
    $fdisplay(file, "[check]scenario: %d, clk = %d, d = %d, reset = %d, q = %d", scenario, clk, d, reset, q);

    // scenario 2
    scenario = 2;
    d = 8'b00000001; // d = 1
    #10; // after 1 clock cycle of reset = 0
    $fdisplay(file, "[check]scenario: %d, clk = %d, d = %d, reset = %d, q = %d", scenario, clk, d, reset, q);

    // scenario 3
    scenario = 3;
    d = 8'b11111111; // d = 255
    #10; // apply negative edge transition of clk
    $fdisplay(file, "[check]scenario: %d, clk = %d, d = %d, reset = %d, q = %d", scenario, clk, d, reset, q);
    #10; // wait for 1 clock cycle
    d = 8'b10101010; // d = 170
    #10; // apply another negative edge of clk
    $fdisplay(file, "[check]scenario: %d, clk = %d, d = %d, reset = %d, q = %d", scenario, clk, d, reset, q);

    // scenario 4
    scenario = 4;
    reset = 1;
    #10; // wait 1 clock cycle
    reset = 0;
    d = 8'b00000000; // d = 0
    #10; // apply a negative edge of clk
    $fdisplay(file, "[check]scenario: %d, clk = %d, d = %d, reset = %d, q = %d", scenario, clk, d, reset, q);

    // scenario 5
    scenario = 5;
    d = 8'b01010101; // d = 85
    #10; // apply a negative edge transition of clk
    $fdisplay(file, "[check]scenario: %d, clk = %d, d = %d, reset = %d, q = %d", scenario, clk, d, reset, q);
    #10; // after 1 clock cycle
    $fdisplay(file, "[check]scenario: %d, clk = %d, d = %d, reset = %d, q = %d", scenario, clk, d, reset, q);
    #10; // apply another negative edge of clk
    $fdisplay(file, "[check]scenario: %d, clk = %d, d = %d, reset = %d, q = %d", scenario, clk, d, reset, q);

    // scenario 6
    scenario = 6;
    reset = 0; 
    d = 8'b11110000; // d = 240
    #10; // after 1 clock cycle
    reset = 1; // set reset = 1 for 1 clock cycle
    #10;
    reset = 0;
    #10; // wait for the next negative edge of clk
    $fdisplay(file, "[check]scenario: %d, clk = %d, d = %d, reset = %d, q = %d", scenario, clk, d, reset, q);

    // scenario 7
    scenario = 7;
    d = 8'b00001111; // d = 15
    #10; // apply a negative edge of clk
    $fdisplay(file, "[check]scenario: %d, clk = %d, d = %d, reset = %d, q = %d", scenario, clk, d, reset, q);
    d = 8'b00110011; // change d to 51
    #20; // after 2 clock cycles
    $fdisplay(file, "[check]scenario: %d, clk = %d, d = %d, reset = %d, q = %d", scenario, clk, d, reset, q);

    $fclose(file);
    $finish;
end

endmodule
```

