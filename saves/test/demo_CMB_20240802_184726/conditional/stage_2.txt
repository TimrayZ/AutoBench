############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########
1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". Our target is to generate the verilog testbench for the DUT. This testbench can check if the DUT in verilog satisfies all technical requirements of the problem description.
2. you are in section 2. in this section, please give me the test scenarios. you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 
3. your information is:
RTL circuit problem description:
Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). 
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1: The DUT module is named 'top_module' and has four 8-bit unsigned input signals (a, b, c, d) and one 8-bit unsigned output signal (min).",
    "2: The primary functionality of the DUT is to take four unsigned numbers as input and output the minimum value among them as the output 'min'.",
    "3: The DUT utilizes standard comparison operators to determine the minimum value between the inputs.",
    "4: The input signals are expected to be in the range of 0 to 255 (for 8-bit unsigned representation).",
    "5: The testbench should generate all possible combinations of input signals (a, b, c, d) in a systematic way to ensure full coverage of the input space.",
    "6: Expected results for each set of input signals should be calculated manually or programmatically before execution of the testbench, ensuring that all scenarios (including similar values) are accounted for.",
    "7: The testbench should include checks that compare the output 'min' from the DUT against the expected minimum value for any given set of inputs.",
    "8: The testbench should include a reporting mechanism to indicate whether each test case has passed or failed, and should provide appropriate debugging information in case of failure."
  ]
}
DUT header:
module top_module (
	input [7:0] a,
	input [7:0] b,
	input [7:0] c,
	input [7:0] d,
	output reg [7:0] min
);


you only need to describe the stimulus in each test scenarios. If time is important, please inform the clock cycle information. we will use the stimulus description to generate the test vectors and send them to DUT. you must not tell the expected results even though you know that. 

your response must be in JSON form. example:
{
  "scenario 1": "...", # each content is a string
  "scenario 2": "...",
  "scenario 3": "...",
  ...
}


########## assistant ##########
{
  "scenario 1": "Input signals: a = 0, b = 1, c = 2, d = 3. Apply stimulus at clock cycle 10.",
  "scenario 2": "Input signals: a = 10, b = 15, c = 5, d = 20. Apply stimulus at clock cycle 20.",
  "scenario 3": "Input signals: a = 255, b = 100, c = 200, d = 50. Apply stimulus at clock cycle 30.",
  "scenario 4": "Input signals: a = 44, b = 44, c = 44, d = 44 (all inputs equal). Apply stimulus at clock cycle 40.",
  "scenario 5": "Input signals: a = 5, b = 5, c = 5, d = 10. Apply stimulus at clock cycle 50.",
  "scenario 6": "Input signals: a = 7, b = 8, c = 9, d = 10. Apply stimulus at clock cycle 60.",
  "scenario 7": "Input signals: a = 1, b = 2, c = 3, d = 0. Apply stimulus at clock cycle 70.",
  "scenario 8": "Input signals: a = 22, b = 14, c = 5, d = 7. Apply stimulus at clock cycle 80.",
  "scenario 9": "Input signals: a = 30, b = 60, c = 10, d = 20. Apply stimulus at clock cycle 90.",
  "scenario 10": "Input signals: a = 255, b = 255, c = 0, d = 0. Apply stimulus at clock cycle 100.",
  "scenario 11": "Input signals: a = 128, b = 64, c = 32, d = 16. Apply stimulus at clock cycle 110.",
  "scenario 12": "Input signals: a = 0, b = 255, c = 127, d = 64. Apply stimulus at clock cycle 120.",
  "scenario 13": "Input signals: a = 2, b = 3, c = 1, d = 2. Apply stimulus at clock cycle 130.",
  "scenario 14": "Input signals: a = 99, b = 55, c = 75, d = 55. Apply stimulus at clock cycle 140.",
  "scenario 15": "Input signals: a = 10, b = 10, c = 10, d = 8. Apply stimulus at clock cycle 150."
}

