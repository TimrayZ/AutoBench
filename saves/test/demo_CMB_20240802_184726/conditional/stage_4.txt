############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, min = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, min = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [7:0] a,
	input [7:0] b,
	input [7:0] c,
	input [7:0] d,
	output reg [7:0] min
);

Your other information:
RTL circuit problem description:
Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). 
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1: The DUT module is named 'top_module' and has four 8-bit unsigned input signals (a, b, c, d) and one 8-bit unsigned output signal (min).",
    "2: The primary functionality of the DUT is to take four unsigned numbers as input and output the minimum value among them as the output 'min'.",
    "3: The DUT utilizes standard comparison operators to determine the minimum value between the inputs.",
    "4: The input signals are expected to be in the range of 0 to 255 (for 8-bit unsigned representation).",
    "5: The testbench should generate all possible combinations of input signals (a, b, c, d) in a systematic way to ensure full coverage of the input space.",
    "6: Expected results for each set of input signals should be calculated manually or programmatically before execution of the testbench, ensuring that all scenarios (including similar values) are accounted for.",
    "7: The testbench should include checks that compare the output 'min' from the DUT against the expected minimum value for any given set of inputs.",
    "8: The testbench should include a reporting mechanism to indicate whether each test case has passed or failed, and should provide appropriate debugging information in case of failure."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Input signals: a = 0, b = 1, c = 2, d = 3. Apply stimulus at clock cycle 10.",
  "scenario 2": "Input signals: a = 10, b = 15, c = 5, d = 20. Apply stimulus at clock cycle 20.",
  "scenario 3": "Input signals: a = 255, b = 100, c = 200, d = 50. Apply stimulus at clock cycle 30.",
  "scenario 4": "Input signals: a = 44, b = 44, c = 44, d = 44 (all inputs equal). Apply stimulus at clock cycle 40.",
  "scenario 5": "Input signals: a = 5, b = 5, c = 5, d = 10. Apply stimulus at clock cycle 50.",
  "scenario 6": "Input signals: a = 7, b = 8, c = 9, d = 10. Apply stimulus at clock cycle 60.",
  "scenario 7": "Input signals: a = 1, b = 2, c = 3, d = 0. Apply stimulus at clock cycle 70.",
  "scenario 8": "Input signals: a = 22, b = 14, c = 5, d = 7. Apply stimulus at clock cycle 80.",
  "scenario 9": "Input signals: a = 30, b = 60, c = 10, d = 20. Apply stimulus at clock cycle 90.",
  "scenario 10": "Input signals: a = 255, b = 255, c = 0, d = 0. Apply stimulus at clock cycle 100.",
  "scenario 11": "Input signals: a = 128, b = 64, c = 32, d = 16. Apply stimulus at clock cycle 110.",
  "scenario 12": "Input signals: a = 0, b = 255, c = 127, d = 64. Apply stimulus at clock cycle 120.",
  "scenario 13": "Input signals: a = 2, b = 3, c = 1, d = 2. Apply stimulus at clock cycle 130.",
  "scenario 14": "Input signals: a = 99, b = 55, c = 75, d = 55. Apply stimulus at clock cycle 140.",
  "scenario 15": "Input signals: a = 10, b = 10, c = 10, d = 8. Apply stimulus at clock cycle 150."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, min = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, min = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    reg [7:0] a;
    reg [7:0] b;
    reg [7:0] c;
    reg [7:0] d;
    wire [7:0] min;

    top_module DUT (
        .a(a),
        .b(b),
        .c(c),
        .d(d),
        .min(min)
    );

    integer file;

    initial begin
        file = $fopen("TBout.txt", "w");
        
        // Scenario 1
        a = 8'd0; b = 8'd1; c = 8'd2; d = 8'd3;
        #10;
        $fdisplay(file, "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 2
        a = 8'd10; b = 8'd15; c = 8'd5; d = 8'd20;
        #10;
        $fdisplay(file, "scenario: 2, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 3
        a = 8'd255; b = 8'd100; c = 8'd200; d = 8'd50;
        #10;
        $fdisplay(file, "scenario: 3, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 4
        a = 8'd44; b = 8'd44; c = 8'd44; d = 8'd44;
        #10;
        $fdisplay(file, "scenario: 4, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 5
        a = 8'd5; b = 8'd5; c = 8'd5; d = 8'd10;
        #10;
        $fdisplay(file, "scenario: 5, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 6
        a = 8'd7; b = 8'd8; c = 8'd9; d = 8'd10;
        #10;
        $fdisplay(file, "scenario: 6, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 7
        a = 8'd1; b = 8'd2; c = 8'd3; d = 8'd0;
        #10;
        $fdisplay(file, "scenario: 7, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 8
        a = 8'd22; b = 8'd14; c = 8'd5; d = 8'd7;
        #10;
        $fdisplay(file, "scenario: 8, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 9
        a = 8'd30; b = 8'd60; c = 8'd10; d = 8'd20;
        #10;
        $fdisplay(file, "scenario: 9, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 10
        a = 8'd255; b = 8'd255; c = 8'd0; d = 8'd0;
        #10;
        $fdisplay(file, "scenario: 10, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 11
        a = 8'd128; b = 8'd64; c = 8'd32; d = 8'd16;
        #10;
        $fdisplay(file, "scenario: 11, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 12
        a = 8'd0; b = 8'd255; c = 8'd127; d = 8'd64;
        #10;
        $fdisplay(file, "scenario: 12, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 13
        a = 8'd2; b = 8'd3; c = 8'd1; d = 8'd2;
        #10;
        $fdisplay(file, "scenario: 13, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 14
        a = 8'd99; b = 8'd55; c = 8'd75; d = 8'd55;
        #10;
        $fdisplay(file, "scenario: 14, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);
        
        // Scenario 15
        a = 8'd10; b = 8'd10; c = 8'd10; d = 8'd8;
        #10;
        $fdisplay(file, "scenario: 15, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        $fclose(file);
        $finish;
    end

endmodule
```

