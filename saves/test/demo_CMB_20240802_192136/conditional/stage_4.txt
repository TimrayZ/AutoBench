############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You alraedy have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, min = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, min = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [7:0] a,
	input [7:0] b,
	input [7:0] c,
	input [7:0] d,
	output reg [7:0] min
);

Your other information:
RTL circuit problem description:
Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). 
RTL testbench specification:
{
  "important data": "Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b).",
  "technical specifications": [
    "1. The DUT is declared as a module named 'top_module'.",
    "2. The module has four 8-bit unsigned input ports: 'a', 'b', 'c', and 'd'.",
    "3. The module has one 8-bit unsigned output port: 'min'.",
    "4. The output 'min' should represent the minimum value among the four input numbers.",
    "5. The testbench should apply various sets of input values to ensure all combinations are tested.",
    "6. The expected output must be calculated to verify if the DUT correctly outputs the minimum value.",
    "7. The testbench must include at least 10 test cases that cover normal cases, edge cases (e.g., all values the same, minimum and maximum values), and random cases."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "Apply inputs a=8'h01, b=8'h02, c=8'h03, d=8'h04 at clock cycle 0 and validate the output at clock cycle 1.",
  "scenario 2": "Apply inputs a=8'hFF, b=8'h80, c=8'h7F, d=8'h01 at clock cycle 2 and validate the output at clock cycle 3.",
  "scenario 3": "Apply inputs a=8'h10, b=8'h10, c=8'h10, d=8'h10 at clock cycle 4 and validate the output at clock cycle 5.",
  "scenario 4": "Apply inputs a=8'h00, b=8'h01, c=8'h02, d=8'h03 at clock cycle 6 and validate the output at clock cycle 7.",
  "scenario 5": "Apply inputs a=8'h7F, b=8'h80, c=8'h81, d=8'hFF at clock cycle 8 and validate the output at clock cycle 9.",
  "scenario 6": "Apply inputs a=8'h04, b=8'h03, c=8'h02, d=8'h01 at clock cycle 10 and validate the output at clock cycle 11.",
  "scenario 7": "Apply inputs a=8'hA0, b=8'h5A, c=8'h1F, d=8'h30 at clock cycle 12 and validate the output at clock cycle 13.",
  "scenario 8": "Apply inputs a=8'h12, b=8'h34, c=8'h56, d=8'h78 at clock cycle 14 and validate the output at clock cycle 15.",
  "scenario 9": "Apply inputs a=8'h00, b=8'h00, c=8'h00, d=8'h00 at clock cycle 16 and validate the output at clock cycle 17.",
  "scenario 10": "Apply inputs a=8'h80, b=8'h40, c=8'h20, d=8'h00 at clock cycle 18 and validate the output at clock cycle 19."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, min = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, min = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module tb_top_module;

    // Input signals
    reg [7:0] a;
    reg [7:0] b;
    reg [7:0] c;
    reg [7:0] d;
    
    // Output signals
    wire [7:0] min;

    // Instantiate the DUT
    top_module uut (
        .a(a),
        .b(b),
        .c(c),
        .d(d),
        .min(min)
    );

    // File descriptor
    integer fd;

    initial begin
        // Open the output file
        fd = $fopen("TBout.txt", "w");

        // Scenario 1
        a = 8'h01; b = 8'h02; c = 8'h03; d = 8'h04; 
        #1; // wait for signal stability
        $fdisplay(fd, "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 2
        a = 8'hFF; b = 8'h80; c = 8'h7F; d = 8'h01; 
        #1; // wait for signal stability
        $fdisplay(fd, "scenario: 2, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 3
        a = 8'h10; b = 8'h10; c = 8'h10; d = 8'h10; 
        #1; // wait for signal stability
        $fdisplay(fd, "scenario: 3, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 4
        a = 8'h00; b = 8'h01; c = 8'h02; d = 8'h03; 
        #1; // wait for signal stability
        $fdisplay(fd, "scenario: 4, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 5
        a = 8'h7F; b = 8'h80; c = 8'h81; d = 8'hFF; 
        #1; // wait for signal stability
        $fdisplay(fd, "scenario: 5, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 6
        a = 8'h04; b = 8'h03; c = 8'h02; d = 8'h01; 
        #1; // wait for signal stability
        $fdisplay(fd, "scenario: 6, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 7
        a = 8'hA0; b = 8'h5A; c = 8'h1F; d = 8'h30; 
        #1; // wait for signal stability
        $fdisplay(fd, "scenario: 7, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 8
        a = 8'h12; b = 8'h34; c = 8'h56; d = 8'h78; 
        #1; // wait for signal stability
        $fdisplay(fd, "scenario: 8, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 9
        a = 8'h00; b = 8'h00; c = 8'h00; d = 8'h00; 
        #1; // wait for signal stability
        $fdisplay(fd, "scenario: 9, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 10
        a = 8'h80; b = 8'h40; c = 8'h20; d = 8'h00; 
        #1; // wait for signal stability
        $fdisplay(fd, "scenario: 10, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Close the file
        $fclose(fd);
        $finish;
    end

endmodule
```

